<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/principalScreen/PrincipalScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/principalScreen/PrincipalScreen.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.presentation.principalScreen&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.AcUnit&#10;import androidx.compose.material.icons.filled.ArrowDropDown&#10;import androidx.compose.material.icons.filled.BorderAll&#10;import androidx.compose.material.icons.filled.Casino&#10;import androidx.compose.material.icons.filled.DashboardCustomize&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.FilterList&#10;import androidx.compose.material.icons.filled.Link&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material.icons.filled.Share&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.Divider&#10;import androidx.compose.material3.DividerDefaults&#10;import androidx.compose.material3.DropdownMenu&#10;import androidx.compose.material3.DropdownMenuItem&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.OutlinedTextFieldDefaults&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextField&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.presentation.viewmodel.CategoryViewModel&#10;import esan.mendoza.impulso.presentation.viewmodel.RecursoViewModel&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;@Composable&#10;fun PrincipalScreen(&#10;    categoryViewModel: CategoryViewModel,&#10;    recursoViewModel: RecursoViewModel&#10;) {&#10;    val categories by categoryViewModel.categories.collectAsState()&#10;    val recursos by recursoViewModel.recursos.collectAsState()&#10;    val isLoading by categoryViewModel.isLoading.collectAsState()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;    ) {&#10;        Row {&#10;            Icon(&#10;                imageVector = Icons.Filled.DashboardCustomize,&#10;                contentDescription = &quot;Icono de flecha hacia abajo&quot;,&#10;                modifier = Modifier&#10;                    .padding(end = 8.dp)&#10;                    .align(Alignment.CenterVertically).size(55.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Column {&#10;                Text(&#10;                    &quot;IMPULSO&quot;,&#10;                    style = MaterialTheme.typography.headlineLarge,&#10;                )&#10;                Text(&#10;                    &quot;Organiza tu universo&quot;,&#10;                    style = MaterialTheme.typography.titleSmall,&#10;                    modifier = Modifier.padding(bottom = 5.dp)&#10;                )&#10;            }&#10;&#10;        }&#10;        Spacer(modifier = Modifier.height(10.dp))&#10;        Buscador(&#10;            categories = categories,&#10;            onSearch = { query -&gt; recursoViewModel.searchRecursosByName(query) },&#10;            onCategorySelected = { categoryId -&gt; &#10;                if (categoryId == -1) {&#10;                    recursoViewModel.loadRecursos()&#10;                } else {&#10;                    recursoViewModel.loadRecursosByCategory(categoryId)&#10;                }&#10;            }&#10;        )&#10;        Spacer(modifier = Modifier.height(10.dp))&#10;&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 8.dp),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;            text = &quot;Recursos&quot;,&#10;            style = MaterialTheme.typography.titleLarge,&#10;        )&#10;            Icon(&#10;                imageVector = Icons.Default.BorderAll,&#10;                contentDescription = &quot;Icono de filtro&quot;,&#10;                modifier = Modifier&#10;                    .padding(end = 8.dp)&#10;                    .size(30.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;        }&#10;        RecursoGrid(recursos, categories)&#10;&#10;    }&#10;}&#10;&#10;@Composable&#10;fun Buscador(&#10;    categories: List&lt;esan.mendoza.impulso.data.local.entities.Category&gt; = emptyList(),&#10;    onSearch: (String) -&gt; Unit = {},&#10;    onCategorySelected: (Int) -&gt; Unit = {}&#10;) {&#10;    var expanded by remember { mutableStateOf(false) }&#10;    var selectedOption by remember { mutableStateOf(&quot;Todas las categorias&quot;) }&#10;    var selectedCategoryId by remember { mutableStateOf(-1) }&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    val options = listOf(&quot;Todas las categorias&quot;) + categories.map { it.nombre }&#10;&#10;    // Campo de búsqueda con ícono integrado&#10;    OutlinedTextField(&#10;        value = searchQuery,&#10;        onValueChange = {&#10;            searchQuery = it&#10;            onSearch(it)&#10;        },&#10;        modifier = Modifier.fillMaxWidth(),&#10;        label = { Text(&quot;Buscar&quot;) },&#10;        leadingIcon = {&#10;            Icon(&#10;                imageVector = Icons.Default.Search,&#10;                contentDescription = &quot;Ícono de búsqueda&quot;,&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;        },&#10;        singleLine = true,&#10;        shape = RoundedCornerShape(25.dp),&#10;        colors = OutlinedTextFieldDefaults.colors(&#10;            focusedBorderColor = MaterialTheme.colorScheme.primary,&#10;            unfocusedBorderColor = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f),&#10;            cursorColor = MaterialTheme.colorScheme.primary&#10;        )&#10;    )&#10;    LazyRow(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(top = 8.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        items(options.size) { index -&gt;&#10;            val option = options[index]&#10;            val isSelected = selectedOption == option&#10;            Button(&#10;                onClick = {&#10;                    selectedOption = option&#10;                    if (index == 0) {&#10;                        selectedCategoryId = -1&#10;                        onCategorySelected(-1)&#10;                    } else {&#10;                        selectedCategoryId = categories[index - 1].id&#10;                        onCategorySelected(categories[index - 1].id)&#10;                    }&#10;                },&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = if (isSelected) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary,&#10;                    contentColor = MaterialTheme.colorScheme.onPrimary&#10;                ),&#10;                shape = RoundedCornerShape(20.dp)&#10;            ) {&#10;                Text(&#10;                    text = option,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RecursoGrid(recursos: List&lt;Recurso&gt;, categories: List&lt;esan.mendoza.impulso.data.local.entities.Category&gt;) {&#10;    LazyVerticalGrid(&#10;        columns = GridCells.Fixed(2),&#10;        modifier = Modifier.fillMaxWidth(),&#10;        verticalArrangement = Arrangement.spacedBy(3.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(3.dp)&#10;    ) {&#10;        items(recursos) { recurso -&gt;&#10;            RecursoCard(recurso, categories)&#10;        }&#10;    }&#10;}&#10;&#10;fun formatFecha(fecha: String): String {&#10;    // Suponiendo que recurso.createdAt es tipo &quot;yyyy-MM-dd&quot; o similar&#10;    return try {&#10;        val parser = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;        val date = parser.parse(fecha)&#10;        val formatter = SimpleDateFormat(&quot;yyyy/MM/dd&quot;, Locale.getDefault())&#10;        formatter.format(date!!)&#10;    } catch (e: Exception) {&#10;        fecha // Si falla, muestra la fecha original&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RecursoCard(&#10;    recurso: Recurso,&#10;    categories: List&lt;esan.mendoza.impulso.data.local.entities.Category&gt;&#10;) {&#10;    val categoriaNombre = categories.find { it.id == recurso.categoriaId }?.nombre ?: &quot;Sin categoría&quot;&#10;    Card(&#10;        modifier = Modifier&#10;            .padding(4.dp)&#10;            .fillMaxWidth()&#10;            .height(120.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(8.dp  )&#10;        ) {&#10;&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth(),&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .background(&#10;                            color = MaterialTheme.colorScheme.primary.copy(alpha = 0.1f),&#10;                            shape = RoundedCornerShape(8.dp)&#10;                        )&#10;                        .border(&#10;                            width = 1.dp,&#10;                            color = MaterialTheme.colorScheme.primary,&#10;                            shape = RoundedCornerShape(8.dp)&#10;                        ),&#10;                ) {&#10;                    Text(&#10;                        text = categoriaNombre,&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis,&#10;                        modifier = Modifier&#10;                            .padding(horizontal = 2.dp, vertical = 1.dp)&#10;&#10;                    )&#10;                }&#10;                Row {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Favorite,&#10;                        contentDescription = &quot;Icono de recurso&quot;,&#10;                        modifier = Modifier.size(20.dp),&#10;                        tint = MaterialTheme.colorScheme.primary&#10;                    )&#10;                    Spacer(modifier = Modifier.width(2.dp))&#10;                    Icon(&#10;                        imageVector = Icons.Default.Share,&#10;                        contentDescription = &quot;Icono de recurso&quot;,&#10;                        modifier = Modifier.size(20.dp),&#10;                        tint = MaterialTheme.colorScheme.primary&#10;                    )&#10;&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp)&#10;            )&#10;            Text(&#10;                text = recurso.nombre,&#10;                style = MaterialTheme.typography.titleSmall,&#10;                maxLines = 2,&#10;                overflow = TextOverflow.Ellipsis,&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;&#10;            HorizontalDivider(&#10;                modifier = Modifier.padding(vertical = 2.dp),&#10;            )&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;                )&#10;                {&#10;                    Icon(&#10;                        imageVector = Icons.Default.DateRange,&#10;                        contentDescription = &quot;Icono de recurso&quot;,&#10;                        modifier = Modifier.size(10.dp),&#10;                        tint = MaterialTheme.colorScheme.primary&#10;                    )&#10;                    Text(&#10;                        text = formatFecha(recurso.createdAt),&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        maxLines = 2,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;                Icon(&#10;                    imageVector = Icons.Default.Link,&#10;                    contentDescription = &quot;Icono de recurso&quot;,&#10;                    modifier = Modifier.size(20.dp),&#10;                    tint = MaterialTheme.colorScheme.primary&#10;                )&#10;&#10;            }&#10;        }&#10;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package esan.mendoza.impulso.presentation.principalScreen&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.AcUnit&#10;import androidx.compose.material.icons.filled.ArrowDropDown&#10;import androidx.compose.material.icons.filled.BorderAll&#10;import androidx.compose.material.icons.filled.Casino&#10;import androidx.compose.material.icons.filled.DashboardCustomize&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.FilterList&#10;import androidx.compose.material.icons.filled.Link&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material.icons.filled.Share&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.Divider&#10;import androidx.compose.material3.DividerDefaults&#10;import androidx.compose.material3.DropdownMenu&#10;import androidx.compose.material3.DropdownMenuItem&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.OutlinedTextFieldDefaults&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextField&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.presentation.viewmodel.CategoryViewModel&#10;import esan.mendoza.impulso.presentation.viewmodel.RecursoViewModel&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;@Composable&#10;fun PrincipalScreen(&#10;    categoryViewModel: CategoryViewModel,&#10;    recursoViewModel: RecursoViewModel&#10;) {&#10;    val categories by categoryViewModel.categories.collectAsState()&#10;    val recursos by recursoViewModel.recursos.collectAsState()&#10;    val isLoading by categoryViewModel.isLoading.collectAsState()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;    ) {&#10;        Row {&#10;            Icon(&#10;                imageVector = Icons.Filled.DashboardCustomize,&#10;                contentDescription = &quot;Icono de flecha hacia abajo&quot;,&#10;                modifier = Modifier&#10;                    .padding(end = 8.dp)&#10;                    .align(Alignment.CenterVertically).size(55.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Column {&#10;                Text(&#10;                    &quot;IMPULSO&quot;,&#10;                    style = MaterialTheme.typography.headlineLarge,&#10;                )&#10;                Text(&#10;                    &quot;Organiza tu universo&quot;,&#10;                    style = MaterialTheme.typography.titleSmall,&#10;                    modifier = Modifier.padding(bottom = 5.dp)&#10;                )&#10;            }&#10;&#10;        }&#10;        Spacer(modifier = Modifier.height(10.dp))&#10;        Buscador(&#10;            categories = categories,&#10;            onSearch = { query -&gt; recursoViewModel.searchRecursosByName(query) },&#10;            onCategorySelected = { categoryId -&gt; &#10;                if (categoryId == -1) {&#10;                    recursoViewModel.loadRecursos()&#10;                } else {&#10;                    recursoViewModel.loadRecursosByCategory(categoryId)&#10;                }&#10;            }&#10;        )&#10;        Spacer(modifier = Modifier.height(10.dp))&#10;&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 8.dp),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;            text = &quot;Recursos&quot;,&#10;            style = MaterialTheme.typography.titleLarge,&#10;        )&#10;            Icon(&#10;                imageVector = Icons.Default.BorderAll,&#10;                contentDescription = &quot;Icono de filtro&quot;,&#10;                modifier = Modifier&#10;                    .padding(end = 8.dp)&#10;                    .size(30.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;        }&#10;        RecursoGrid(recursos, categories)&#10;&#10;    }&#10;}&#10;&#10;@Composable&#10;fun Buscador(&#10;    categories: List&lt;esan.mendoza.impulso.data.local.entities.Category&gt; = emptyList(),&#10;    onSearch: (String) -&gt; Unit = {},&#10;    onCategorySelected: (Int) -&gt; Unit = {}&#10;) {&#10;    var expanded by remember { mutableStateOf(false) }&#10;    var selectedOption by remember { mutableStateOf(&quot;Todas las categorias&quot;) }&#10;    var selectedCategoryId by remember { mutableStateOf(-1) }&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    val options = listOf(&quot;Todas las categorias&quot;) + categories.map { it.nombre }&#10;&#10;    // Campo de búsqueda con ícono integrado&#10;    OutlinedTextField(&#10;        value = searchQuery,&#10;        onValueChange = {&#10;            searchQuery = it&#10;            onSearch(it)&#10;        },&#10;        modifier = Modifier.fillMaxWidth(),&#10;        label = { Text(&quot;Buscar&quot;) },&#10;        leadingIcon = {&#10;            Icon(&#10;                imageVector = Icons.Default.Search,&#10;                contentDescription = &quot;Ícono de búsqueda&quot;,&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;        },&#10;        singleLine = true,&#10;        shape = RoundedCornerShape(25.dp),&#10;        colors = OutlinedTextFieldDefaults.colors(&#10;            focusedBorderColor = MaterialTheme.colorScheme.primary,&#10;            unfocusedBorderColor = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f),&#10;            cursorColor = MaterialTheme.colorScheme.primary&#10;        )&#10;    )&#10;    LazyRow(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(top = 8.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        items(options.size) { index -&gt;&#10;            val option = options[index]&#10;            val isSelected = selectedOption == option&#10;            Button(&#10;                onClick = {&#10;                    selectedOption = option&#10;                    if (index == 0) {&#10;                        selectedCategoryId = -1&#10;                        onCategorySelected(-1)&#10;                    } else {&#10;                        selectedCategoryId = categories[index - 1].id&#10;                        onCategorySelected(categories[index - 1].id)&#10;                    }&#10;                },&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = if (isSelected) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary,&#10;                    contentColor = MaterialTheme.colorScheme.onPrimary&#10;                ),&#10;                shape = RoundedCornerShape(20.dp)&#10;            ) {&#10;                Text(&#10;                    text = option,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RecursoGrid(recursos: List&lt;Recurso&gt;, categories: List&lt;esan.mendoza.impulso.data.local.entities.Category&gt;) {&#10;    LazyVerticalGrid(&#10;        columns = GridCells.Fixed(2),&#10;        modifier = Modifier.fillMaxWidth(),&#10;        verticalArrangement = Arrangement.spacedBy(3.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(3.dp)&#10;    ) {&#10;        items(recursos) { recurso -&gt;&#10;            RecursoCard(recurso, categories)&#10;        }&#10;    }&#10;}&#10;&#10;fun formatFecha(fecha: String): String {&#10;    // Suponiendo que recurso.createdAt es tipo &quot;yyyy-MM-dd&quot; o similar&#10;    return try {&#10;        val parser = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;        val date = parser.parse(fecha)&#10;        val formatter = SimpleDateFormat(&quot;yyyy/MM/dd&quot;, Locale.getDefault())&#10;        formatter.format(date!!)&#10;    } catch (e: Exception) {&#10;        fecha // Si falla, muestra la fecha original&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RecursoCard(&#10;    recurso: Recurso,&#10;    categories: List&lt;esan.mendoza.impulso.data.local.entities.Category&gt;&#10;) {&#10;    val categoriaNombre = categories.find { it.id == recurso.categoriaId }?.nombre ?: &quot;Sin categoría&quot;&#10;    Column {&#10;        Card(&#10;            modifier = Modifier&#10;                .padding(4.dp)&#10;                .fillMaxWidth()&#10;                .height(120.dp),&#10;            shape = RoundedCornerShape(16.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(8.dp)&#10;            ) {&#10;&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth(),&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.SpaceBetween&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .background(&#10;                                color = MaterialTheme.colorScheme.primary.copy(alpha = 0.1f),&#10;                                shape = RoundedCornerShape(8.dp)&#10;                            )&#10;                            .border(&#10;                                width = 1.dp,&#10;                                color = MaterialTheme.colorScheme.primary,&#10;                                shape = RoundedCornerShape(8.dp)&#10;                            ),&#10;                    ) {&#10;                        Text(&#10;                            text = categoriaNombre,&#10;                            style = MaterialTheme.typography.labelSmall,&#10;                            color = MaterialTheme.colorScheme.primary,&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis,&#10;                            modifier = Modifier&#10;                                .padding(horizontal = 2.dp, vertical = 1.dp)&#10;&#10;                        )&#10;                    }&#10;                    Row {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Favorite,&#10;                            contentDescription = &quot;Icono de recurso&quot;,&#10;                            modifier = Modifier.size(20.dp),&#10;                            tint = MaterialTheme.colorScheme.primary&#10;                        )&#10;                        Spacer(modifier = Modifier.width(2.dp))&#10;                        Icon(&#10;                            imageVector = Icons.Default.Share,&#10;                            contentDescription = &quot;Icono de recurso&quot;,&#10;                            modifier = Modifier.size(20.dp),&#10;                            tint = MaterialTheme.colorScheme.primary&#10;                        )&#10;&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = recurso.nombre,&#10;                    style = MaterialTheme.typography.titleSmall,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                HorizontalDivider(&#10;                    modifier = Modifier.padding(vertical = 2.dp),&#10;                )&#10;            }&#10;        }&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 8.dp, vertical = 2.dp),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.DateRange,&#10;                    contentDescription = &quot;Icono de recurso&quot;,&#10;                    modifier = Modifier.size(10.dp),&#10;                    tint = MaterialTheme.colorScheme.primary&#10;                )&#10;                Text(&#10;                    text = formatFecha(recurso.createdAt),&#10;                    style = MaterialTheme.typography.labelSmall,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;            }&#10;            Icon(&#10;                imageVector = Icons.Default.Link,&#10;                contentDescription = &quot;Icono de recurso&quot;,&#10;                modifier = Modifier.size(20.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>