<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/data/local/repositories/RecursoRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/data/local/repositories/RecursoRepository.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.data.local.repositories&#10;&#10;import esan.mendoza.impulso.data.local.dao.CategoryDao&#10;import esan.mendoza.impulso.data.local.dao.RecursoDao&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.data.local.entities.RecursoWithCategory&#10;&#10;class RecursoRepository(&#10;    private val recursoDao: RecursoDao,&#10;    private val categoryDao: CategoryDao&#10;) {&#10;&#10;    // Obtener todos los recursos&#10;    suspend fun getAllRecursos(): List&lt;Recurso&gt; {&#10;        return recursoDao.getAllRecursos()&#10;    }&#10;&#10;    // Obtener recurso por ID&#10;    suspend fun getRecursoById(id: Int): Recurso? {&#10;        return recursoDao.getRecursoById(id)&#10;    }&#10;&#10;    // Obtener recursos por categoría&#10;    suspend fun getRecursosByCategory(categoryId: Int): List&lt;Recurso&gt; {&#10;        return recursoDao.getRecursosByCategory(categoryId)&#10;    }&#10;&#10;    // Obtener recursos con información de categoría&#10;    suspend fun getRecursosWithCategory(): List&lt;RecursoWithCategory&gt; {&#10;        return recursoDao.getRecursosWithCategory()&#10;    }&#10;&#10;    // Obtener recursos con categoría por ID de categoría&#10;    suspend fun getRecursosWithCategoryById(categoryId: Int): List&lt;RecursoWithCategory&gt; {&#10;        return recursoDao.getRecursosWithCategoryById(categoryId)&#10;    }&#10;&#10;    // Insertar nuevo recurso (con validación de categoría)&#10;    suspend fun insertRecurso(recurso: Recurso): Result&lt;Unit&gt; {&#10;        return try {&#10;            // Verificar que la categoría existe&#10;            val categoryExists = categoryDao.getCategoryById(recurso.categoriaId) != null&#10;            if (!categoryExists) {&#10;                Result.failure(IllegalArgumentException(&quot;La categoría con ID ${recurso.categoriaId} no existe&quot;))&#10;            } else {&#10;                recursoDao.insertRecurso(recurso)&#10;                Result.success(Unit)&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    // Actualizar recurso&#10;    suspend fun updateRecurso(recurso: Recurso): Result&lt;Unit&gt; {&#10;        return try {&#10;            // Verificar que la categoría existe&#10;            val categoryExists = categoryDao.getCategoryById(recurso.categoriaId) != null&#10;            if (!categoryExists) {&#10;                Result.failure(IllegalArgumentException(&quot;La categoría con ID ${recurso.categoriaId} no existe&quot;))&#10;            } else {&#10;                recursoDao.updateRecurso(recurso)&#10;                Result.success(Unit)&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    // Eliminar recurso&#10;    suspend fun deleteRecurso(recurso: Recurso) {&#10;        recursoDao.deleteRecurso(recurso)&#10;    }&#10;&#10;    // Eliminar recurso por ID&#10;    suspend fun deleteRecursoById(id: Int) {&#10;        val recurso = getRecursoById(id)&#10;        recurso?.let { deleteRecurso(it) }&#10;    }&#10;&#10;    // Eliminar todos los recursos de una categoría&#10;    suspend fun deleteRecursosByCategory(categoryId: Int) {&#10;        val recursos = getRecursosByCategory(categoryId)&#10;        recursos.forEach { deleteRecurso(it) }&#10;    }&#10;&#10;    // Verificar si existe un recurso&#10;    suspend fun recursoExists(id: Int): Boolean {&#10;        return getRecursoById(id) != null&#10;    }&#10;&#10;    // Contar recursos por categoría&#10;    suspend fun countRecursosByCategory(categoryId: Int): Int {&#10;        return getRecursosByCategory(categoryId).size&#10;    }&#10;&#10;    // Buscar recursos por nombre&#10;    suspend fun searchRecursosByName(query: String): List&lt;Recurso&gt; {&#10;        return getAllRecursos().filter {&#10;            it.nombre.contains(query, ignoreCase = true)&#10;        }&#10;    }&#10;&#10;    // Buscar recursos por descripción&#10;    suspend fun searchRecursosByDescription(query: String): List&lt;Recurso&gt; {&#10;        return getAllRecursos().filter {&#10;            it.descripcion.contains(query, ignoreCase = true)&#10;        }&#10;    }&#10;&#10;    // Buscar recursos por nombre o descripción&#10;    suspend fun searchRecursos(query: String): List&lt;RecursoWithCategory&gt; {&#10;        return getRecursosWithCategory().filter {&#10;            it.recurso.nombre.contains(query, ignoreCase = true) ||&#10;                    it.recurso.descripcion.contains(query, ignoreCase = true)&#10;        }&#10;    }&#10;&#10;    // Obtener recursos favoritos&#10;    suspend fun getFavoriteRecursos(): List&lt;Recurso&gt; {&#10;        return getAllRecursos().filter { it.isFavorite }&#10;    }&#10;&#10;    // Obtener recursos favoritos con categoría&#10;    suspend fun getFavoriteRecursosWithCategory(): List&lt;RecursoWithCategory&gt; {&#10;        return getRecursosWithCategory().filter { it.recurso.isFavorite }&#10;    }&#10;&#10;    // Alternar estado de favorito&#10;    suspend fun toggleFavorite(recursoId: Int): Result&lt;Unit&gt; {&#10;        return try {&#10;            val recurso = getRecursoById(recursoId)&#10;            if (recurso != null) {&#10;                val updatedRecurso = recurso.copy(isFavorite = !recurso.isFavorite)&#10;                updateRecurso(updatedRecurso)&#10;            } else {&#10;                Result.failure(IllegalArgumentException(&quot;Recurso no encontrado&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package esan.mendoza.impulso.data.local.repositories&#10;&#10;import esan.mendoza.impulso.data.local.dao.CategoryDao&#10;import esan.mendoza.impulso.data.local.dao.RecursoDao&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.data.local.entities.RecursoWithCategory&#10;&#10;class RecursoRepository(&#10;    private val recursoDao: RecursoDao,&#10;    private val categoryDao: CategoryDao&#10;) {&#10;&#10;    // Obtener todos los recursos&#10;    suspend fun getAllRecursos(): List&lt;Recurso&gt; {&#10;        return recursoDao.getAllRecursos()&#10;    }&#10;&#10;    // Obtener recurso por ID&#10;    suspend fun getRecursoById(id: Int): Recurso? {&#10;        return recursoDao.getRecursoById(id)&#10;    }&#10;&#10;    // Obtener recursos por categoría&#10;    suspend fun getRecursosByCategory(categoryId: Int): List&lt;Recurso&gt; {&#10;        return recursoDao.getRecursosByCategory(categoryId)&#10;    }&#10;&#10;    // Obtener recursos con información de categoría&#10;    suspend fun getRecursosWithCategory(): List&lt;RecursoWithCategory&gt; {&#10;        return recursoDao.getRecursosWithCategory()&#10;    }&#10;&#10;    // Obtener recursos con categoría por ID de categoría&#10;    suspend fun getRecursosWithCategoryById(categoryId: Int): List&lt;RecursoWithCategory&gt; {&#10;        return recursoDao.getRecursosWithCategoryById(categoryId)&#10;    }&#10;&#10;    // Insertar nuevo recurso (con validación de categoría)&#10;    suspend fun insertRecurso(recurso: Recurso): Result&lt;Unit&gt; {&#10;        return try {&#10;            // Verificar que la categoría existe&#10;            val categoryExists = categoryDao.getCategoryById(recurso.categoriaId) != null&#10;            if (!categoryExists) {&#10;                Result.failure(IllegalArgumentException(&quot;La categoría con ID ${recurso.categoriaId} no existe&quot;))&#10;            } else {&#10;                // Insertar el nuevo recurso&#10;                recursoDao.insertRecurso(recurso)&#10;                &#10;                // Eliminar el recurso de ejemplo si existe (ID = -1) y el nuevo recurso es real (ID &gt; 0)&#10;                if (recurso.id &gt; 0) {&#10;                    val exampleRecurso = getRecursoById(-1)&#10;                    exampleRecurso?.let {&#10;                        deleteRecurso(it)&#10;                    }&#10;                }&#10;                &#10;                Result.success(Unit)&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    // Actualizar recurso&#10;    suspend fun updateRecurso(recurso: Recurso): Result&lt;Unit&gt; {&#10;        return try {&#10;            // Verificar que la categoría existe&#10;            val categoryExists = categoryDao.getCategoryById(recurso.categoriaId) != null&#10;            if (!categoryExists) {&#10;                Result.failure(IllegalArgumentException(&quot;La categoría con ID ${recurso.categoriaId} no existe&quot;))&#10;            } else {&#10;                recursoDao.updateRecurso(recurso)&#10;                Result.success(Unit)&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    // Eliminar recurso&#10;    suspend fun deleteRecurso(recurso: Recurso) {&#10;        recursoDao.deleteRecurso(recurso)&#10;    }&#10;&#10;    // Eliminar recurso por ID&#10;    suspend fun deleteRecursoById(id: Int) {&#10;        val recurso = getRecursoById(id)&#10;        recurso?.let { deleteRecurso(it) }&#10;    }&#10;&#10;    // Eliminar todos los recursos de una categoría&#10;    suspend fun deleteRecursosByCategory(categoryId: Int) {&#10;        val recursos = getRecursosByCategory(categoryId)&#10;        recursos.forEach { deleteRecurso(it) }&#10;    }&#10;&#10;    // Verificar si existe un recurso&#10;    suspend fun recursoExists(id: Int): Boolean {&#10;        return getRecursoById(id) != null&#10;    }&#10;&#10;    // Contar recursos por categoría&#10;    suspend fun countRecursosByCategory(categoryId: Int): Int {&#10;        return getRecursosByCategory(categoryId).size&#10;    }&#10;&#10;    // Buscar recursos por nombre&#10;    suspend fun searchRecursosByName(query: String): List&lt;Recurso&gt; {&#10;        return getAllRecursos().filter {&#10;            it.nombre.contains(query, ignoreCase = true)&#10;        }&#10;    }&#10;&#10;    // Buscar recursos por descripción&#10;    suspend fun searchRecursosByDescription(query: String): List&lt;Recurso&gt; {&#10;        return getAllRecursos().filter {&#10;            it.descripcion.contains(query, ignoreCase = true)&#10;        }&#10;    }&#10;&#10;    // Buscar recursos por nombre o descripción&#10;    suspend fun searchRecursos(query: String): List&lt;RecursoWithCategory&gt; {&#10;        return getRecursosWithCategory().filter {&#10;            it.recurso.nombre.contains(query, ignoreCase = true) ||&#10;                    it.recurso.descripcion.contains(query, ignoreCase = true)&#10;        }&#10;    }&#10;&#10;    // Obtener recursos favoritos&#10;    suspend fun getFavoriteRecursos(): List&lt;Recurso&gt; {&#10;        return getAllRecursos().filter { it.isFavorite }&#10;    }&#10;&#10;    // Obtener recursos favoritos con categoría&#10;    suspend fun getFavoriteRecursosWithCategory(): List&lt;RecursoWithCategory&gt; {&#10;        return getRecursosWithCategory().filter { it.recurso.isFavorite }&#10;    }&#10;&#10;    // Alternar estado de favorito&#10;    suspend fun toggleFavorite(recursoId: Int): Result&lt;Unit&gt; {&#10;        return try {&#10;            val recurso = getRecursoById(recursoId)&#10;            if (recurso != null) {&#10;                val updatedRecurso = recurso.copy(isFavorite = !recurso.isFavorite)&#10;                updateRecurso(updatedRecurso)&#10;            } else {&#10;                Result.failure(IllegalArgumentException(&quot;Recurso no encontrado&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    // Verificar si hay recursos reales (excluyendo el ejemplo con ID -1)&#10;    suspend fun hasRealRecursos(): Boolean {&#10;        return getAllRecursos().any { it.id &gt; 0 }&#10;    }&#10;&#10;    // Obtener todos los recursos incluyendo el ejemplo si no hay recursos reales&#10;    suspend fun getAllRecursosWithExample(): List&lt;Recurso&gt; {&#10;        val realRecursos = getAllRecursos().filter { it.id &gt; 0 }&#10;        return if (realRecursos.isEmpty()) {&#10;            // Si no hay recursos reales, incluir el recurso de ejemplo&#10;            val exampleExists = getAllRecursos().any { it.id == -1 }&#10;            if (exampleExists) {&#10;                getAllRecursos()&#10;            } else {&#10;                // Si no existe el ejemplo en la BD, agregarlo temporalmente a la lista&#10;                getAllRecursos() + esan.mendoza.impulso.data.sample.ExampleData.exampleRecurso&#10;            }&#10;        } else {&#10;            realRecursos&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/data/sample/ExampleData.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/data/sample/ExampleData.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.data.sample&#10;&#10;import esan.mendoza.impulso.data.local.entities.Category&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;&#10;object ExampleData {&#10;&#10;    // Categoría de ejemplo&#10;&#10;&#10;    // Recurso de ejemplo&#10;    val exampleRecurso = Recurso(&#10;        id = -1, // ID negativo para distinguirlo de datos reales&#10;        nombre = &quot;¡Bienvenido a Impulso!&quot;,&#10;        descripcion = &quot;Este es un recurso de ejemplo para ayudarte a comenzar. Puedes crear tus propios recursos usando el botón + flotante. Una vez que agregues tu primer recurso, este ejemplo desaparecerá automáticamente.&quot;,&#10;        categoriaId = -1,&#10;        link = &quot;https://ejemplo.com&quot;,&#10;        createdAt = &quot;2024-01-01&quot;,&#10;        updatedAt = &quot;2024-01-01&quot;,&#10;        isFavorite = false&#10;    )&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package esan.mendoza.impulso.data.sample&#10;&#10;import esan.mendoza.impulso.data.local.entities.Category&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;&#10;object ExampleData {&#10;&#10;    // Categoría de ejemplo&#10;    val exampleCategory = Category(&#10;        id = -1, // ID negativo para distinguirlo de datos reales&#10;        nombre = &quot;Ejemplo&quot;,&#10;        descripcion = &quot;Categoría de ejemplo&quot;,&#10;        icono = &quot;Category&quot;,&#10;        createdAt = &quot;2024-01-01&quot;,&#10;        updatedAt = &quot;2024-01-01&quot;&#10;    )&#10;&#10;    // Recurso de ejemplo&#10;    val exampleRecurso = Recurso(&#10;        id = -1, // ID negativo para distinguirlo de datos reales&#10;        nombre = &quot;¡Bienvenido a Impulso!&quot;,&#10;        descripcion = &quot;Este es un recurso de ejemplo para ayudarte a comenzar. Puedes crear tus propios recursos usando el botón + flotante. Una vez que agregues tu primer recurso, este ejemplo desaparecerá automáticamente.&quot;,&#10;        categoriaId = -1,&#10;        link = &quot;https://ejemplo.com&quot;,&#10;        createdAt = &quot;2024-01-01&quot;,&#10;        updatedAt = &quot;2024-01-01&quot;,&#10;        isFavorite = false&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/viewmodel/RecursoViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/viewmodel/RecursoViewModel.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.presentation.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.data.local.entities.RecursoWithCategory&#10;import esan.mendoza.impulso.data.local.repositories.RecursoRepository&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class RecursoViewModel @Inject constructor(&#10;    private val recursoRepository: RecursoRepository&#10;) : ViewModel() {&#10;&#10;    private val _recursos = MutableStateFlow&lt;List&lt;Recurso&gt;&gt;(emptyList())&#10;    val recursos: StateFlow&lt;List&lt;Recurso&gt;&gt; = _recursos.asStateFlow()&#10;&#10;    private val _recursosWithCategory = MutableStateFlow&lt;List&lt;RecursoWithCategory&gt;&gt;(emptyList())&#10;    val recursosWithCategory: StateFlow&lt;List&lt;RecursoWithCategory&gt;&gt; = _recursosWithCategory.asStateFlow()&#10;&#10;    private val _isLoading = MutableStateFlow(false)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading.asStateFlow()&#10;&#10;    private val _error = MutableStateFlow&lt;String?&gt;(null)&#10;    val error: StateFlow&lt;String?&gt; = _error.asStateFlow()&#10;&#10;    init {&#10;        loadRecursos()&#10;        loadRecursosWithCategory()&#10;    }&#10;&#10;    fun loadRecursos() {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val recursoList = recursoRepository.getAllRecursos()&#10;                _recursos.value = recursoList&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;                _recursos.value = emptyList()&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun loadRecursosWithCategory() {&#10;        viewModelScope.launch {&#10;            try {&#10;                val recursosWithCategory = recursoRepository.getRecursosWithCategory()&#10;                _recursosWithCategory.value = recursosWithCategory&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;                _recursosWithCategory.value = emptyList()&#10;            }&#10;        }&#10;    }&#10;&#10;    fun addRecurso(recurso: Recurso) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val result = recursoRepository.insertRecurso(recurso)&#10;                if (result.isSuccess) {&#10;                    loadRecursos() // Recargar la lista después de agregar&#10;                    loadRecursosWithCategory() // Recargar recursos con categoría&#10;                    _error.value = null&#10;                } else {&#10;                    _error.value = &quot;Error al crear recurso: ${result.exceptionOrNull()?.message}&quot;&#10;                }&#10;            } catch (e: Exception) {&#10;                _error.value = &quot;Error al crear recurso: ${e.message}&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateRecurso(recurso: Recurso) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val result = recursoRepository.updateRecurso(recurso)&#10;                if (result.isSuccess) {&#10;                    loadRecursos() // Recargar la lista después de actualizar&#10;                    loadRecursosWithCategory() // Recargar recursos con categoría&#10;                    _error.value = null&#10;                } else {&#10;                    _error.value = &quot;Error al actualizar recurso: ${result.exceptionOrNull()?.message}&quot;&#10;                }&#10;            } catch (e: Exception) {&#10;                _error.value = &quot;Error al actualizar recurso: ${e.message}&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteRecurso(recurso: Recurso) {&#10;        viewModelScope.launch {&#10;            try {&#10;                recursoRepository.deleteRecurso(recurso)&#10;                loadRecursos() // Recargar la lista después de eliminar&#10;                loadRecursosWithCategory() // Recargar recursos con categoría&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = &quot;Error al eliminar recurso: ${e.message}&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    fun getRecursosByCategory(categoryId: Int) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val recursos = recursoRepository.getRecursosByCategory(categoryId)&#10;                _recursos.value = recursos&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = &quot;Error al cargar recursos por categoría: ${e.message}&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    fun loadRecursosByCategory(categoryId: Int) {&#10;        getRecursosByCategory(categoryId)&#10;    }&#10;&#10;    fun searchRecursosByName(query: String) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val allRecursos = recursoRepository.getAllRecursos()&#10;                val filteredRecursos = allRecursos.filter {&#10;                    it.nombre.contains(query, ignoreCase = true) ||&#10;                    it.descripcion.contains(query, ignoreCase = true)&#10;                }&#10;                _recursos.value = filteredRecursos&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = &quot;Error al buscar recursos: ${e.message}&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    fun toggleFavorite(recurso: Recurso) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val updatedRecurso = recurso.copy(isFavorite = !recurso.isFavorite)&#10;                val result = recursoRepository.updateRecurso(updatedRecurso)&#10;                if (result.isSuccess) {&#10;                    loadRecursos()&#10;                    loadRecursosWithCategory()&#10;                    _error.value = null&#10;                } else {&#10;                    _error.value = &quot;Error al actualizar favorito: ${result.exceptionOrNull()?.message}&quot;&#10;                }&#10;            } catch (e: Exception) {&#10;                _error.value = &quot;Error al actualizar favorito: ${e.message}&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteRecursoById(id: Int) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val recurso = recursoRepository.getRecursoById(id)&#10;                recurso?.let {&#10;                    recursoRepository.deleteRecurso(it)&#10;                    loadRecursos()&#10;                    loadRecursosWithCategory()&#10;                }&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = &quot;Error al eliminar recurso: ${e.message}&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    fun loadFavoriteRecursos() {&#10;        viewModelScope.launch {&#10;            try {&#10;                val allRecursos = recursoRepository.getAllRecursos()&#10;                val favoriteRecursos = allRecursos.filter { it.isFavorite }&#10;                _recursos.value = favoriteRecursos&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = &quot;Error al cargar favoritos: ${e.message}&quot;&#10;                _recursos.value = emptyList()&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearError() {&#10;        _error.value = null&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package esan.mendoza.impulso.presentation.viewmodel&#13;&#10;&#13;&#10;import androidx.lifecycle.ViewModel&#13;&#10;import androidx.lifecycle.viewModelScope&#13;&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#13;&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#13;&#10;import esan.mendoza.impulso.data.local.entities.RecursoWithCategory&#13;&#10;import esan.mendoza.impulso.data.local.repositories.RecursoRepository&#13;&#10;import kotlinx.coroutines.flow.MutableStateFlow&#13;&#10;import kotlinx.coroutines.flow.StateFlow&#13;&#10;import kotlinx.coroutines.flow.asStateFlow&#13;&#10;import kotlinx.coroutines.launch&#13;&#10;import javax.inject.Inject&#13;&#10;&#13;&#10;@HiltViewModel&#13;&#10;class RecursoViewModel @Inject constructor(&#13;&#10;    private val recursoRepository: RecursoRepository&#13;&#10;) : ViewModel() {&#13;&#10;&#13;&#10;    private val _recursos = MutableStateFlow&lt;List&lt;Recurso&gt;&gt;(emptyList())&#13;&#10;    val recursos: StateFlow&lt;List&lt;Recurso&gt;&gt; = _recursos.asStateFlow()&#13;&#10;&#13;&#10;    private val _recursosWithCategory = MutableStateFlow&lt;List&lt;RecursoWithCategory&gt;&gt;(emptyList())&#13;&#10;    val recursosWithCategory: StateFlow&lt;List&lt;RecursoWithCategory&gt;&gt; = _recursosWithCategory.asStateFlow()&#13;&#10;&#13;&#10;    private val _isLoading = MutableStateFlow(false)&#13;&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading.asStateFlow()&#13;&#10;&#13;&#10;    private val _error = MutableStateFlow&lt;String?&gt;(null)&#13;&#10;    val error: StateFlow&lt;String?&gt; = _error.asStateFlow()&#13;&#10;&#13;&#10;    init {&#13;&#10;        loadRecursos()&#13;&#10;        loadRecursosWithCategory()&#13;&#10;    }&#13;&#10;&#13;&#10;    fun loadRecursos() {&#13;&#10;        viewModelScope.launch {&#13;&#10;            _isLoading.value = true&#13;&#10;            try {&#13;&#10;                val recursoList = recursoRepository.getAllRecursosWithExample()&#13;&#10;                _recursos.value = recursoList&#13;&#10;                _error.value = null&#13;&#10;            } catch (e: Exception) {&#13;&#10;                _error.value = e.message&#13;&#10;                _recursos.value = emptyList()&#13;&#10;            } finally {&#13;&#10;                _isLoading.value = false&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun loadRecursosWithCategory() {&#13;&#10;        viewModelScope.launch {&#13;&#10;            try {&#13;&#10;                val recursosWithCategory = recursoRepository.getRecursosWithCategory()&#13;&#10;                _recursosWithCategory.value = recursosWithCategory&#13;&#10;            } catch (e: Exception) {&#13;&#10;                _error.value = e.message&#13;&#10;                _recursosWithCategory.value = emptyList()&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun addRecurso(recurso: Recurso) {&#13;&#10;        viewModelScope.launch {&#13;&#10;            try {&#13;&#10;                val result = recursoRepository.insertRecurso(recurso)&#13;&#10;                if (result.isSuccess) {&#13;&#10;                    loadRecursos() // Recargar la lista después de agregar&#13;&#10;                    loadRecursosWithCategory() // Recargar recursos con categoría&#13;&#10;                    _error.value = null&#13;&#10;                } else {&#13;&#10;                    _error.value = &quot;Error al crear recurso: ${result.exceptionOrNull()?.message}&quot;&#13;&#10;                }&#13;&#10;            } catch (e: Exception) {&#13;&#10;                _error.value = &quot;Error al crear recurso: ${e.message}&quot;&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun updateRecurso(recurso: Recurso) {&#13;&#10;        viewModelScope.launch {&#13;&#10;            try {&#13;&#10;                val result = recursoRepository.updateRecurso(recurso)&#13;&#10;                if (result.isSuccess) {&#13;&#10;                    loadRecursos() // Recargar la lista después de actualizar&#13;&#10;                    loadRecursosWithCategory() // Recargar recursos con categoría&#13;&#10;                    _error.value = null&#13;&#10;                } else {&#13;&#10;                    _error.value = &quot;Error al actualizar recurso: ${result.exceptionOrNull()?.message}&quot;&#13;&#10;                }&#13;&#10;            } catch (e: Exception) {&#13;&#10;                _error.value = &quot;Error al actualizar recurso: ${e.message}&quot;&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun deleteRecurso(recurso: Recurso) {&#13;&#10;        viewModelScope.launch {&#13;&#10;            try {&#13;&#10;                recursoRepository.deleteRecurso(recurso)&#13;&#10;                loadRecursos() // Recargar la lista después de eliminar&#13;&#10;                loadRecursosWithCategory() // Recargar recursos con categoría&#13;&#10;                _error.value = null&#13;&#10;            } catch (e: Exception) {&#13;&#10;                _error.value = &quot;Error al eliminar recurso: ${e.message}&quot;&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun getRecursosByCategory(categoryId: Int) {&#13;&#10;        viewModelScope.launch {&#13;&#10;            try {&#13;&#10;                val recursos = recursoRepository.getRecursosByCategory(categoryId)&#13;&#10;                _recursos.value = recursos&#13;&#10;                _error.value = null&#13;&#10;            } catch (e: Exception) {&#13;&#10;                _error.value = &quot;Error al cargar recursos por categoría: ${e.message}&quot;&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun loadRecursosByCategory(categoryId: Int) {&#13;&#10;        getRecursosByCategory(categoryId)&#13;&#10;    }&#13;&#10;&#13;&#10;    fun searchRecursosByName(query: String) {&#13;&#10;        viewModelScope.launch {&#13;&#10;            try {&#13;&#10;                val allRecursos = recursoRepository.getAllRecursos()&#13;&#10;                val filteredRecursos = allRecursos.filter {&#13;&#10;                    it.nombre.contains(query, ignoreCase = true) ||&#13;&#10;                    it.descripcion.contains(query, ignoreCase = true)&#13;&#10;                }&#13;&#10;                _recursos.value = filteredRecursos&#13;&#10;                _error.value = null&#13;&#10;            } catch (e: Exception) {&#13;&#10;                _error.value = &quot;Error al buscar recursos: ${e.message}&quot;&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun toggleFavorite(recurso: Recurso) {&#13;&#10;        viewModelScope.launch {&#13;&#10;            try {&#13;&#10;                val updatedRecurso = recurso.copy(isFavorite = !recurso.isFavorite)&#13;&#10;                val result = recursoRepository.updateRecurso(updatedRecurso)&#13;&#10;                if (result.isSuccess) {&#13;&#10;                    loadRecursos()&#13;&#10;                    loadRecursosWithCategory()&#13;&#10;                    _error.value = null&#13;&#10;                } else {&#13;&#10;                    _error.value = &quot;Error al actualizar favorito: ${result.exceptionOrNull()?.message}&quot;&#13;&#10;                }&#13;&#10;            } catch (e: Exception) {&#13;&#10;                _error.value = &quot;Error al actualizar favorito: ${e.message}&quot;&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun deleteRecursoById(id: Int) {&#13;&#10;        viewModelScope.launch {&#13;&#10;            try {&#13;&#10;                val recurso = recursoRepository.getRecursoById(id)&#13;&#10;                recurso?.let {&#13;&#10;                    recursoRepository.deleteRecurso(it)&#13;&#10;                    loadRecursos()&#13;&#10;                    loadRecursosWithCategory()&#13;&#10;                }&#13;&#10;                _error.value = null&#13;&#10;            } catch (e: Exception) {&#13;&#10;                _error.value = &quot;Error al eliminar recurso: ${e.message}&quot;&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun loadFavoriteRecursos() {&#13;&#10;        viewModelScope.launch {&#13;&#10;            try {&#13;&#10;                val allRecursos = recursoRepository.getAllRecursos()&#13;&#10;                val favoriteRecursos = allRecursos.filter { it.isFavorite }&#13;&#10;                _recursos.value = favoriteRecursos&#13;&#10;                _error.value = null&#13;&#10;            } catch (e: Exception) {&#13;&#10;                _error.value = &quot;Error al cargar favoritos: ${e.message}&quot;&#13;&#10;                _recursos.value = emptyList()&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun clearError() {&#13;&#10;        _error.value = null&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/font/urbanist_regular.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/font/urbanist_regular.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;font-family xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;font&#10;        android:fontStyle=&quot;normal&quot;&#10;        android:fontWeight=&quot;400&quot;&#10;        android:font=&quot;@font/urbanist_regular&quot; /&gt;&#10;&lt;/font-family&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>