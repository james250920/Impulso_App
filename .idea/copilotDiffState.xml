<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/data/local/entities/Categoria.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/data/local/entities/Categoria.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.data.local.entities&#10;&#10;import androidx.room.ColumnInfo&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(tableName = &quot;category&quot;)&#10;data class Category(&#10;    @PrimaryKey(autoGenerate = true)&#10;    val id: Int,&#10;&#10;    @ColumnInfo(name = &quot;Nombre&quot;)&#10;    val nombre: String,&#10;&#10;    @ColumnInfo(name = &quot;icono&quot;)&#10;    val icono: String&#10;)" />
              <option name="updatedContent" value="package esan.mendoza.impulso.data.local.entities&#13;&#10;&#13;&#10;import androidx.room.ColumnInfo&#13;&#10;import androidx.room.Entity&#13;&#10;import androidx.room.PrimaryKey&#13;&#10;&#13;&#10;@Entity(tableName = &quot;category&quot;)&#13;&#10;data class Category(&#13;&#10;    @PrimaryKey(autoGenerate = true)&#13;&#10;    val id: Int = 0, // Valor por defecto para permitir autoGenerate&#13;&#10;&#13;&#10;    @ColumnInfo(name = &quot;Nombre&quot;)&#13;&#10;    val nombre: String,&#13;&#10;&#13;&#10;    @ColumnInfo(name = &quot;icono&quot;)&#13;&#10;    val icono: String,&#13;&#10;&#13;&#10;    @ColumnInfo(name = &quot;created_at&quot;)&#13;&#10;    val createdAt: String,&#13;&#10;&#13;&#10;    @ColumnInfo(name = &quot;updated_at&quot;)&#13;&#10;    val updatedAt: String&#13;&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/data/local/entities/Recurso.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/data/local/entities/Recurso.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.data.local.entities&#10;&#10;import androidx.room.ColumnInfo&#10;import androidx.room.Entity&#10;import androidx.room.ForeignKey&#10;import androidx.room.Index&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(&#10;    tableName = &quot;recurso&quot;,&#10;    foreignKeys = [&#10;        ForeignKey(&#10;            entity = Category::class,&#10;            parentColumns = [&quot;id&quot;],&#10;            childColumns = [&quot;categoria_id&quot;],&#10;            onDelete = ForeignKey.CASCADE&#10;        )&#10;    ],&#10;    indices = [Index(value = [&quot;categoria_id&quot;])]&#10;)&#10;data class Recurso(&#10;    @PrimaryKey(autoGenerate = true)&#10;    val id: Int,&#10;&#10;    @ColumnInfo(name = &quot;Nombre&quot;)&#10;    val nombre: String,&#10;&#10;    @ColumnInfo(name = &quot;Descripcion&quot;)&#10;    val descripcion: String,&#10;&#10;    @ColumnInfo(name = &quot;categoria_id&quot;)&#10;    val categoriaId: Int,&#10;&#10;    @ColumnInfo(name = &quot;Link&quot;)&#10;    val link: String,&#10;&#10;    @ColumnInfo(name = &quot;created_at&quot;)&#10;    val createdAt: String, // Puedes usar Long para timestamp o Date&#10;&#10;    @ColumnInfo(name = &quot;is_favorite&quot;)&#10;    val isFavorite: Boolean = false&#10;)&#10;" />
              <option name="updatedContent" value="package esan.mendoza.impulso.data.local.entities&#13;&#10;&#13;&#10;import androidx.room.ColumnInfo&#13;&#10;import androidx.room.Entity&#13;&#10;import androidx.room.ForeignKey&#13;&#10;import androidx.room.Index&#13;&#10;import androidx.room.PrimaryKey&#13;&#10;&#13;&#10;@Entity(&#13;&#10;    tableName = &quot;recurso&quot;,&#13;&#10;    foreignKeys = [&#13;&#10;        ForeignKey(&#13;&#10;            entity = Category::class,&#13;&#10;            parentColumns = [&quot;id&quot;],&#13;&#10;            childColumns = [&quot;categoria_id&quot;],&#13;&#10;            onDelete = ForeignKey.CASCADE&#13;&#10;        )&#13;&#10;    ],&#13;&#10;    indices = [Index(value = [&quot;categoria_id&quot;])]&#13;&#10;)&#13;&#10;data class Recurso(&#13;&#10;    @PrimaryKey(autoGenerate = true)&#13;&#10;    val id: Int = 0, // Valor por defecto para permitir autoGenerate&#13;&#10;&#13;&#10;    @ColumnInfo(name = &quot;Nombre&quot;)&#13;&#10;    val nombre: String,&#13;&#10;&#13;&#10;    @ColumnInfo(name = &quot;Descripcion&quot;)&#13;&#10;    val descripcion: String,&#13;&#10;&#13;&#10;    @ColumnInfo(name = &quot;categoria_id&quot;)&#13;&#10;    val categoriaId: Int,&#13;&#10;&#13;&#10;    @ColumnInfo(name = &quot;Link&quot;)&#13;&#10;    val link: String,&#13;&#10;&#13;&#10;    @ColumnInfo(name = &quot;created_at&quot;)&#13;&#10;    val createdAt: String, // Puedes usar Long para timestamp o Date&#13;&#10;&#13;&#10;    @ColumnInfo(name = &quot;updated_at&quot;)&#13;&#10;    val updatedAt: String, // Puedes usar Long para timestamp o Date&#13;&#10;&#13;&#10;    @ColumnInfo(name = &quot;is_favorite&quot;)&#13;&#10;    val isFavorite: Boolean = false&#13;&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/di/DatabaseModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/di/DatabaseModule.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.di&#10;&#10;import android.content.Context&#10;import androidx.room.Room&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import esan.mendoza.impulso.data.db.AppDatabase&#10;import esan.mendoza.impulso.data.local.dao.CategoryDao&#10;import esan.mendoza.impulso.data.local.dao.RecursoDao&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object DatabaseModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideAppDatabase(@ApplicationContext context: Context): AppDatabase {&#10;        return Room.databaseBuilder(&#10;            context.applicationContext,&#10;            AppDatabase::class.java,&#10;            &quot;app_database&quot;&#10;        ).build()&#10;    }&#10;&#10;    @Provides&#10;    fun provideCategoryDao(database: AppDatabase): CategoryDao {&#10;        return database.categoryDao()&#10;    }&#10;&#10;    @Provides&#10;    fun provideRecursoDao(database: AppDatabase): RecursoDao {&#10;        return database.recursoDao()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package esan.mendoza.impulso.di&#13;&#10;&#13;&#10;import android.content.Context&#13;&#10;import androidx.room.Room&#13;&#10;import dagger.Module&#13;&#10;import dagger.Provides&#13;&#10;import dagger.hilt.InstallIn&#13;&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#13;&#10;import dagger.hilt.components.SingletonComponent&#13;&#10;import esan.mendoza.impulso.data.db.AppDatabase&#13;&#10;import esan.mendoza.impulso.data.local.dao.CategoryDao&#13;&#10;import esan.mendoza.impulso.data.local.dao.RecursoDao&#13;&#10;import javax.inject.Singleton&#13;&#10;&#13;&#10;@Module&#13;&#10;@InstallIn(SingletonComponent::class)&#13;&#10;object DatabaseModule {&#13;&#10;&#13;&#10;    @Provides&#13;&#10;    @Singleton&#13;&#10;    fun provideAppDatabase(@ApplicationContext context: Context): AppDatabase {&#13;&#10;        return Room.databaseBuilder(&#13;&#10;            context.applicationContext,&#13;&#10;            AppDatabase::class.java,&#13;&#10;            &quot;app_database&quot;&#13;&#10;        )&#13;&#10;        .fallbackToDestructiveMigration() // Permite recrear la DB si hay problemas de migraciÃ³n&#13;&#10;        .build()&#13;&#10;    }&#13;&#10;&#13;&#10;    @Provides&#13;&#10;    fun provideCategoryDao(database: AppDatabase): CategoryDao {&#13;&#10;        return database.categoryDao()&#13;&#10;    }&#13;&#10;&#13;&#10;    @Provides&#13;&#10;    fun provideRecursoDao(database: AppDatabase): RecursoDao {&#13;&#10;        return database.recursoDao()&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/component/DialogAddCategory.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/component/DialogAddCategory.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.presentation.component&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import esan.mendoza.impulso.presentation.component.IconPicker&#10;&#10;@Composable&#10;fun DialogAddCategory(&#10;    show: Boolean,&#10;    onDismiss: () -&gt; Unit,&#10;    onAccept: (String, String) -&gt; Unit&#10;) {&#10;    var nombre by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedIcon by remember { mutableStateOf&lt;IconPicker.IconOption?&gt;(null) }&#10;    var showIconPicker by remember { mutableStateOf(false) }&#10;&#10;    if (show) {&#10;        AlertDialog(&#10;            onDismissRequest = onDismiss,&#10;            title = { Text(&quot;Agregar CategorÃ­a&quot;, fontWeight = FontWeight.Bold) },&#10;            text = {&#10;                Column {&#10;                    OutlinedTextField(&#10;                        value = nombre,&#10;                        onValueChange = { nombre = it },&#10;                        label = { Text(&quot;Nombre de la categorÃ­a&quot;) },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        singleLine = true&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    Text(&#10;                        text = &quot;Seleccionar Ã­cono&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    // BotÃ³n para seleccionar Ã­cono&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .clickable { showIconPicker = !showIconPicker },&#10;                        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(16.dp),&#10;                            horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            if (selectedIcon != null) {&#10;                                Icon(&#10;                                    imageVector = selectedIcon!!.icon,&#10;                                    contentDescription = null,&#10;                                    modifier = Modifier.size(24.dp),&#10;                                    tint = MaterialTheme.colorScheme.primary&#10;                                )&#10;                                Text(&#10;                                    text = selectedIcon!!.name,&#10;                                    style = MaterialTheme.typography.bodyMedium&#10;                                )&#10;                            } else {&#10;                                Icon(&#10;                                    imageVector = IconPicker.availableIcons[0].icon,&#10;                                    contentDescription = null,&#10;                                    modifier = Modifier.size(24.dp),&#10;                                    tint = MaterialTheme.colorScheme.outline&#10;                                )&#10;                                Text(&#10;                                    text = &quot;Seleccionar Ã­cono&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium,&#10;                                    color = MaterialTheme.colorScheme.outline&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Grid de iconos (mostrar solo si showIconPicker es true)&#10;                    if (showIconPicker) {&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                        LazyVerticalGrid(&#10;                            columns = GridCells.Fixed(4),&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(200.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(8.dp),&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                        ) {&#10;                            items(IconPicker.availableIcons) { iconOption -&gt;&#10;                                IconSelectionItem(&#10;                                    iconOption = iconOption,&#10;                                    isSelected = selectedIcon == iconOption,&#10;                                    onIconSelected = {&#10;                                        selectedIcon = iconOption&#10;                                        showIconPicker = false&#10;                                    }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            },&#10;            confirmButton = {&#10;                Button(&#10;                    onClick = {&#10;                        val iconName = selectedIcon?.name ?: IconPicker.availableIcons[0].name&#10;                        onAccept(nombre, iconName)&#10;                        // Reset state&#10;                        nombre = &quot;&quot;&#10;                        selectedIcon = null&#10;                        showIconPicker = false&#10;                    },&#10;                    enabled = nombre.isNotBlank()&#10;                ) {&#10;                    Text(&quot;Crear&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = {&#10;                    onDismiss()&#10;                    // Reset state&#10;                    nombre = &quot;&quot;&#10;                    selectedIcon = null&#10;                    showIconPicker = false&#10;                }) {&#10;                    Text(&quot;Cancelar&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun IconSelectionItem(&#10;    iconOption: IconPicker.IconOption,&#10;    isSelected: Boolean,&#10;    onIconSelected: () -&gt; Unit&#10;) {&#10;    val backgroundColor = if (isSelected) {&#10;        MaterialTheme.colorScheme.primaryContainer&#10;    } else {&#10;        MaterialTheme.colorScheme.surface&#10;    }&#10;&#10;    val borderColor = if (isSelected) {&#10;        MaterialTheme.colorScheme.primary&#10;    } else {&#10;        MaterialTheme.colorScheme.outline.copy(alpha = 0.5f)&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .size(48.dp)&#10;            .clip(RoundedCornerShape(8.dp))&#10;            .background(backgroundColor)&#10;            .border(&#10;                width = if (isSelected) 2.dp else 1.dp,&#10;                color = borderColor,&#10;                shape = RoundedCornerShape(8.dp)&#10;            )&#10;            .clickable { onIconSelected() },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = iconOption.icon,&#10;            contentDescription = iconOption.name,&#10;            modifier = Modifier.size(24.dp),&#10;            tint = if (isSelected) {&#10;                MaterialTheme.colorScheme.primary&#10;            } else {&#10;                MaterialTheme.colorScheme.onSurface&#10;            }&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package esan.mendoza.impulso.presentation.component&#13;&#10;&#13;&#10;import androidx.compose.foundation.background&#13;&#10;import androidx.compose.foundation.border&#13;&#10;import androidx.compose.foundation.clickable&#13;&#10;import androidx.compose.foundation.layout.*&#13;&#10;import androidx.compose.foundation.lazy.grid.GridCells&#13;&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#13;&#10;import androidx.compose.foundation.lazy.grid.items&#13;&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#13;&#10;import androidx.compose.material3.*&#13;&#10;import androidx.compose.runtime.*&#13;&#10;import androidx.compose.ui.Alignment&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.compose.ui.draw.clip&#13;&#10;import androidx.compose.ui.text.font.FontWeight&#13;&#10;import androidx.compose.ui.unit.dp&#13;&#10;import esan.mendoza.impulso.presentation.component.IconPicker&#13;&#10;import esan.mendoza.impulso.utils.DateUtils&#13;&#10;&#13;&#10;@Composable&#13;&#10;fun DialogAddCategory(&#13;&#10;    show: Boolean,&#13;&#10;    onDismiss: () -&gt; Unit,&#13;&#10;    onAccept: (String, String, String) -&gt; Unit  // Agregamos parÃ¡metro para fecha&#13;&#10;) {&#13;&#10;    var nombre by remember { mutableStateOf(&quot;&quot;) }&#13;&#10;    var selectedIcon by remember { mutableStateOf&lt;IconPicker.IconOption?&gt;(null) }&#13;&#10;    var showIconPicker by remember { mutableStateOf(false) }&#13;&#10;&#13;&#10;    // Obtener fecha actual usando la nueva utilidad&#13;&#10;    val currentDate = remember {&#13;&#10;        DateUtils.getCurrentDateTimeString()&#13;&#10;    }&#13;&#10;&#13;&#10;    if (show) {&#13;&#10;        AlertDialog(&#13;&#10;            onDismissRequest = onDismiss,&#13;&#10;            title = { Text(&quot;Agregar CategorÃ­a&quot;, fontWeight = FontWeight.Bold) },&#13;&#10;            text = {&#13;&#10;                Column {&#13;&#10;                    OutlinedTextField(&#13;&#10;                        value = nombre,&#13;&#10;                        onValueChange = { nombre = it },&#13;&#10;                        label = { Text(&quot;Nombre de la categorÃ­a&quot;) },&#13;&#10;                        modifier = Modifier.fillMaxWidth(),&#13;&#10;                        singleLine = true&#13;&#10;                    )&#13;&#10;&#13;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#13;&#10;&#13;&#10;                    Text(&#13;&#10;                        text = &quot;Seleccionar Ã­cono&quot;,&#13;&#10;                        style = MaterialTheme.typography.bodyMedium,&#13;&#10;                        fontWeight = FontWeight.Medium&#13;&#10;                    )&#13;&#10;&#13;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#13;&#10;&#13;&#10;                    // BotÃ³n para seleccionar Ã­cono&#13;&#10;                    Card(&#13;&#10;                        modifier = Modifier&#13;&#10;                            .fillMaxWidth()&#13;&#10;                            .clickable { showIconPicker = !showIconPicker },&#13;&#10;                        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#13;&#10;                    ) {&#13;&#10;                        Row(&#13;&#10;                            modifier = Modifier&#13;&#10;                                .fillMaxWidth()&#13;&#10;                                .padding(16.dp),&#13;&#10;                            horizontalArrangement = Arrangement.spacedBy(12.dp),&#13;&#10;                            verticalAlignment = Alignment.CenterVertically&#13;&#10;                        ) {&#13;&#10;                            if (selectedIcon != null) {&#13;&#10;                                Icon(&#13;&#10;                                    imageVector = selectedIcon!!.icon,&#13;&#10;                                    contentDescription = null,&#13;&#10;                                    modifier = Modifier.size(24.dp),&#13;&#10;                                    tint = MaterialTheme.colorScheme.primary&#13;&#10;                                )&#13;&#10;                                Text(&#13;&#10;                                    text = selectedIcon!!.name,&#13;&#10;                                    style = MaterialTheme.typography.bodyMedium&#13;&#10;                                )&#13;&#10;                            } else {&#13;&#10;                                Icon(&#13;&#10;                                    imageVector = IconPicker.availableIcons[0].icon,&#13;&#10;                                    contentDescription = null,&#13;&#10;                                    modifier = Modifier.size(24.dp),&#13;&#10;                                    tint = MaterialTheme.colorScheme.outline&#13;&#10;                                )&#13;&#10;                                Text(&#13;&#10;                                    text = &quot;Seleccionar Ã­cono&quot;,&#13;&#10;                                    style = MaterialTheme.typography.bodyMedium,&#13;&#10;                                    color = MaterialTheme.colorScheme.outline&#13;&#10;                                )&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;&#13;&#10;                    // Grid de iconos (mostrar solo si showIconPicker es true)&#13;&#10;                    if (showIconPicker) {&#13;&#10;                        Spacer(modifier = Modifier.height(8.dp))&#13;&#10;&#13;&#10;                        LazyVerticalGrid(&#13;&#10;                            columns = GridCells.Fixed(4),&#13;&#10;                            modifier = Modifier&#13;&#10;                                .fillMaxWidth()&#13;&#10;                                .height(200.dp),&#13;&#10;                            verticalArrangement = Arrangement.spacedBy(8.dp),&#13;&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp)&#13;&#10;                        ) {&#13;&#10;                            items(IconPicker.availableIcons) { iconOption -&gt;&#13;&#10;                                IconSelectionItem(&#13;&#10;                                    iconOption = iconOption,&#13;&#10;                                    isSelected = selectedIcon == iconOption,&#13;&#10;                                    onIconSelected = {&#13;&#10;                                        selectedIcon = iconOption&#13;&#10;                                        showIconPicker = false&#13;&#10;                                    }&#13;&#10;                                )&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            },&#13;&#10;            confirmButton = {&#13;&#10;                Button(&#13;&#10;                    onClick = {&#13;&#10;                        val iconName = selectedIcon?.name ?: IconPicker.availableIcons[0].name&#13;&#10;                        onAccept(nombre, iconName, currentDate)  // Pasar fecha actual&#13;&#10;                        // Reset state&#13;&#10;                        nombre = &quot;&quot;&#13;&#10;                        selectedIcon = null&#13;&#10;                        showIconPicker = false&#13;&#10;                    },&#13;&#10;                    enabled = nombre.isNotBlank()&#13;&#10;                ) {&#13;&#10;                    Text(&quot;Crear&quot;)&#13;&#10;                }&#13;&#10;            },&#13;&#10;            dismissButton = {&#13;&#10;                TextButton(onClick = {&#13;&#10;                    onDismiss()&#13;&#10;                    // Reset state&#13;&#10;                    nombre = &quot;&quot;&#13;&#10;                    selectedIcon = null&#13;&#10;                    showIconPicker = false&#13;&#10;                }) {&#13;&#10;                    Text(&quot;Cancelar&quot;)&#13;&#10;                }&#13;&#10;            }&#13;&#10;        )&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Composable&#13;&#10;fun IconSelectionItem(&#13;&#10;    iconOption: IconPicker.IconOption,&#13;&#10;    isSelected: Boolean,&#13;&#10;    onIconSelected: () -&gt; Unit&#13;&#10;) {&#13;&#10;    val backgroundColor = if (isSelected) {&#13;&#10;        MaterialTheme.colorScheme.primaryContainer&#13;&#10;    } else {&#13;&#10;        MaterialTheme.colorScheme.surface&#13;&#10;    }&#13;&#10;&#13;&#10;    val borderColor = if (isSelected) {&#13;&#10;        MaterialTheme.colorScheme.primary&#13;&#10;    } else {&#13;&#10;        MaterialTheme.colorScheme.outline.copy(alpha = 0.5f)&#13;&#10;    }&#13;&#10;&#13;&#10;    Box(&#13;&#10;        modifier = Modifier&#13;&#10;            .size(48.dp)&#13;&#10;            .clip(RoundedCornerShape(8.dp))&#13;&#10;            .background(backgroundColor)&#13;&#10;            .border(&#13;&#10;                width = if (isSelected) 2.dp else 1.dp,&#13;&#10;                color = borderColor,&#13;&#10;                shape = RoundedCornerShape(8.dp)&#13;&#10;            )&#13;&#10;            .clickable { onIconSelected() },&#13;&#10;        contentAlignment = Alignment.Center&#13;&#10;    ) {&#13;&#10;        Icon(&#13;&#10;            imageVector = iconOption.icon,&#13;&#10;            contentDescription = iconOption.name,&#13;&#10;            modifier = Modifier.size(24.dp),&#13;&#10;            tint = if (isSelected) {&#13;&#10;                MaterialTheme.colorScheme.primary&#13;&#10;            } else {&#13;&#10;                MaterialTheme.colorScheme.onSurface&#13;&#10;            }&#13;&#10;        )&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/component/DialogAddRecurso.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/component/DialogAddRecurso.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.presentation.component&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Link&#10;import androidx.compose.material.icons.filled.Mic&#10;import androidx.compose.material.icons.filled.MicOff&#10;import androidx.compose.material.icons.filled.Category&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import esan.mendoza.impulso.data.local.entities.Category&#10;import esan.mendoza.impulso.presentation.viewmodel.CategoryViewModel&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun DialogAddRecurso(&#10;    show: Boolean,&#10;    onDismiss: () -&gt; Unit,&#10;    onAccept: (String, String, String, String, String) -&gt; Unit,&#10;    categoryViewModel: CategoryViewModel = hiltViewModel()&#10;) {&#10;    var nombre by remember { mutableStateOf(&quot;&quot;) }&#10;    var descripcion by remember { mutableStateOf(&quot;&quot;) }&#10;    var link by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedCategory by remember { mutableStateOf&lt;Category?&gt;(null) }&#10;    var isRecording by remember { mutableStateOf(false) }&#10;    var showLinkField by remember { mutableStateOf(false) }&#10;    var voiceError by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    val categories by categoryViewModel.categories.collectAsState()&#10;    val scrollState = rememberScrollState()&#10;&#10;    // ConfiguraciÃ³n del reconocimiento de voz&#10;    val voiceHelper = rememberVoiceRecognitionHelper(&#10;        onResult = { result -&gt;&#10;            descripcion = if (descripcion.isEmpty()) result else &quot;$descripcion $result&quot;&#10;            isRecording = false&#10;            voiceError = null&#10;        },&#10;        onError = { error -&gt;&#10;            voiceError = error&#10;            isRecording = false&#10;        }&#10;    )&#10;&#10;    val requestMicrophonePermission = RequestMicrophonePermission(&#10;        onPermissionGranted = {&#10;            voiceHelper.startListening()&#10;            isRecording = true&#10;            voiceError = null&#10;        },&#10;        onPermissionDenied = {&#10;            voiceError = &quot;Permiso de micrÃ³fono denegado&quot;&#10;            isRecording = false&#10;        }&#10;    )&#10;&#10;    // Limpiar recursos cuando se cierre el diÃ¡logo&#10;    DisposableEffect(show) {&#10;        onDispose {&#10;            if (isRecording) {&#10;                voiceHelper.stopListening()&#10;                isRecording = false&#10;            }&#10;        }&#10;    }&#10;&#10;    // Fecha automÃ¡tica&#10;    val currentDate = remember {&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;        dateFormat.format(Date())&#10;    }&#10;&#10;    if (show) {&#10;        AlertDialog(&#10;            onDismissRequest = {&#10;                if (isRecording) {&#10;                    voiceHelper.stopListening()&#10;                    isRecording = false&#10;                }&#10;                onDismiss()&#10;            },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .heightIn(max = 650.dp),&#10;            title = {&#10;                Text(&#10;                    &quot;Nuevo Recurso&quot;,&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 20.sp&#10;                )&#10;            },&#10;            text = {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .verticalScroll(scrollState),&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    // Campo Nombre&#10;                    OutlinedTextField(&#10;                        value = nombre,&#10;                        onValueChange = { nombre = it },&#10;                        label = { Text(&quot;Nombre del recurso&quot;) },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        singleLine = true,&#10;                        shape = RoundedCornerShape(12.dp),&#10;                        colors = OutlinedTextFieldDefaults.colors(&#10;                            focusedBorderColor = MaterialTheme.colorScheme.primary,&#10;                            focusedLabelColor = MaterialTheme.colorScheme.primary&#10;                        )&#10;                    )&#10;&#10;                    // Campo DescripciÃ³n con opciÃ³n de voz&#10;                    Text(&#10;                        text = &quot;DescripciÃ³n&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(12.dp)&#10;                        ) {&#10;                            OutlinedTextField(&#10;                                value = descripcion,&#10;                                onValueChange = { descripcion = it },&#10;                                label = { Text(&quot;Describe tu recurso&quot;) },&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                minLines = 3,&#10;                                maxLines = 4,&#10;                                shape = RoundedCornerShape(8.dp),&#10;                                trailingIcon = {&#10;                                    IconButton(&#10;                                        onClick = {&#10;                                            if (isRecording) {&#10;                                                voiceHelper.stopListening()&#10;                                                isRecording = false&#10;                                            } else {&#10;                                                requestMicrophonePermission()&#10;                                            }&#10;                                        }&#10;                                    ) {&#10;                                        Icon(&#10;                                            imageVector = if (isRecording) Icons.Default.MicOff else Icons.Default.Mic,&#10;                                            contentDescription = if (isRecording) &quot;Detener grabaciÃ³n&quot; else &quot;Grabar audio&quot;,&#10;                                            tint = if (isRecording) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.primary&#10;                                        )&#10;                                    }&#10;                                }&#10;                            )&#10;&#10;                            if (isRecording) {&#10;                                Spacer(modifier = Modifier.height(8.dp))&#10;                                Row(&#10;                                    verticalAlignment = Alignment.CenterVertically,&#10;                                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                                ) {&#10;                                    CircularProgressIndicator(&#10;                                        modifier = Modifier.size(16.dp),&#10;                                        strokeWidth = 2.dp,&#10;                                        color = MaterialTheme.colorScheme.error&#10;                                    )&#10;                                    Text(&#10;                                        text = &quot;Escuchando...&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall,&#10;                                        color = MaterialTheme.colorScheme.error&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;                            // Mostrar error de voz si existe&#10;                            voiceError?.let { error -&gt;&#10;                                Spacer(modifier = Modifier.height(8.dp))&#10;                                Card(&#10;                                    colors = CardDefaults.cardColors(&#10;                                        containerColor = MaterialTheme.colorScheme.errorContainer&#10;                                    )&#10;                                ) {&#10;                                    Text(&#10;                                        text = error,&#10;                                        modifier = Modifier.padding(8.dp),&#10;                                        style = MaterialTheme.typography.bodySmall,&#10;                                        color = MaterialTheme.colorScheme.onErrorContainer&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Enlace opcional&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.SpaceBetween&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Enlace (opcional)&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;&#10;                        Switch(&#10;                            checked = showLinkField,&#10;                            onCheckedChange = { showLinkField = it }&#10;                        )&#10;                    }&#10;&#10;                    if (showLinkField) {&#10;                        OutlinedTextField(&#10;                            value = link,&#10;                            onValueChange = { link = it },&#10;                            label = { Text(&quot;URL o enlace&quot;) },&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            singleLine = true,&#10;                            leadingIcon = {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Link,&#10;                                    contentDescription = null,&#10;                                    tint = MaterialTheme.colorScheme.primary&#10;                                )&#10;                            },&#10;                            placeholder = { Text(&quot;https://ejemplo.com&quot;) },&#10;                            shape = RoundedCornerShape(12.dp)&#10;                        )&#10;                    }&#10;&#10;                    // SelecciÃ³n de categorÃ­a&#10;                    Text(&#10;                        text = &quot;Seleccionar categorÃ­a&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;&#10;                    if (categories.isEmpty()) {&#10;                        Card(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = MaterialTheme.colorScheme.errorContainer&#10;                            )&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;No hay categorÃ­as disponibles. Crea una categorÃ­a primero.&quot;,&#10;                                modifier = Modifier.padding(16.dp),&#10;                                color = MaterialTheme.colorScheme.onErrorContainer,&#10;                                style = MaterialTheme.typography.bodyMedium&#10;                            )&#10;                        }&#10;                    } else {&#10;                        LazyRow(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                        ) {&#10;                            items(categories) { category -&gt;&#10;                                CategorySelectionCard(&#10;                                    category = category,&#10;                                    isSelected = selectedCategory == category,&#10;                                    onCategorySelected = {&#10;                                        selectedCategory = if (selectedCategory == category) null else category&#10;                                    }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            },&#10;            confirmButton = {&#10;                Button(&#10;                    onClick = {&#10;                        val categoryId = selectedCategory?.id?.toString() ?: &quot;0&quot;&#10;                        val finalLink = if (showLinkField) link else &quot;&quot;&#10;                        onAccept(nombre, descripcion, categoryId, finalLink, currentDate)&#10;&#10;                        // Reset state&#10;                        nombre = &quot;&quot;&#10;                        descripcion = &quot;&quot;&#10;                        link = &quot;&quot;&#10;                        selectedCategory = null&#10;                        showLinkField = false&#10;                        isRecording = false&#10;                        voiceError = null&#10;                        voiceHelper.destroy()&#10;                    },&#10;                    enabled = nombre.isNotBlank() &amp;&amp; descripcion.isNotBlank() &amp;&amp; selectedCategory != null,&#10;                    shape = RoundedCornerShape(8.dp)&#10;                ) {&#10;                    Text(&quot;Crear Recurso&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        if (isRecording) {&#10;                            voiceHelper.stopListening()&#10;                        }&#10;                        onDismiss()&#10;                        // Reset state&#10;                        nombre = &quot;&quot;&#10;                        descripcion = &quot;&quot;&#10;                        link = &quot;&quot;&#10;                        selectedCategory = null&#10;                        showLinkField = false&#10;                        isRecording = false&#10;                        voiceError = null&#10;                    },&#10;                    shape = RoundedCornerShape(8.dp)&#10;                ) {&#10;                    Text(&quot;Cancelar&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CategorySelectionCard(&#10;    category: Category,&#10;    isSelected: Boolean,&#10;    onCategorySelected: () -&gt; Unit&#10;) {&#10;    val backgroundColor = if (isSelected) {&#10;        MaterialTheme.colorScheme.primaryContainer&#10;    } else {&#10;        MaterialTheme.colorScheme.surface&#10;    }&#10;&#10;    val borderColor = if (isSelected) {&#10;        MaterialTheme.colorScheme.primary&#10;    } else {&#10;        MaterialTheme.colorScheme.outline.copy(alpha = 0.5f)&#10;    }&#10;&#10;    val categoryIcon = IconPicker.getIconByName(category.icono) ?: Icons.Default.Category&#10;&#10;    Card(&#10;        modifier = Modifier&#10;            .width(120.dp)&#10;            .clip(RoundedCornerShape(12.dp))&#10;            .background(backgroundColor)&#10;            .border(&#10;                width = if (isSelected) 2.dp else 1.dp,&#10;                color = borderColor,&#10;                shape = RoundedCornerShape(12.dp)&#10;            )&#10;            .clickable { onCategorySelected() },&#10;        elevation = CardDefaults.cardElevation(&#10;            defaultElevation = if (isSelected) 6.dp else 2.dp&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = categoryIcon,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(24.dp),&#10;                tint = if (isSelected) {&#10;                    MaterialTheme.colorScheme.primary&#10;                } else {&#10;                    MaterialTheme.colorScheme.onSurface&#10;                }&#10;            )&#10;&#10;            Text(&#10;                text = category.nombre,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = if (isSelected) {&#10;                    MaterialTheme.colorScheme.primary&#10;                } else {&#10;                    MaterialTheme.colorScheme.onSurface&#10;                },&#10;                fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Normal,&#10;                maxLines = 2,&#10;                textAlign = TextAlign.Center&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package esan.mendoza.impulso.presentation.component&#13;&#10;&#13;&#10;import androidx.compose.foundation.background&#13;&#10;import androidx.compose.foundation.border&#13;&#10;import androidx.compose.foundation.clickable&#13;&#10;import androidx.compose.foundation.layout.*&#13;&#10;import androidx.compose.foundation.lazy.LazyRow&#13;&#10;import androidx.compose.foundation.lazy.items&#13;&#10;import androidx.compose.foundation.rememberScrollState&#13;&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#13;&#10;import androidx.compose.foundation.verticalScroll&#13;&#10;import androidx.compose.material.icons.Icons&#13;&#10;import androidx.compose.material.icons.filled.Link&#13;&#10;import androidx.compose.material.icons.filled.Mic&#13;&#10;import androidx.compose.material.icons.filled.MicOff&#13;&#10;import androidx.compose.material.icons.filled.Category&#13;&#10;import androidx.compose.ui.text.style.TextAlign&#13;&#10;import androidx.compose.material3.*&#13;&#10;import androidx.compose.runtime.*&#13;&#10;import androidx.compose.ui.Alignment&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.compose.ui.draw.clip&#13;&#10;import androidx.compose.ui.text.font.FontWeight&#13;&#10;import androidx.compose.ui.unit.dp&#13;&#10;import androidx.compose.ui.unit.sp&#13;&#10;import androidx.hilt.navigation.compose.hiltViewModel&#13;&#10;import esan.mendoza.impulso.data.local.entities.Category&#13;&#10;import esan.mendoza.impulso.presentation.viewmodel.CategoryViewModel&#13;&#10;import esan.mendoza.impulso.utils.DateUtils&#13;&#10;&#13;&#10;@OptIn(ExperimentalMaterial3Api::class)&#13;&#10;@Composable&#13;&#10;fun DialogAddRecurso(&#13;&#10;    show: Boolean,&#13;&#10;    onDismiss: () -&gt; Unit,&#13;&#10;    onAccept: (String, String, String, String, String) -&gt; Unit,&#13;&#10;    categoryViewModel: CategoryViewModel = hiltViewModel()&#13;&#10;) {&#13;&#10;    var nombre by remember { mutableStateOf(&quot;&quot;) }&#13;&#10;    var descripcion by remember { mutableStateOf(&quot;&quot;) }&#13;&#10;    var link by remember { mutableStateOf(&quot;&quot;) }&#13;&#10;    var selectedCategory by remember { mutableStateOf&lt;Category?&gt;(null) }&#13;&#10;    var isRecording by remember { mutableStateOf(false) }&#13;&#10;    var showLinkField by remember { mutableStateOf(false) }&#13;&#10;    var voiceError by remember { mutableStateOf&lt;String?&gt;(null) }&#13;&#10;&#13;&#10;    val categories by categoryViewModel.categories.collectAsState()&#13;&#10;    val scrollState = rememberScrollState()&#13;&#10;&#13;&#10;    // ConfiguraciÃ³n del reconocimiento de voz&#13;&#10;    val voiceHelper = rememberVoiceRecognitionHelper(&#13;&#10;        onResult = { result -&gt;&#13;&#10;            descripcion = if (descripcion.isEmpty()) result else &quot;$descripcion $result&quot;&#13;&#10;            isRecording = false&#13;&#10;            voiceError = null&#13;&#10;        },&#13;&#10;        onError = { error -&gt;&#13;&#10;            voiceError = error&#13;&#10;            isRecording = false&#13;&#10;        }&#13;&#10;    )&#13;&#10;&#13;&#10;    val requestMicrophonePermission = RequestMicrophonePermission(&#13;&#10;        onPermissionGranted = {&#13;&#10;            voiceHelper.startListening()&#13;&#10;            isRecording = true&#13;&#10;            voiceError = null&#13;&#10;        },&#13;&#10;        onPermissionDenied = {&#13;&#10;            voiceError = &quot;Permiso de micrÃ³fono denegado&quot;&#13;&#10;            isRecording = false&#13;&#10;        }&#13;&#10;    )&#13;&#10;&#13;&#10;    // Limpiar recursos cuando se cierre el diÃ¡logo&#13;&#10;    DisposableEffect(show) {&#13;&#10;        onDispose {&#13;&#10;            if (isRecording) {&#13;&#10;                voiceHelper.stopListening()&#13;&#10;                isRecording = false&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // Usar la nueva utilidad de fechas para obtener la fecha actual&#13;&#10;    val currentDate = remember {&#13;&#10;        DateUtils.getCurrentDateTimeString()&#13;&#10;    }&#13;&#10;&#13;&#10;    if (show) {&#13;&#10;        AlertDialog(&#13;&#10;            onDismissRequest = {&#13;&#10;                if (isRecording) {&#13;&#10;                    voiceHelper.stopListening()&#13;&#10;                    isRecording = false&#13;&#10;                }&#13;&#10;                onDismiss()&#13;&#10;            },&#13;&#10;            modifier = Modifier&#13;&#10;                .fillMaxWidth()&#13;&#10;                .heightIn(max = 650.dp),&#13;&#10;            title = {&#13;&#10;                Text(&#13;&#10;                    &quot;Nuevo Recurso&quot;,&#13;&#10;                    fontWeight = FontWeight.Bold,&#13;&#10;                    fontSize = 20.sp&#13;&#10;                )&#13;&#10;            },&#13;&#10;            text = {&#13;&#10;                Column(&#13;&#10;                    modifier = Modifier&#13;&#10;                        .fillMaxWidth()&#13;&#10;                        .verticalScroll(scrollState),&#13;&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp)&#13;&#10;                ) {&#13;&#10;                    // Campo Nombre&#13;&#10;                    OutlinedTextField(&#13;&#10;                        value = nombre,&#13;&#10;                        onValueChange = { nombre = it },&#13;&#10;                        label = { Text(&quot;Nombre del recurso&quot;) },&#13;&#10;                        modifier = Modifier.fillMaxWidth(),&#13;&#10;                        singleLine = true,&#13;&#10;                        shape = RoundedCornerShape(12.dp),&#13;&#10;                        colors = OutlinedTextFieldDefaults.colors(&#13;&#10;                            focusedBorderColor = MaterialTheme.colorScheme.primary,&#13;&#10;                            focusedLabelColor = MaterialTheme.colorScheme.primary&#13;&#10;                        )&#13;&#10;                    )&#13;&#10;&#13;&#10;                    // Campo DescripciÃ³n con opciÃ³n de voz&#13;&#10;                    Text(&#13;&#10;                        text = &quot;DescripciÃ³n&quot;,&#13;&#10;                        style = MaterialTheme.typography.bodyMedium,&#13;&#10;                        fontWeight = FontWeight.Medium&#13;&#10;                    )&#13;&#10;&#13;&#10;                    Card(&#13;&#10;                        modifier = Modifier.fillMaxWidth(),&#13;&#10;                        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#13;&#10;                    ) {&#13;&#10;                        Column(&#13;&#10;                            modifier = Modifier.padding(12.dp)&#13;&#10;                        ) {&#13;&#10;                            OutlinedTextField(&#13;&#10;                                value = descripcion,&#13;&#10;                                onValueChange = { descripcion = it },&#13;&#10;                                label = { Text(&quot;Describe tu recurso&quot;) },&#13;&#10;                                modifier = Modifier.fillMaxWidth(),&#13;&#10;                                minLines = 3,&#13;&#10;                                maxLines = 4,&#13;&#10;                                shape = RoundedCornerShape(8.dp),&#13;&#10;                                trailingIcon = {&#13;&#10;                                    IconButton(&#13;&#10;                                        onClick = {&#13;&#10;                                            if (isRecording) {&#13;&#10;                                                voiceHelper.stopListening()&#13;&#10;                                                isRecording = false&#13;&#10;                                            } else {&#13;&#10;                                                requestMicrophonePermission()&#13;&#10;                                            }&#13;&#10;                                        }&#13;&#10;                                    ) {&#13;&#10;                                        Icon(&#13;&#10;                                            imageVector = if (isRecording) Icons.Default.MicOff else Icons.Default.Mic,&#13;&#10;                                            contentDescription = if (isRecording) &quot;Detener grabaciÃ³n&quot; else &quot;Grabar audio&quot;,&#13;&#10;                                            tint = if (isRecording) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.primary&#13;&#10;                                        )&#13;&#10;                                    }&#13;&#10;                                }&#13;&#10;                            )&#13;&#10;&#13;&#10;                            if (isRecording) {&#13;&#10;                                Spacer(modifier = Modifier.height(8.dp))&#13;&#10;                                Row(&#13;&#10;                                    verticalAlignment = Alignment.CenterVertically,&#13;&#10;                                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#13;&#10;                                ) {&#13;&#10;                                    CircularProgressIndicator(&#13;&#10;                                        modifier = Modifier.size(16.dp),&#13;&#10;                                        strokeWidth = 2.dp,&#13;&#10;                                        color = MaterialTheme.colorScheme.error&#13;&#10;                                    )&#13;&#10;                                    Text(&#13;&#10;                                        text = &quot;Escuchando...&quot;,&#13;&#10;                                        style = MaterialTheme.typography.bodySmall,&#13;&#10;                                        color = MaterialTheme.colorScheme.error&#13;&#10;                                    )&#13;&#10;                                }&#13;&#10;                            }&#13;&#10;&#13;&#10;                            // Mostrar error de voz si existe&#13;&#10;                            voiceError?.let { error -&gt;&#13;&#10;                                Spacer(modifier = Modifier.height(8.dp))&#13;&#10;                                Card(&#13;&#10;                                    colors = CardDefaults.cardColors(&#13;&#10;                                        containerColor = MaterialTheme.colorScheme.errorContainer&#13;&#10;                                    )&#13;&#10;                                ) {&#13;&#10;                                    Text(&#13;&#10;                                        text = error,&#13;&#10;                                        modifier = Modifier.padding(8.dp),&#13;&#10;                                        style = MaterialTheme.typography.bodySmall,&#13;&#10;                                        color = MaterialTheme.colorScheme.onErrorContainer&#13;&#10;                                    )&#13;&#10;                                }&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;&#13;&#10;                    // BotÃ³n para mostrar/ocultar campo de enlace&#13;&#10;                    Row(&#13;&#10;                        modifier = Modifier.fillMaxWidth(),&#13;&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#13;&#10;                        verticalAlignment = Alignment.CenterVertically&#13;&#10;                    ) {&#13;&#10;                        Text(&#13;&#10;                            text = &quot;Â¿Deseas agregar un enlace?&quot;,&#13;&#10;                            style = MaterialTheme.typography.bodyMedium,&#13;&#10;                            fontWeight = FontWeight.Medium&#13;&#10;                        )&#13;&#10;                        Switch(&#13;&#10;                            checked = showLinkField,&#13;&#10;                            onCheckedChange = { showLinkField = it }&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;&#13;&#10;                    // Campo de enlace (opcional)&#13;&#10;                    if (showLinkField) {&#13;&#10;                        OutlinedTextField(&#13;&#10;                            value = link,&#13;&#10;                            onValueChange = { link = it },&#13;&#10;                            label = { Text(&quot;Enlace (opcional)&quot;) },&#13;&#10;                            leadingIcon = {&#13;&#10;                                Icon(&#13;&#10;                                    imageVector = Icons.Default.Link,&#13;&#10;                                    contentDescription = &quot;Enlace&quot;&#13;&#10;                                )&#13;&#10;                            },&#13;&#10;                            modifier = Modifier.fillMaxWidth(),&#13;&#10;                            singleLine = true,&#13;&#10;                            shape = RoundedCornerShape(12.dp)&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;&#13;&#10;                    // SelecciÃ³n de categorÃ­a&#13;&#10;                    Text(&#13;&#10;                        text = &quot;Seleccionar categorÃ­a&quot;,&#13;&#10;                        style = MaterialTheme.typography.bodyMedium,&#13;&#10;                        fontWeight = FontWeight.Medium&#13;&#10;                    )&#13;&#10;&#13;&#10;                    if (categories.isEmpty()) {&#13;&#10;                        Card(&#13;&#10;                            modifier = Modifier.fillMaxWidth(),&#13;&#10;                            colors = CardDefaults.cardColors(&#13;&#10;                                containerColor = MaterialTheme.colorScheme.errorContainer&#13;&#10;                            )&#13;&#10;                        ) {&#13;&#10;                            Text(&#13;&#10;                                text = &quot;No hay categorÃ­as disponibles. Crea una categorÃ­a primero.&quot;,&#13;&#10;                                modifier = Modifier.padding(16.dp),&#13;&#10;                                color = MaterialTheme.colorScheme.onErrorContainer,&#13;&#10;                                style = MaterialTheme.typography.bodyMedium&#13;&#10;                            )&#13;&#10;                        }&#13;&#10;                    } else {&#13;&#10;                        LazyRow(&#13;&#10;                            modifier = Modifier.fillMaxWidth(),&#13;&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp)&#13;&#10;                        ) {&#13;&#10;                            items(categories) { category -&gt;&#13;&#10;                                CategorySelectionCard(&#13;&#10;                                    category = category,&#13;&#10;                                    isSelected = selectedCategory == category,&#13;&#10;                                    onCategorySelected = {&#13;&#10;                                        selectedCategory = if (selectedCategory == category) null else category&#13;&#10;                                    }&#13;&#10;                                )&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            },&#13;&#10;            confirmButton = {&#13;&#10;                Button(&#13;&#10;                    onClick = {&#13;&#10;                        val categoryId = selectedCategory?.id?.toString() ?: &quot;0&quot;&#13;&#10;                        val finalLink = if (showLinkField) link else &quot;&quot;&#13;&#10;                        onAccept(nombre, descripcion, categoryId, finalLink, currentDate)&#13;&#10;&#13;&#10;                        // Reset state&#13;&#10;                        nombre = &quot;&quot;&#13;&#10;                        descripcion = &quot;&quot;&#13;&#10;                        link = &quot;&quot;&#13;&#10;                        selectedCategory = null&#13;&#10;                        showLinkField = false&#13;&#10;                        isRecording = false&#13;&#10;                        voiceError = null&#13;&#10;&#13;&#10;                        if (isRecording) {&#13;&#10;                            voiceHelper.stopListening()&#13;&#10;                        }&#13;&#10;                    },&#13;&#10;                    enabled = nombre.isNotBlank() &amp;&amp; descripcion.isNotBlank() &amp;&amp; selectedCategory != null,&#13;&#10;                    shape = RoundedCornerShape(12.dp)&#13;&#10;                ) {&#13;&#10;                    Text(&quot;Agregar&quot;)&#13;&#10;                }&#13;&#10;            },&#13;&#10;            dismissButton = {&#13;&#10;                TextButton(&#13;&#10;                    onClick = {&#13;&#10;                        if (isRecording) {&#13;&#10;                            voiceHelper.stopListening()&#13;&#10;                            isRecording = false&#13;&#10;                        }&#13;&#10;                        onDismiss()&#13;&#10;                    },&#13;&#10;                    shape = RoundedCornerShape(12.dp)&#13;&#10;                ) {&#13;&#10;                    Text(&quot;Cancelar&quot;)&#13;&#10;                }&#13;&#10;            }&#13;&#10;        )&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Composable&#13;&#10;fun CategorySelectionCard(&#13;&#10;    category: Category,&#13;&#10;    isSelected: Boolean,&#13;&#10;    onCategorySelected: () -&gt; Unit&#13;&#10;) {&#13;&#10;    val backgroundColor = if (isSelected) {&#13;&#10;        MaterialTheme.colorScheme.primaryContainer&#13;&#10;    } else {&#13;&#10;        MaterialTheme.colorScheme.surface&#13;&#10;    }&#13;&#10;&#13;&#10;    val borderColor = if (isSelected) {&#13;&#10;        MaterialTheme.colorScheme.primary&#13;&#10;    } else {&#13;&#10;        MaterialTheme.colorScheme.outline.copy(alpha = 0.5f)&#13;&#10;    }&#13;&#10;&#13;&#10;    val categoryIcon = IconPicker.getIconByName(category.icono) ?: Icons.Default.Category&#13;&#10;&#13;&#10;    Card(&#13;&#10;        modifier = Modifier&#13;&#10;            .width(120.dp)&#13;&#10;            .clip(RoundedCornerShape(12.dp))&#13;&#10;            .background(backgroundColor)&#13;&#10;            .border(&#13;&#10;                width = if (isSelected) 2.dp else 1.dp,&#13;&#10;                color = borderColor,&#13;&#10;                shape = RoundedCornerShape(12.dp)&#13;&#10;            )&#13;&#10;            .clickable { onCategorySelected() },&#13;&#10;        elevation = CardDefaults.cardElevation(&#13;&#10;            defaultElevation = if (isSelected) 6.dp else 2.dp&#13;&#10;        )&#13;&#10;    ) {&#13;&#10;        Column(&#13;&#10;            modifier = Modifier&#13;&#10;                .fillMaxWidth()&#13;&#10;                .padding(12.dp),&#13;&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#13;&#10;            verticalArrangement = Arrangement.spacedBy(8.dp)&#13;&#10;        ) {&#13;&#10;            Icon(&#13;&#10;                imageVector = categoryIcon,&#13;&#10;                contentDescription = null,&#13;&#10;                modifier = Modifier.size(24.dp),&#13;&#10;                tint = if (isSelected) {&#13;&#10;                    MaterialTheme.colorScheme.primary&#13;&#10;                } else {&#13;&#10;                    MaterialTheme.colorScheme.onSurface&#13;&#10;                }&#13;&#10;            )&#13;&#10;&#13;&#10;            Text(&#13;&#10;                text = category.nombre,&#13;&#10;                style = MaterialTheme.typography.bodySmall,&#13;&#10;                color = if (isSelected) {&#13;&#10;                    MaterialTheme.colorScheme.primary&#13;&#10;                } else {&#13;&#10;                    MaterialTheme.colorScheme.onSurface&#13;&#10;                },&#13;&#10;                fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Normal,&#13;&#10;                maxLines = 2,&#13;&#10;                textAlign = TextAlign.Center&#13;&#10;            )&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/favoritesScreen/FavoritesScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/favoritesScreen/FavoritesScreen.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.presentation.favoritesScreen&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.FavoriteBorder&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.data.local.entities.Category&#10;import esan.mendoza.impulso.presentation.component.rememberShareHelper&#10;import esan.mendoza.impulso.presentation.viewmodel.CategoryViewModel&#10;import esan.mendoza.impulso.presentation.viewmodel.RecursoViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun FavoritesScreen(&#10;    onBackClick: () -&gt; Unit,&#10;    onResourceClick: (Recurso, Category?) -&gt; Unit,&#10;    categoryViewModel: CategoryViewModel = hiltViewModel(),&#10;    recursoViewModel: RecursoViewModel = hiltViewModel()&#10;) {&#10;    val categories by categoryViewModel.categories.collectAsState()&#10;    val recursos by recursoViewModel.recursos.collectAsState()&#10;    val isLoading by recursoViewModel.isLoading.collectAsState()&#10;    val shareHelper = rememberShareHelper()&#10;&#10;    // Cargar favoritos al entrar a la pantalla&#10;    LaunchedEffect(Unit) {&#10;        recursoViewModel.loadFavoriteRecursos()&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        // Top Bar&#10;        TopAppBar(&#10;            title = {&#10;                Text(&#10;                    &quot;Mis Favoritos&quot;,&#10;                    fontSize = 20.sp,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            },&#10;            navigationIcon = {&#10;                IconButton(onClick = onBackClick) {&#10;                    Icon(&#10;                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                        contentDescription = &quot;Volver&quot;&#10;                    )&#10;                }&#10;            }&#10;        )&#10;&#10;        // Content&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp)&#10;        ) {&#10;            when {&#10;                isLoading -&gt; {&#10;                    CircularProgressIndicator(&#10;                        modifier = Modifier.align(Alignment.Center)&#10;                    )&#10;                }&#10;                recursos.isEmpty() -&gt; {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxSize()&#10;                            .padding(32.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.Center&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.FavoriteBorder,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(64.dp),&#10;                            tint = MaterialTheme.colorScheme.outline&#10;                        )&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(&#10;                            text = &quot;No tienes recursos favoritos&quot;,&#10;                            style = MaterialTheme.typography.headlineSmall,&#10;                            color = MaterialTheme.colorScheme.outline&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&#10;                            text = &quot;Agrega recursos a favoritos presionando el Ã­cono del corazÃ³n&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.outline&#10;                        )&#10;                    }&#10;                }&#10;                else -&gt; {&#10;                    Column {&#10;                        Text(&#10;                            text = &quot;${recursos.size} recursos favoritos&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = MaterialTheme.colorScheme.primary,&#10;                            modifier = Modifier.padding(bottom = 16.dp)&#10;                        )&#10;&#10;                        LazyVerticalGrid(&#10;                            columns = GridCells.Fixed(2),&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalArrangement = Arrangement.spacedBy(8.dp),&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                        ) {&#10;                            items(recursos) { recurso -&gt;&#10;                                esan.mendoza.impulso.presentation.principalScreen.RecursoCard(&#10;                                    recurso = recurso,&#10;                                    categories = categories,&#10;                                    onResourceClick = onResourceClick,&#10;                                    onToggleFavorite = { recursoId -&gt;&#10;                                        recursoViewModel.toggleFavorite(recursoId)&#10;                                    },&#10;                                    onDeleteResource = { recursoId -&gt;&#10;                                        recursoViewModel.deleteRecursoById(recursoId)&#10;                                    },&#10;                                    onShareResource = { recurso -&gt;&#10;                                        val categoryName = categories.find { it.id == recurso.categoriaId }?.nombre&#10;                                        shareHelper(recurso, categoryName)&#10;                                    }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package esan.mendoza.impulso.presentation.favoritesScreen&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.FavoriteBorder&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.data.local.entities.Category&#10;import esan.mendoza.impulso.presentation.component.rememberShareHelper&#10;import esan.mendoza.impulso.presentation.viewmodel.CategoryViewModel&#10;import esan.mendoza.impulso.presentation.viewmodel.RecursoViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun FavoritesScreen(&#10;    onBackClick: () -&gt; Unit,&#10;    onResourceClick: (Recurso, Category?) -&gt; Unit,&#10;    categoryViewModel: CategoryViewModel = hiltViewModel(),&#10;    recursoViewModel: RecursoViewModel = hiltViewModel()&#10;) {&#10;    val categories by categoryViewModel.categories.collectAsState()&#10;    val recursos by recursoViewModel.recursos.collectAsState()&#10;    val isLoading by recursoViewModel.isLoading.collectAsState()&#10;    val shareHelper = rememberShareHelper()&#10;&#10;    // Cargar favoritos al entrar a la pantalla&#10;    LaunchedEffect(Unit) {&#10;        recursoViewModel.loadFavoriteRecursos()&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        // Top Bar&#10;        TopAppBar(&#10;            title = {&#10;                Text(&#10;                    &quot;Mis Favoritos&quot;,&#10;                    fontSize = 20.sp,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            },&#10;            navigationIcon = {&#10;                IconButton(onClick = onBackClick) {&#10;                    Icon(&#10;                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                        contentDescription = &quot;Volver&quot;&#10;                    )&#10;                }&#10;            }&#10;        )&#10;&#10;        // Content&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp)&#10;        ) {&#10;            when {&#10;                isLoading -&gt; {&#10;                    CircularProgressIndicator(&#10;                        modifier = Modifier.align(Alignment.Center)&#10;                    )&#10;                }&#10;                recursos.isEmpty() -&gt; {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxSize()&#10;                            .padding(32.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.Center&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.FavoriteBorder,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(64.dp),&#10;                            tint = MaterialTheme.colorScheme.outline&#10;                        )&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(&#10;                            text = &quot;No tienes recursos favoritos&quot;,&#10;                            style = MaterialTheme.typography.headlineSmall,&#10;                            color = MaterialTheme.colorScheme.outline&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&#10;                            text = &quot;Agrega recursos a favoritos presionando el Ã­cono del corazÃ³n&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.outline&#10;                        )&#10;                    }&#10;                }&#10;                else -&gt; {&#10;                    Column {&#10;                        Text(&#10;                            text = &quot;${recursos.size} recursos favoritos&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = MaterialTheme.colorScheme.primary,&#10;                            modifier = Modifier.padding(bottom = 16.dp)&#10;                        )&#10;&#10;                        LazyVerticalGrid(&#10;                            columns = GridCells.Fixed(2),&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalArrangement = Arrangement.spacedBy(8.dp),&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                        ) {&#10;                            items(recursos) { recurso -&gt;&#10;                                esan.mendoza.impulso.presentation.principalScreen.RecursoCard(&#10;                                    recurso = recurso,&#10;                                    categories = categories,&#10;                                    onResourceClick = onResourceClick,&#10;                                    onToggleFavorite = { recurso -&gt;&#10;                                        recursoViewModel.toggleFavorite(recurso)&#10;                                    },&#10;                                    onDeleteResource = { recursoId -&gt;&#10;                                        recursoViewModel.deleteRecursoById(recursoId)&#10;                                    },&#10;                                    onShareResource = { recurso -&gt;&#10;                                        val categoryName = categories.find { it.id == recurso.categoriaId }?.nombre&#10;                                        shareHelper(recurso, categoryName)&#10;                                    }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/homeScreen/HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/homeScreen/HomeScreen.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.presentation.homeScreen&#10;&#10;import androidx.activity.OnBackPressedCallback&#10;import androidx.activity.compose.LocalOnBackPressedDispatcherOwner&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.slideInVertically&#10;import androidx.compose.animation.slideOutVertically&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.AddRoad&#10;import androidx.compose.material.icons.filled.Category&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.DisposableEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.data.local.entities.Category&#10;import esan.mendoza.impulso.presentation.principalScreen.PrincipalScreen&#10;import esan.mendoza.impulso.presentation.resourceDetailScreen.ResourceDetailScreen&#10;import esan.mendoza.impulso.presentation.navigation.Screen&#10;import esan.mendoza.impulso.presentation.navigation.NavigationState&#10;import esan.mendoza.impulso.presentation.viewmodel.CategoryViewModel&#10;import esan.mendoza.impulso.presentation.viewmodel.RecursoViewModel&#10;import esan.mendoza.impulso.presentation.favoritesScreen.FavoritesScreen&#10;import esan.mendoza.impulso.presentation.settingsScreen.SettingsScreen&#10;&#10;@Composable&#10;fun HomeScreen(&#10;    categoryViewModel: CategoryViewModel = hiltViewModel(),&#10;    recursoViewModel: RecursoViewModel = hiltViewModel()&#10;) {&#10;    var navigationState by remember { mutableStateOf(NavigationState()) }&#10;    var fabsVisible by remember { mutableStateOf(false) }&#10;    var showAddCategoryDialog by remember { mutableStateOf(false) }&#10;    var showAddRecursoDialog by remember { mutableStateOf(false) }&#10;&#10;    // Configurar el manejo del botÃ³n de regreso del dispositivo&#10;    val backDispatcher = LocalOnBackPressedDispatcherOwner.current?.onBackPressedDispatcher&#10;&#10;    DisposableEffect(navigationState.currentScreen, backDispatcher) {&#10;        val callback = object : OnBackPressedCallback(true) {&#10;            override fun handleOnBackPressed() {&#10;                when (navigationState.currentScreen) {&#10;                    Screen.HOME -&gt; {&#10;                        // Si estamos en HOME, salir de la app (comportamiento por defecto)&#10;                        isEnabled = false&#10;                        backDispatcher?.onBackPressed()&#10;                    }&#10;                    Screen.RESOURCE_DETAIL -&gt; {&#10;                        // Regresar a HOME desde detalle de recurso&#10;                        navigationState = navigationState.copy(&#10;                            currentScreen = Screen.HOME,&#10;                            selectedRecurso = null,&#10;                            selectedCategory = null&#10;                        )&#10;                    }&#10;                    Screen.FAVORITES -&gt; {&#10;                        // Regresar a HOME desde favoritos&#10;                        navigationState = navigationState.copy(currentScreen = Screen.HOME)&#10;                    }&#10;                    Screen.SETTINGS -&gt; {&#10;                        // Regresar a HOME desde configuraciÃ³n&#10;                        navigationState = navigationState.copy(currentScreen = Screen.HOME)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        backDispatcher?.addCallback(callback)&#10;&#10;        onDispose {&#10;            callback.remove()&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        floatingActionButton = {&#10;            // Solo mostrar FAB principal en la pantalla HOME&#10;            if (navigationState.currentScreen == Screen.HOME) {&#10;                FloatingActionButton(&#10;                    onClick = {&#10;                        fabsVisible = !fabsVisible&#10;                    },&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = if (fabsVisible) Icons.Default.Close else Icons.Default.Add,&#10;                        contentDescription = if (fabsVisible) &quot;Close&quot; else &quot;Open Menu&quot;,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    ) { innerPadding -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .padding(innerPadding)&#10;                .fillMaxSize()&#10;        ) {&#10;            // Contenido principal basado en la pantalla actual&#10;            when (navigationState.currentScreen) {&#10;                Screen.HOME -&gt; {&#10;                    Column(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        PrincipalScreen(&#10;                            categoryViewModel = categoryViewModel,&#10;                            recursoViewModel = recursoViewModel,&#10;                            onResourceClick = { recurso, category -&gt;&#10;                                navigationState = navigationState.copy(&#10;                                    currentScreen = Screen.RESOURCE_DETAIL,&#10;                                    selectedRecurso = recurso,&#10;                                    selectedCategory = category&#10;                                )&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Screen.RESOURCE_DETAIL -&gt; {&#10;                    navigationState.selectedRecurso?.let { recurso -&gt;&#10;                        ResourceDetailScreen(&#10;                            recurso = recurso,&#10;                            category = navigationState.selectedCategory,&#10;                            onBackClick = {&#10;                                navigationState = navigationState.copy(&#10;                                    currentScreen = Screen.HOME,&#10;                                    selectedRecurso = null,&#10;                                    selectedCategory = null&#10;                                )&#10;                            },&#10;                            onEditClick = {&#10;                                // TODO: Implementar ediciÃ³n de recurso&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Screen.FAVORITES -&gt; {&#10;                    FavoritesScreen(&#10;                        onBackClick = {&#10;                            navigationState = navigationState.copy(currentScreen = Screen.HOME)&#10;                        },&#10;                        onResourceClick = { recurso, category -&gt;&#10;                            navigationState = navigationState.copy(&#10;                                currentScreen = Screen.RESOURCE_DETAIL,&#10;                                selectedRecurso = recurso,&#10;                                selectedCategory = category&#10;                            )&#10;                        },&#10;                        categoryViewModel = categoryViewModel,&#10;                        recursoViewModel = recursoViewModel&#10;                    )&#10;                }&#10;&#10;                Screen.SETTINGS -&gt; {&#10;                    SettingsScreen(&#10;                        onBackClick = {&#10;                            navigationState = navigationState.copy(currentScreen = Screen.HOME)&#10;                        },&#10;                        categoryViewModel = categoryViewModel&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // FABs secundarios posicionados en la esquina inferior derecha (solo en HOME)&#10;        if (navigationState.currentScreen == Screen.HOME) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(bottom = 80.dp), // Espacio para el FAB principal&#10;                contentAlignment = Alignment.BottomEnd&#10;            ) {&#10;                FABColumn(&#10;                    isVisible = fabsVisible,&#10;                    fabsEnabled = true,&#10;                    onAddCategory = { showAddCategoryDialog = true },&#10;                    onAddRecurso = { showAddRecursoDialog = true },&#10;                    onFavorites = {&#10;                        navigationState = navigationState.copy(currentScreen = Screen.FAVORITES)&#10;                        fabsVisible = false&#10;                    },&#10;                    onSettings = {&#10;                        navigationState = navigationState.copy(currentScreen = Screen.SETTINGS)&#10;                        fabsVisible = false&#10;                    }&#10;                )&#10;            }&#10;        }&#10;&#10;        // DiÃ¡logos (disponibles en todas las pantallas)&#10;        esan.mendoza.impulso.presentation.component.DialogAddCategory(&#10;            show = showAddCategoryDialog,&#10;            onDismiss = { showAddCategoryDialog = false },&#10;            onAccept = { nombre, icono -&gt;&#10;                categoryViewModel.addCategory(nombre, icono)&#10;                showAddCategoryDialog = false&#10;            }&#10;        )&#10;&#10;        esan.mendoza.impulso.presentation.component.DialogAddRecurso(&#10;            show = showAddRecursoDialog,&#10;            onDismiss = { showAddRecursoDialog = false },&#10;            onAccept = { nombre, descripcion, categoriaId, link, createdAt -&gt;&#10;                recursoViewModel.addRecurso(nombre, descripcion, categoriaId.toIntOrNull() ?: 0, link, createdAt)&#10;                showAddRecursoDialog = false&#10;            },&#10;            categoryViewModel = categoryViewModel&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CustomFAB(&#10;    icon: ImageVector,&#10;    contentDescription: String,&#10;    onClick: () -&gt; Unit,&#10;    enabled: Boolean = true&#10;) {&#10;    FloatingActionButton(&#10;        onClick = onClick,&#10;        modifier = Modifier&#10;            .padding(vertical = 2.dp, horizontal = 16.dp)&#10;            .alpha(if (enabled) 1f else 0.9f),&#10;        containerColor = if (enabled) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.surfaceVariant&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = contentDescription,&#10;            modifier = Modifier.size(24.dp),&#10;            tint = if (enabled) MaterialTheme.colorScheme.onPrimary else MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FABColumn(&#10;    isVisible: Boolean,&#10;    fabsEnabled: Boolean,&#10;    onAddCategory: () -&gt; Unit,&#10;    onAddRecurso: () -&gt; Unit,&#10;    onFavorites: () -&gt; Unit,&#10;    onSettings: () -&gt; Unit&#10;) {&#10;    AnimatedVisibility(&#10;        visible = isVisible,&#10;        enter = slideInVertically(&#10;            initialOffsetY = { it },&#10;            animationSpec = tween(300)&#10;        ) + fadeIn(animationSpec = tween(300)),&#10;        exit = slideOutVertically(&#10;            targetOffsetY = { it },&#10;            animationSpec = tween(300)&#10;        ) + fadeOut(animationSpec = tween(300))&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .padding(end = 16.dp, bottom = 65.dp),&#10;            verticalArrangement = Arrangement.spacedBy(8.dp),&#10;            horizontalAlignment = Alignment.End&#10;        ) {&#10;            CustomFAB(&#10;                icon = Icons.Default.AddRoad,&#10;                contentDescription = &quot;AÃ±adir Recurso&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onAddRecurso()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;&#10;            CustomFAB(&#10;                icon = Icons.Default.Category,&#10;                contentDescription = &quot;AÃ±adir Categoria&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onAddCategory()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;&#10;            CustomFAB(&#10;                icon = Icons.Default.Favorite,&#10;                contentDescription = &quot;Mis Favoritos&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onFavorites()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;&#10;            CustomFAB(&#10;                icon = Icons.Default.Settings,&#10;                contentDescription = &quot;ConfiguraciÃ³n de categorias y recursos&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onSettings()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package esan.mendoza.impulso.presentation.homeScreen&#10;&#10;import androidx.activity.OnBackPressedCallback&#10;import androidx.activity.compose.LocalOnBackPressedDispatcherOwner&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.slideInVertically&#10;import androidx.compose.animation.slideOutVertically&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.AddRoad&#10;import androidx.compose.material.icons.filled.Category&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.DisposableEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.data.local.entities.Category&#10;import esan.mendoza.impulso.presentation.principalScreen.PrincipalScreen&#10;import esan.mendoza.impulso.presentation.resourceDetailScreen.ResourceDetailScreen&#10;import esan.mendoza.impulso.presentation.navigation.Screen&#10;import esan.mendoza.impulso.presentation.navigation.NavigationState&#10;import esan.mendoza.impulso.presentation.viewmodel.CategoryViewModel&#10;import esan.mendoza.impulso.presentation.viewmodel.RecursoViewModel&#10;import esan.mendoza.impulso.presentation.favoritesScreen.FavoritesScreen&#10;import esan.mendoza.impulso.presentation.settingsScreen.SettingsScreen&#10;&#10;@Composable&#10;fun HomeScreen(&#10;    categoryViewModel: CategoryViewModel = hiltViewModel(),&#10;    recursoViewModel: RecursoViewModel = hiltViewModel()&#10;) {&#10;    var navigationState by remember { mutableStateOf(NavigationState()) }&#10;    var fabsVisible by remember { mutableStateOf(false) }&#10;    var showAddCategoryDialog by remember { mutableStateOf(false) }&#10;    var showAddRecursoDialog by remember { mutableStateOf(false) }&#10;&#10;    // Configurar el manejo del botÃ³n de regreso del dispositivo&#10;    val backDispatcher = LocalOnBackPressedDispatcherOwner.current?.onBackPressedDispatcher&#10;&#10;    DisposableEffect(navigationState.currentScreen, backDispatcher) {&#10;        val callback = object : OnBackPressedCallback(true) {&#10;            override fun handleOnBackPressed() {&#10;                when (navigationState.currentScreen) {&#10;                    Screen.HOME -&gt; {&#10;                        // Si estamos en HOME, salir de la app (comportamiento por defecto)&#10;                        isEnabled = false&#10;                        backDispatcher?.onBackPressed()&#10;                    }&#10;                    Screen.RESOURCE_DETAIL -&gt; {&#10;                        // Regresar a HOME desde detalle de recurso&#10;                        navigationState = navigationState.copy(&#10;                            currentScreen = Screen.HOME,&#10;                            selectedRecurso = null,&#10;                            selectedCategory = null&#10;                        )&#10;                    }&#10;                    Screen.FAVORITES -&gt; {&#10;                        // Regresar a HOME desde favoritos&#10;                        navigationState = navigationState.copy(currentScreen = Screen.HOME)&#10;                    }&#10;                    Screen.SETTINGS -&gt; {&#10;                        // Regresar a HOME desde configuraciÃ³n&#10;                        navigationState = navigationState.copy(currentScreen = Screen.HOME)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        backDispatcher?.addCallback(callback)&#10;&#10;        onDispose {&#10;            callback.remove()&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        floatingActionButton = {&#10;            // Solo mostrar FAB principal en la pantalla HOME&#10;            if (navigationState.currentScreen == Screen.HOME) {&#10;                FloatingActionButton(&#10;                    onClick = {&#10;                        fabsVisible = !fabsVisible&#10;                    },&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = if (fabsVisible) Icons.Default.Close else Icons.Default.Add,&#10;                        contentDescription = if (fabsVisible) &quot;Close&quot; else &quot;Open Menu&quot;,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    ) { innerPadding -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .padding(innerPadding)&#10;                .fillMaxSize()&#10;        ) {&#10;            // Contenido principal basado en la pantalla actual&#10;            when (navigationState.currentScreen) {&#10;                Screen.HOME -&gt; {&#10;                    Column(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        PrincipalScreen(&#10;                            categoryViewModel = categoryViewModel,&#10;                            recursoViewModel = recursoViewModel,&#10;                            onResourceClick = { recurso, category -&gt;&#10;                                navigationState = navigationState.copy(&#10;                                    currentScreen = Screen.RESOURCE_DETAIL,&#10;                                    selectedRecurso = recurso,&#10;                                    selectedCategory = category&#10;                                )&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Screen.RESOURCE_DETAIL -&gt; {&#10;                    navigationState.selectedRecurso?.let { recurso -&gt;&#10;                        ResourceDetailScreen(&#10;                            recurso = recurso,&#10;                            category = navigationState.selectedCategory,&#10;                            onBackClick = {&#10;                                navigationState = navigationState.copy(&#10;                                    currentScreen = Screen.HOME,&#10;                                    selectedRecurso = null,&#10;                                    selectedCategory = null&#10;                                )&#10;                            },&#10;                            onEditClick = {&#10;                                // TODO: Implementar ediciÃ³n de recurso&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Screen.FAVORITES -&gt; {&#10;                    FavoritesScreen(&#10;                        onBackClick = {&#10;                            navigationState = navigationState.copy(currentScreen = Screen.HOME)&#10;                        },&#10;                        onResourceClick = { recurso, category -&gt;&#10;                            navigationState = navigationState.copy(&#10;                                currentScreen = Screen.RESOURCE_DETAIL,&#10;                                selectedRecurso = recurso,&#10;                                selectedCategory = category&#10;                            )&#10;                        },&#10;                        categoryViewModel = categoryViewModel,&#10;                        recursoViewModel = recursoViewModel&#10;                    )&#10;                }&#10;&#10;                Screen.SETTINGS -&gt; {&#10;                    SettingsScreen(&#10;                        onBackClick = {&#10;                            navigationState = navigationState.copy(currentScreen = Screen.HOME)&#10;                        },&#10;                        categoryViewModel = categoryViewModel&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // FABs secundarios posicionados en la esquina inferior derecha (solo en HOME)&#10;        if (navigationState.currentScreen == Screen.HOME) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(bottom = 80.dp), // Espacio para el FAB principal&#10;                contentAlignment = Alignment.BottomEnd&#10;            ) {&#10;                FABColumn(&#10;                    isVisible = fabsVisible,&#10;                    fabsEnabled = true,&#10;                    onAddCategory = { showAddCategoryDialog = true },&#10;                    onAddRecurso = { showAddRecursoDialog = true },&#10;                    onFavorites = {&#10;                        navigationState = navigationState.copy(currentScreen = Screen.FAVORITES)&#10;                        fabsVisible = false&#10;                    },&#10;                    onSettings = {&#10;                        navigationState = navigationState.copy(currentScreen = Screen.SETTINGS)&#10;                        fabsVisible = false&#10;                    }&#10;                )&#10;            }&#10;        }&#10;&#10;        // DiÃ¡logos (disponibles en todas las pantallas)&#10;        esan.mendoza.impulso.presentation.component.DialogAddCategory(&#10;            show = showAddCategoryDialog,&#10;            onDismiss = { showAddCategoryDialog = false },&#10;            onAccept = { nombre, icono, createdAt -&gt;&#10;                val category = Category(&#10;                    id = 0, // Room generarÃ¡ el ID automÃ¡ticamente&#10;                    nombre = nombre,&#10;                    icono = icono,&#10;                    createdAt = createdAt,&#10;                    updatedAt = createdAt&#10;                )&#10;                categoryViewModel.addCategory(category)&#10;                showAddCategoryDialog = false&#10;            }&#10;        )&#10;&#10;        esan.mendoza.impulso.presentation.component.DialogAddRecurso(&#10;            show = showAddRecursoDialog,&#10;            onDismiss = { showAddRecursoDialog = false },&#10;            onAccept = { nombre, descripcion, categoriaId, link, createdAt -&gt;&#10;                val recurso = Recurso(&#10;                    id = 0, // Room generarÃ¡ el ID automÃ¡ticamente&#10;                    nombre = nombre,&#10;                    descripcion = descripcion,&#10;                    categoriaId = categoriaId.toIntOrNull() ?: 0,&#10;                    link = link,&#10;                    createdAt = createdAt,&#10;                    updatedAt = createdAt,&#10;                    isFavorite = false&#10;                )&#10;                recursoViewModel.addRecurso(recurso)&#10;                showAddRecursoDialog = false&#10;            },&#10;            categoryViewModel = categoryViewModel&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CustomFAB(&#10;    icon: ImageVector,&#10;    contentDescription: String,&#10;    onClick: () -&gt; Unit,&#10;    enabled: Boolean = true&#10;) {&#10;    FloatingActionButton(&#10;        onClick = onClick,&#10;        modifier = Modifier&#10;            .padding(vertical = 2.dp, horizontal = 16.dp)&#10;            .alpha(if (enabled) 1f else 0.9f),&#10;        containerColor = if (enabled) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.surfaceVariant&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = contentDescription,&#10;            modifier = Modifier.size(24.dp),&#10;            tint = if (enabled) MaterialTheme.colorScheme.onPrimary else MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FABColumn(&#10;    isVisible: Boolean,&#10;    fabsEnabled: Boolean,&#10;    onAddCategory: () -&gt; Unit,&#10;    onAddRecurso: () -&gt; Unit,&#10;    onFavorites: () -&gt; Unit,&#10;    onSettings: () -&gt; Unit&#10;) {&#10;    AnimatedVisibility(&#10;        visible = isVisible,&#10;        enter = slideInVertically(&#10;            initialOffsetY = { it },&#10;            animationSpec = tween(300)&#10;        ) + fadeIn(animationSpec = tween(300)),&#10;        exit = slideOutVertically(&#10;            targetOffsetY = { it },&#10;            animationSpec = tween(300)&#10;        ) + fadeOut(animationSpec = tween(300))&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .padding(end = 16.dp, bottom = 65.dp),&#10;            verticalArrangement = Arrangement.spacedBy(8.dp),&#10;            horizontalAlignment = Alignment.End&#10;        ) {&#10;            CustomFAB(&#10;                icon = Icons.Default.AddRoad,&#10;                contentDescription = &quot;AÃ±adir Recurso&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onAddRecurso()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;&#10;            CustomFAB(&#10;                icon = Icons.Default.Category,&#10;                contentDescription = &quot;AÃ±adir Categoria&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onAddCategory()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;&#10;            CustomFAB(&#10;                icon = Icons.Default.Favorite,&#10;                contentDescription = &quot;Mis Favoritos&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onFavorites()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;&#10;            CustomFAB(&#10;                icon = Icons.Default.Settings,&#10;                contentDescription = &quot;ConfiguraciÃ³n de categorias y recursos&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onSettings()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/principalScreen/PrincipalScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/principalScreen/PrincipalScreen.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.presentation.principalScreen&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.BorderAll&#10;import androidx.compose.material.icons.filled.Category&#10;import androidx.compose.material.icons.filled.DashboardCustomize&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.FavoriteBorder&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material.icons.filled.Share&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.OutlinedTextFieldDefaults&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import esan.mendoza.impulso.data.local.entities.Category&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.presentation.component.IconPicker&#10;import esan.mendoza.impulso.presentation.component.rememberShareHelper&#10;import esan.mendoza.impulso.presentation.viewmodel.CategoryViewModel&#10;import esan.mendoza.impulso.presentation.viewmodel.RecursoViewModel&#10;&#10;@Composable&#10;fun PrincipalScreen(&#10;    categoryViewModel: CategoryViewModel,&#10;    recursoViewModel: RecursoViewModel,&#10;    onResourceClick: (Recurso, esan.mendoza.impulso.data.local.entities.Category?) -&gt; Unit = { _, _ -&gt; }&#10;) {&#10;    val categories by categoryViewModel.categories.collectAsState()&#10;    val recursos by recursoViewModel.recursos.collectAsState()&#10;&#10;    // Helper para compartir recursos&#10;    val shareHelper = rememberShareHelper()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;    ) {&#10;        Row {&#10;            Icon(&#10;                imageVector = Icons.Filled.DashboardCustomize,&#10;                contentDescription = &quot;Icono de flecha hacia abajo&quot;,&#10;                modifier = Modifier&#10;                    .padding(end = 8.dp)&#10;                    .align(Alignment.CenterVertically).size(55.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Column {&#10;                Text(&#10;                    &quot;IMPULSO&quot;,&#10;                    style = MaterialTheme.typography.headlineLarge,&#10;                )&#10;                Text(&#10;                    &quot;Organiza tu universo&quot;,&#10;                    style = MaterialTheme.typography.titleSmall,&#10;                    modifier = Modifier.padding(bottom = 5.dp)&#10;                )&#10;            }&#10;&#10;        }&#10;        Spacer(modifier = Modifier.height(10.dp))&#10;        Buscador(&#10;            categories = categories,&#10;            onSearch = { query -&gt; recursoViewModel.searchRecursosByName(query) },&#10;            onCategorySelected = { categoryId -&gt; &#10;                if (categoryId == -1) {&#10;                    recursoViewModel.loadRecursos()&#10;                } else {&#10;                    recursoViewModel.loadRecursosByCategory(categoryId)&#10;                }&#10;            }&#10;        )&#10;        Spacer(modifier = Modifier.height(10.dp))&#10;&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 8.dp),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;            text = &quot;Recursos&quot;,&#10;            style = MaterialTheme.typography.titleLarge,&#10;        )&#10;            Icon(&#10;                imageVector = Icons.Default.BorderAll,&#10;                contentDescription = &quot;Icono de filtro&quot;,&#10;                modifier = Modifier&#10;                    .padding(end = 8.dp)&#10;                    .size(30.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;        }&#10;        RecursoGrid(&#10;            recursos = recursos,&#10;            categories = categories,&#10;            onResourceClick = onResourceClick,&#10;            onToggleFavorite = { recursoId -&gt;&#10;                recursoViewModel.toggleFavorite(recursoId)&#10;            },&#10;            onDeleteResource = { recursoId -&gt;&#10;                recursoViewModel.deleteRecursoById(recursoId)&#10;            },&#10;            onShareResource = { recurso -&gt;&#10;                val categoryName = categories.find { it.id == recurso.categoriaId }?.nombre&#10;                shareHelper(recurso, categoryName)&#10;            }&#10;        )&#10;&#10;    }&#10;}&#10;&#10;@Composable&#10;fun Buscador(&#10;    categories: List&lt;Category&gt; = emptyList(),&#10;    onSearch: (String) -&gt; Unit = {},&#10;    onCategorySelected: (Int) -&gt; Unit = {}&#10;) {&#10;    var selectedOption by remember { mutableStateOf(&quot;Todas las categorias&quot;) }&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    val options = listOf(&quot;Todas las categorias&quot;) + categories.map { it.nombre }&#10;&#10;    // Recargar todos los recursos cuando se selecciona &quot;Todas las categorias&quot; al inicializar&#10;    LaunchedEffect(selectedOption) {&#10;        if (selectedOption == &quot;Todas las categorias&quot;) {&#10;        onValueChange = {&#10;            searchQuery = it&#10;            onSearch(it)&#10;        },&#10;        modifier = Modifier.fillMaxWidth(),&#10;        label = { Text(&quot;Buscar&quot;) },&#10;        leadingIcon = {&#10;            Icon(&#10;                imageVector = Icons.Default.Search,&#10;                contentDescription = &quot;Ãcono de bÃºsqueda&quot;,&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;        },&#10;        singleLine = true,&#10;        shape = RoundedCornerShape(25.dp),&#10;        colors = OutlinedTextFieldDefaults.colors(&#10;            focusedBorderColor = MaterialTheme.colorScheme.primary,&#10;            unfocusedBorderColor = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f),&#10;            cursorColor = MaterialTheme.colorScheme.primary&#10;        )&#10;    )&#10;    LazyRow(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(top = 4.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        items(options.size) { index -&gt;&#10;            val option = options[index]&#10;            val isSelected = selectedOption == option&#10;            Button(&#10;                onClick = {&#10;                    selectedOption = option&#10;                    if (index == 0) {&#10;                        onCategorySelected(-1) // Todas las categorÃ­as&#10;                    } else {&#10;                        onCategorySelected(categories[index - 1].id)&#10;                    }&#10;                        onCategorySelected(-1)&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = if (isSelected) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary,&#10;                    contentColor = MaterialTheme.colorScheme.onPrimary&#10;                ),&#10;                shape = RoundedCornerShape(20.dp)&#10;            ) {&#10;                Icon(&#10;                    imageVector = if (index == 0) Icons.Default.Category else IconPicker.getIconByName(categories[index - 1].icono) ?: Icons.Default.Category,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(16.dp),&#10;                    tint = if (isSelected) MaterialTheme.colorScheme.onPrimary else MaterialTheme.colorScheme.onSecondary&#10;                )&#10;                Spacer(modifier = Modifier.width(2.dp))&#10;                Text(&#10;                    text = option,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RecursoGrid(&#10;    recursos: List&lt;Recurso&gt;,&#10;    categories: List&lt;esan.mendoza.impulso.data.local.entities.Category&gt;,&#10;    onResourceClick: (Recurso, esan.mendoza.impulso.data.local.entities.Category?) -&gt; Unit = { _, _ -&gt; },&#10;    onToggleFavorite: (Int) -&gt; Unit = {},&#10;    onDeleteResource: (Int) -&gt; Unit = {},&#10;    onShareResource: (Recurso) -&gt; Unit = {}&#10;) {&#10;    LazyVerticalGrid(&#10;        columns = GridCells.Fixed(2),&#10;        modifier = Modifier.fillMaxWidth(),&#10;        verticalArrangement = Arrangement.spacedBy(3.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(3.dp)&#10;    ) {&#10;        items(recursos) { recurso -&gt;&#10;            RecursoCard(&#10;                recurso = recurso,&#10;                categories = categories,&#10;                onResourceClick = onResourceClick,&#10;                onToggleFavorite = onToggleFavorite,&#10;                onDeleteResource = onDeleteResource,&#10;                onShareResource = onShareResource&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;fun formatFecha(fecha: String): String {&#10;    return DateUtils.formatForDisplay(fecha)&#10;}&#10;&#10;@Composable&#10;fun RecursoCard(&#10;    recurso: Recurso,&#10;    categories: List&lt;esan.mendoza.impulso.data.local.entities.Category&gt;,&#10;    onResourceClick: (Recurso, esan.mendoza.impulso.data.local.entities.Category?) -&gt; Unit = { _, _ -&gt; },&#10;    onToggleFavorite: (Int) -&gt; Unit = {},&#10;    onDeleteResource: (Int) -&gt; Unit = {},&#10;    onShareResource: (Recurso) -&gt; Unit = {} // Removiendo @Composable del parÃ¡metro&#10;    // Corrige el desfase de dÃ­a restando 1 dÃ­a a la fecha registrada&#10;    return try {&#10;        val parser = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;        val date = parser.parse(fecha)&#10;        val calendar = java.util.Calendar.getInstance()&#10;        calendar.time = date!!&#10;        calendar.add(java.util.Calendar.DAY_OF_MONTH, -1) // Resta un dÃ­a&#10;        val formatter = SimpleDateFormat(&quot;yyyy/MM/dd&quot;, Locale.getDefault())&#10;        formatter.format(calendar.time)&#10;    } catch (e: Exception) {&#10;        fecha // Si falla, muestra la fecha original&#10;    }&#10;    val categoriaNombre = categories.find { it.id == recurso.categoriaId }?.nombre ?: &quot;Sin categorÃ­a&quot;&#10;    val categoria = categories.find { it.id == recurso.categoriaId }&#10;    val categoryIcon = categoria?.let {&#10;        IconPicker.getIconByName(it.icono) ?: Icons.Default.Category&#10;    } ?: Icons.Default.Category&#10;&#10;    // Verificar si es el recurso de ejemplo&#10;    val isExampleResource = recurso.id == -1&#10;&#10;    Column {&#10;        Card(&#10;            modifier = Modifier&#10;                .padding(4.dp)&#10;                .fillMaxWidth()&#10;                .height(120.dp),&#10;            shape = RoundedCornerShape(16.dp),&#10;            onClick = {&#10;                // Solo permitir clic en recursos reales, no en el ejemplo&#10;                if (!isExampleResource) {&#10;                    onResourceClick(recurso, categoria)&#10;                }&#10;            }&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(8.dp)&#10;            ) {&#10;&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth(),&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.SpaceBetween&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .background(&#10;                                color = if (isExampleResource)&#10;                                    MaterialTheme.colorScheme.tertiary.copy(alpha = 0.1f)&#10;                                else&#10;                                    MaterialTheme.colorScheme.primary.copy(alpha = 0.1f),&#10;                                shape = RoundedCornerShape(8.dp)&#10;                            )&#10;                            .border(&#10;                                width = 1.dp,&#10;                                color = if (isExampleResource)&#10;                                    MaterialTheme.colorScheme.tertiary&#10;                                else&#10;                                    MaterialTheme.colorScheme.primary,&#10;                                shape = RoundedCornerShape(8.dp)&#10;                            ),&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier.padding(horizontal = 6.dp, vertical = 2.dp),&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = categoryIcon,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(12.dp),&#10;                                tint = if (isExampleResource)&#10;                                    MaterialTheme.colorScheme.tertiary&#10;                                else&#10;                                    MaterialTheme.colorScheme.primary&#10;                            )&#10;                            Text(&#10;                                text = categoriaNombre,&#10;                                style = MaterialTheme.typography.labelSmall,&#10;                                color = if (isExampleResource)&#10;                                    MaterialTheme.colorScheme.tertiary&#10;                                else&#10;                                    MaterialTheme.colorScheme.primary,&#10;                                maxLines = 1,&#10;                                overflow = TextOverflow.Ellipsis&#10;                            )&#10;                        }&#10;                    }&#10;                    Row {&#10;                        if (!isExampleResource) {&#10;                            IconButton(&#10;                                onClick = { onToggleFavorite(recurso.id) },&#10;                                modifier = Modifier.size(24.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = if (recurso.isFavorite) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                                    contentDescription = &quot;Favorito&quot;,&#10;                                    modifier = Modifier.size(16.dp),&#10;                                    tint = if (recurso.isFavorite) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.primary&#10;                                )&#10;                            }&#10;                            IconButton(&#10;                                onClick = { onShareResource(recurso) },&#10;                                modifier = Modifier.size(24.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Share,&#10;                                    contentDescription = &quot;Compartir&quot;,&#10;                                    modifier = Modifier.size(16.dp),&#10;                                    tint = MaterialTheme.colorScheme.primary&#10;                                )&#10;                            }&#10;                        } else {&#10;                            // Para el ejemplo, mostrar iconos deshabilitados&#10;                            Icon(&#10;                                imageVector = Icons.Default.FavoriteBorder,&#10;                                contentDescription = &quot;Ejemplo&quot;,&#10;                                modifier = Modifier.size(16.dp),&#10;                                tint = MaterialTheme.colorScheme.outline&#10;                            )&#10;                            Spacer(modifier = Modifier.width(4.dp))&#10;                            Icon(&#10;                                imageVector = Icons.Default.Share,&#10;                                contentDescription = &quot;Ejemplo&quot;,&#10;                                modifier = Modifier.size(16.dp),&#10;                                tint = MaterialTheme.colorScheme.outline&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = recurso.nombre,&#10;                    style = MaterialTheme.typography.titleSmall,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    color = if (isExampleResource)&#10;                        MaterialTheme.colorScheme.tertiary&#10;                    else&#10;                        MaterialTheme.colorScheme.onSurface&#10;                )&#10;&#10;                HorizontalDivider(&#10;                    modifier = Modifier.padding(vertical = 2.dp),&#10;                    color = if (isExampleResource)&#10;                        MaterialTheme.colorScheme.tertiary.copy(alpha = 0.5f)&#10;                    else&#10;                        MaterialTheme.colorScheme.outline.copy(alpha = 0.5f)&#10;                )&#10;                Text(&#10;                    text = recurso.descripcion,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    maxLines = 3,&#10;                    overflow = TextOverflow.Ellipsis,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    color = if (isExampleResource)&#10;                        MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                    else&#10;                        MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;        }&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 8.dp, vertical = 2.dp),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.DateRange,&#10;                    contentDescription = &quot;Icono de recurso&quot;,&#10;                    modifier = Modifier.size(10.dp),&#10;                    tint = if (isExampleResource)&#10;                        MaterialTheme.colorScheme.tertiary&#10;                    else&#10;                        MaterialTheme.colorScheme.primary&#10;                )&#10;                Text(&#10;                    text = formatFecha(recurso.createdAt),&#10;                    style = MaterialTheme.typography.labelSmall,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis,&#10;                    color = if (isExampleResource)&#10;                        MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                    else&#10;                        MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;            IconButton(&#10;                onClick = {&#10;                    if (!isExampleResource) {&#10;                        onDeleteResource(recurso.id)&#10;                    }&#10;                },&#10;                modifier = Modifier.size(20.dp)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Delete,&#10;                    contentDescription = &quot;Eliminar recurso&quot;,&#10;                    modifier = Modifier.size(16.dp),&#10;                    tint = if (isExampleResource)&#10;                        MaterialTheme.colorScheme.outline&#10;                    else&#10;                        MaterialTheme.colorScheme.error&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package esan.mendoza.impulso.presentation.principalScreen&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.BorderAll&#10;import androidx.compose.material.icons.filled.Category&#10;import androidx.compose.material.icons.filled.DashboardCustomize&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.FavoriteBorder&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material.icons.filled.Share&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.OutlinedTextFieldDefaults&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import esan.mendoza.impulso.data.local.entities.Category&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.presentation.component.IconPicker&#10;import esan.mendoza.impulso.presentation.component.rememberShareHelper&#10;import esan.mendoza.impulso.presentation.viewmodel.CategoryViewModel&#10;import esan.mendoza.impulso.presentation.viewmodel.RecursoViewModel&#10;import esan.mendoza.impulso.utils.DateUtils&#10;&#10;@Composable&#10;fun PrincipalScreen(&#10;    categoryViewModel: CategoryViewModel,&#10;    recursoViewModel: RecursoViewModel,&#10;    onResourceClick: (Recurso, esan.mendoza.impulso.data.local.entities.Category?) -&gt; Unit = { _, _ -&gt; }&#10;) {&#10;    val categories by categoryViewModel.categories.collectAsState()&#10;    val recursos by recursoViewModel.recursos.collectAsState()&#10;&#10;    // Helper para compartir recursos&#10;    val shareHelper = rememberShareHelper()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;    ) {&#10;        Row {&#10;            Icon(&#10;                imageVector = Icons.Filled.DashboardCustomize,&#10;                contentDescription = &quot;Icono de flecha hacia abajo&quot;,&#10;                modifier = Modifier&#10;                    .padding(end = 8.dp)&#10;                    .align(Alignment.CenterVertically).size(55.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Column {&#10;                Text(&#10;                    &quot;IMPULSO&quot;,&#10;                    style = MaterialTheme.typography.headlineLarge,&#10;                )&#10;                Text(&#10;                    &quot;Organiza tu universo&quot;,&#10;                    style = MaterialTheme.typography.titleSmall,&#10;                    modifier = Modifier.padding(bottom = 5.dp)&#10;                )&#10;            }&#10;&#10;        }&#10;        Spacer(modifier = Modifier.height(10.dp))&#10;        Buscador(&#10;            categories = categories,&#10;            onSearch = { query -&gt; recursoViewModel.searchRecursosByName(query) },&#10;            onCategorySelected = { categoryId -&gt; &#10;                if (categoryId == -1) {&#10;                    recursoViewModel.loadRecursos()&#10;                } else {&#10;                    recursoViewModel.loadRecursosByCategory(categoryId)&#10;                }&#10;            }&#10;        )&#10;        Spacer(modifier = Modifier.height(10.dp))&#10;&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 8.dp),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;            text = &quot;Recursos&quot;,&#10;            style = MaterialTheme.typography.titleLarge,&#10;        )&#10;            Icon(&#10;                imageVector = Icons.Default.BorderAll,&#10;                contentDescription = &quot;Icono de filtro&quot;,&#10;                modifier = Modifier&#10;                    .padding(end = 8.dp)&#10;                    .size(30.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;        }&#10;        RecursoGrid(&#10;            recursos = recursos,&#10;            categories = categories,&#10;            onResourceClick = onResourceClick,&#10;            onToggleFavorite = { recurso -&gt;&#10;                recursoViewModel.toggleFavorite(recurso)&#10;            },&#10;            onDeleteResource = { recursoId -&gt;&#10;                recursoViewModel.deleteRecursoById(recursoId)&#10;            },&#10;            onShareResource = { recurso -&gt;&#10;                val categoryName = categories.find { it.id == recurso.categoriaId }?.nombre&#10;                shareHelper(recurso, categoryName)&#10;            }&#10;        )&#10;&#10;    }&#10;}&#10;&#10;@Composable&#10;fun Buscador(&#10;    categories: List&lt;Category&gt; = emptyList(),&#10;    onSearch: (String) -&gt; Unit = {},&#10;    onCategorySelected: (Int) -&gt; Unit = {}&#10;) {&#10;    var selectedOption by remember { mutableStateOf(&quot;Todas las categorias&quot;) }&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    val options = listOf(&quot;Todas las categorias&quot;) + categories.map { it.nombre }&#10;&#10;    // Recargar todos los recursos cuando se selecciona &quot;Todas las categorias&quot; al inicializar&#10;    LaunchedEffect(selectedOption) {&#10;        if (selectedOption == &quot;Todas las categorias&quot;) {&#10;            onCategorySelected(-1)&#10;        }&#10;    }&#10;&#10;    // Campo de bÃºsqueda con Ã­cono integrado&#10;    OutlinedTextField(&#10;        value = searchQuery,&#10;        onValueChange = {&#10;            searchQuery = it&#10;            onSearch(it)&#10;        },&#10;        modifier = Modifier.fillMaxWidth(),&#10;        label = { Text(&quot;Buscar&quot;) },&#10;        leadingIcon = {&#10;            Icon(&#10;                imageVector = Icons.Default.Search,&#10;                contentDescription = &quot;Ãcono de bÃºsqueda&quot;,&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;        },&#10;        singleLine = true,&#10;        shape = RoundedCornerShape(25.dp),&#10;        colors = OutlinedTextFieldDefaults.colors(&#10;            focusedBorderColor = MaterialTheme.colorScheme.primary,&#10;            unfocusedBorderColor = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f),&#10;            cursorColor = MaterialTheme.colorScheme.primary&#10;        )&#10;    )&#10;    LazyRow(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(top = 4.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        items(options.size) { index -&gt;&#10;            val option = options[index]&#10;            val isSelected = selectedOption == option&#10;            Button(&#10;                onClick = {&#10;                    selectedOption = option&#10;                    if (index == 0) {&#10;                        onCategorySelected(-1) // Todas las categorÃ­as&#10;                    } else {&#10;                        onCategorySelected(categories[index - 1].id)&#10;                    }&#10;                },&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = if (isSelected) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary,&#10;                    contentColor = MaterialTheme.colorScheme.onPrimary&#10;                ),&#10;                shape = RoundedCornerShape(20.dp)&#10;            ) {&#10;                Icon(&#10;                    imageVector = if (index == 0) Icons.Default.Category else IconPicker.getIconByName(categories[index - 1].icono) ?: Icons.Default.Category,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(16.dp),&#10;                    tint = if (isSelected) MaterialTheme.colorScheme.onPrimary else MaterialTheme.colorScheme.onSecondary&#10;                )&#10;                Spacer(modifier = Modifier.width(2.dp))&#10;                Text(&#10;                    text = option,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RecursoGrid(&#10;    recursos: List&lt;Recurso&gt;,&#10;    categories: List&lt;esan.mendoza.impulso.data.local.entities.Category&gt;,&#10;    onResourceClick: (Recurso, esan.mendoza.impulso.data.local.entities.Category?) -&gt; Unit = { _, _ -&gt; },&#10;    onToggleFavorite: (Recurso) -&gt; Unit = {},&#10;    onDeleteResource: (Int) -&gt; Unit = {},&#10;    onShareResource: (Recurso) -&gt; Unit = {}&#10;) {&#10;    LazyVerticalGrid(&#10;        columns = GridCells.Fixed(2),&#10;        modifier = Modifier.fillMaxWidth(),&#10;        verticalArrangement = Arrangement.spacedBy(3.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(3.dp)&#10;    ) {&#10;        items(recursos) { recurso -&gt;&#10;            RecursoCard(&#10;                recurso = recurso,&#10;                categories = categories,&#10;                onResourceClick = onResourceClick,&#10;                onToggleFavorite = onToggleFavorite,&#10;                onDeleteResource = onDeleteResource,&#10;                onShareResource = onShareResource&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;fun formatFecha(fecha: String): String {&#10;    return DateUtils.formatForDisplay(fecha)&#10;}&#10;&#10;@Composable&#10;fun RecursoCard(&#10;    recurso: Recurso,&#10;    categories: List&lt;esan.mendoza.impulso.data.local.entities.Category&gt;,&#10;    onResourceClick: (Recurso, esan.mendoza.impulso.data.local.entities.Category?) -&gt; Unit = { _, _ -&gt; },&#10;    onToggleFavorite: (Recurso) -&gt; Unit = {},&#10;    onDeleteResource: (Int) -&gt; Unit = {},&#10;    onShareResource: (Recurso) -&gt; Unit = {} // Removiendo @Composable del parÃ¡metro&#10;) {&#10;    val categoriaNombre = categories.find { it.id == recurso.categoriaId }?.nombre ?: &quot;Sin categorÃ­a&quot;&#10;    val categoria = categories.find { it.id == recurso.categoriaId }&#10;    val categoryIcon = categoria?.let {&#10;        IconPicker.getIconByName(it.icono) ?: Icons.Default.Category&#10;    } ?: Icons.Default.Category&#10;&#10;    // Verificar si es el recurso de ejemplo&#10;    val isExampleResource = recurso.id == -1&#10;&#10;    Column {&#10;        Card(&#10;            modifier = Modifier&#10;                .padding(4.dp)&#10;                .fillMaxWidth()&#10;                .height(120.dp),&#10;            shape = RoundedCornerShape(16.dp),&#10;            onClick = {&#10;                // Solo permitir clic en recursos reales, no en el ejemplo&#10;                if (!isExampleResource) {&#10;                    onResourceClick(recurso, categoria)&#10;                }&#10;            }&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(8.dp)&#10;            ) {&#10;&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth(),&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.SpaceBetween&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .background(&#10;                                color = if (isExampleResource)&#10;                                    MaterialTheme.colorScheme.tertiary.copy(alpha = 0.1f)&#10;                                else&#10;                                    MaterialTheme.colorScheme.primary.copy(alpha = 0.1f),&#10;                                shape = RoundedCornerShape(8.dp)&#10;                            )&#10;                            .border(&#10;                                width = 1.dp,&#10;                                color = if (isExampleResource)&#10;                                    MaterialTheme.colorScheme.tertiary&#10;                                else&#10;                                    MaterialTheme.colorScheme.primary,&#10;                                shape = RoundedCornerShape(8.dp)&#10;                            ),&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier.padding(horizontal = 6.dp, vertical = 2.dp),&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = categoryIcon,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(12.dp),&#10;                                tint = if (isExampleResource)&#10;                                    MaterialTheme.colorScheme.tertiary&#10;                                else&#10;                                    MaterialTheme.colorScheme.primary&#10;                            )&#10;                            Text(&#10;                                text = categoriaNombre,&#10;                                style = MaterialTheme.typography.labelSmall,&#10;                                color = if (isExampleResource)&#10;                                    MaterialTheme.colorScheme.tertiary&#10;                                else&#10;                                    MaterialTheme.colorScheme.primary,&#10;                                maxLines = 1,&#10;                                overflow = TextOverflow.Ellipsis&#10;                            )&#10;                        }&#10;                    }&#10;                    Row {&#10;                        if (!isExampleResource) {&#10;                            IconButton(&#10;                                onClick = { onToggleFavorite(recurso) },&#10;                                modifier = Modifier.size(24.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = if (recurso.isFavorite) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                                    contentDescription = &quot;Favorito&quot;,&#10;                                    modifier = Modifier.size(16.dp),&#10;                                    tint = if (recurso.isFavorite) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.primary&#10;                                )&#10;                            }&#10;                            IconButton(&#10;                                onClick = { onShareResource(recurso) },&#10;                                modifier = Modifier.size(24.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Share,&#10;                                    contentDescription = &quot;Compartir&quot;,&#10;                                    modifier = Modifier.size(16.dp),&#10;                                    tint = MaterialTheme.colorScheme.primary&#10;                                )&#10;                            }&#10;                        } else {&#10;                            // Para el ejemplo, mostrar iconos deshabilitados&#10;                            Icon(&#10;                                imageVector = Icons.Default.FavoriteBorder,&#10;                                contentDescription = &quot;Ejemplo&quot;,&#10;                                modifier = Modifier.size(16.dp),&#10;                                tint = MaterialTheme.colorScheme.outline&#10;                            )&#10;                            Spacer(modifier = Modifier.width(4.dp))&#10;                            Icon(&#10;                                imageVector = Icons.Default.Share,&#10;                                contentDescription = &quot;Ejemplo&quot;,&#10;                                modifier = Modifier.size(16.dp),&#10;                                tint = MaterialTheme.colorScheme.outline&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = recurso.nombre,&#10;                    style = MaterialTheme.typography.titleSmall,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    color = if (isExampleResource)&#10;                        MaterialTheme.colorScheme.tertiary&#10;                    else&#10;                        MaterialTheme.colorScheme.onSurface&#10;                )&#10;&#10;                HorizontalDivider(&#10;                    modifier = Modifier.padding(vertical = 2.dp),&#10;                    color = if (isExampleResource)&#10;                        MaterialTheme.colorScheme.tertiary.copy(alpha = 0.5f)&#10;                    else&#10;                        MaterialTheme.colorScheme.outline.copy(alpha = 0.5f)&#10;                )&#10;                Text(&#10;                    text = recurso.descripcion,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    maxLines = 3,&#10;                    overflow = TextOverflow.Ellipsis,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    color = if (isExampleResource)&#10;                        MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                    else&#10;                        MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;        }&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 8.dp, vertical = 2.dp),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.DateRange,&#10;                    contentDescription = &quot;Icono de recurso&quot;,&#10;                    modifier = Modifier.size(10.dp),&#10;                    tint = if (isExampleResource)&#10;                        MaterialTheme.colorScheme.tertiary&#10;                    else&#10;                        MaterialTheme.colorScheme.primary&#10;                )&#10;                Text(&#10;                    text = formatFecha(recurso.createdAt),&#10;                    style = MaterialTheme.typography.labelSmall,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis,&#10;                    color = if (isExampleResource)&#10;                        MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                    else&#10;                        MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;            IconButton(&#10;                onClick = {&#10;                    if (!isExampleResource) {&#10;                        onDeleteResource(recurso.id)&#10;                    }&#10;                },&#10;                modifier = Modifier.size(20.dp)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Delete,&#10;                    contentDescription = &quot;Eliminar recurso&quot;,&#10;                    modifier = Modifier.size(16.dp),&#10;                    tint = if (isExampleResource)&#10;                        MaterialTheme.colorScheme.outline&#10;                    else&#10;                        MaterialTheme.colorScheme.error&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/resourceDetailScreen/ResourceDetailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/resourceDetailScreen/ResourceDetailScreen.kt" />
              <option name="originalContent" value="    recurso: Recurso,&#10;" />
              <option name="updatedContent" value="package esan.mendoza.impulso.presentation.resourceDetailScreen&#13;&#10;&#13;&#10;import androidx.compose.foundation.layout.*&#13;&#10;import androidx.compose.foundation.lazy.LazyRow&#13;&#10;import androidx.compose.foundation.lazy.items&#13;&#10;import androidx.compose.foundation.rememberScrollState&#13;&#10;import androidx.compose.foundation.verticalScroll&#13;&#10;import androidx.compose.material.icons.Icons&#13;&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#13;&#10;import androidx.compose.material.icons.filled.*&#13;&#10;import androidx.compose.material3.*&#13;&#10;import androidx.compose.runtime.*&#13;&#10;import androidx.compose.ui.Alignment&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.compose.ui.platform.LocalClipboardManager&#13;&#10;import androidx.compose.ui.platform.LocalUriHandler&#13;&#10;import androidx.compose.ui.text.AnnotatedString&#13;&#10;import androidx.compose.ui.text.font.FontWeight&#13;&#10;import androidx.compose.ui.text.style.TextAlign&#13;&#10;import androidx.compose.ui.text.style.TextOverflow&#13;&#10;import androidx.compose.ui.unit.dp&#13;&#10;import androidx.compose.ui.unit.sp&#13;&#10;import androidx.hilt.navigation.compose.hiltViewModel&#13;&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#13;&#10;import esan.mendoza.impulso.data.local.entities.Category&#13;&#10;import esan.mendoza.impulso.presentation.component.DialogEditRecurso&#13;&#10;import esan.mendoza.impulso.presentation.component.IconPicker&#13;&#10;import esan.mendoza.impulso.presentation.component.rememberShareHelper&#13;&#10;import esan.mendoza.impulso.presentation.viewmodel.RecursoViewModel&#13;&#10;import esan.mendoza.impulso.presentation.viewmodel.CategoryViewModel&#13;&#10;import esan.mendoza.impulso.utils.DateUtils&#13;&#10;&#13;&#10;@OptIn(ExperimentalMaterial3Api::class)&#13;&#10;@Composable&#13;&#10;fun ResourceDetailScreen(&#13;&#10;    recurso: Recurso,&#13;&#10;    category: Category?,&#13;&#10;    onBackClick: () -&gt; Unit,&#13;&#10;    onEditClick: () -&gt; Unit = {},&#13;&#10;    recursoViewModel: RecursoViewModel = hiltViewModel(),&#13;&#10;    categoryViewModel: CategoryViewModel = hiltViewModel()&#13;&#10;) {&#13;&#10;    val scrollState = rememberScrollState()&#13;&#10;    val clipboardManager = LocalClipboardManager.current&#13;&#10;    val uriHandler = LocalUriHandler.current&#13;&#10;&#13;&#10;    // Estados para diÃ¡logos&#13;&#10;    var showDeleteDialog by remember { mutableStateOf(false) }&#13;&#10;    var showEditDialog by remember { mutableStateOf(false) }&#13;&#10;&#13;&#10;    // Helper para compartir&#13;&#10;    val shareHelper = rememberShareHelper()&#13;&#10;&#13;&#10;    // Recursos relacionados de la misma categorÃ­a&#13;&#10;    val relatedResources by recursoViewModel.recursos.collectAsState()&#13;&#10;    val categories by categoryViewModel.categories.collectAsState()&#13;&#10;&#13;&#10;    // Cargar recursos de la misma categorÃ­a&#13;&#10;    LaunchedEffect(recurso.categoriaId) {&#13;&#10;        if (recurso.categoriaId != -1) {&#13;&#10;            recursoViewModel.loadRecursosByCategory(recurso.categoriaId)&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // Filtrar recursos relacionados (excluir el actual)&#13;&#10;    val filteredRelatedResources = relatedResources.filter {&#13;&#10;        it.id != recurso.id &amp;&amp; it.categoriaId == recurso.categoriaId&#13;&#10;    }&#13;&#10;&#13;&#10;    Column(&#13;&#10;        modifier = Modifier&#13;&#10;            .fillMaxSize()&#13;&#10;            .verticalScroll(scrollState)&#13;&#10;    ) {&#13;&#10;        // Top Bar&#13;&#10;        TopAppBar(&#13;&#10;            title = {&#13;&#10;                Text(&#13;&#10;                    &quot;Detalle del Recurso&quot;,&#13;&#10;                    fontWeight = FontWeight.Bold&#13;&#10;                )&#13;&#10;            },&#13;&#10;            navigationIcon = {&#13;&#10;                IconButton(onClick = onBackClick) {&#13;&#10;                    Icon(&#13;&#10;                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#13;&#10;                        contentDescription = &quot;Volver&quot;&#13;&#10;                    )&#13;&#10;                }&#13;&#10;            },&#13;&#10;            actions = {&#13;&#10;                // BotÃ³n Compartir&#13;&#10;                IconButton(&#13;&#10;                    onClick = {&#13;&#10;                        shareHelper(recurso, category?.nombre)&#13;&#10;                    }&#13;&#10;                ) {&#13;&#10;                    Icon(&#13;&#10;                        imageVector = Icons.Default.Share,&#13;&#10;                        contentDescription = &quot;Compartir recurso&quot;,&#13;&#10;                        tint = MaterialTheme.colorScheme.primary&#13;&#10;                    )&#13;&#10;                }&#13;&#10;&#13;&#10;                // BotÃ³n Editar&#13;&#10;                IconButton(&#13;&#10;                    onClick = { showEditDialog = true }&#13;&#10;                ) {&#13;&#10;                    Icon(&#13;&#10;                        imageVector = Icons.Default.Edit,&#13;&#10;                        contentDescription = &quot;Editar recurso&quot;,&#13;&#10;                        tint = MaterialTheme.colorScheme.primary&#13;&#10;                    )&#13;&#10;                }&#13;&#10;&#13;&#10;                // BotÃ³n Eliminar&#13;&#10;                IconButton(&#13;&#10;                    onClick = { showDeleteDialog = true }&#13;&#10;                ) {&#13;&#10;                    Icon(&#13;&#10;                        imageVector = Icons.Default.Delete,&#13;&#10;                        contentDescription = &quot;Eliminar recurso&quot;,&#13;&#10;                        tint = MaterialTheme.colorScheme.error&#13;&#10;                    )&#13;&#10;                }&#13;&#10;            }&#13;&#10;        )&#13;&#10;&#13;&#10;        // Content&#13;&#10;        Column(&#13;&#10;            modifier = Modifier&#13;&#10;                .fillMaxSize()&#13;&#10;                .padding(16.dp),&#13;&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#13;&#10;        ) {&#13;&#10;            // Header Card con Ã­cono de categorÃ­a&#13;&#10;            Card(&#13;&#10;                modifier = Modifier.fillMaxWidth(),&#13;&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 6.dp),&#13;&#10;                colors = CardDefaults.cardColors(&#13;&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer&#13;&#10;                )&#13;&#10;            ) {&#13;&#10;                Column(&#13;&#10;                    modifier = Modifier&#13;&#10;                        .fillMaxWidth()&#13;&#10;                        .padding(20.dp)&#13;&#10;                ) {&#13;&#10;                    Row(&#13;&#10;                        modifier = Modifier.fillMaxWidth(),&#13;&#10;                        verticalAlignment = Alignment.Top,&#13;&#10;                        horizontalArrangement = Arrangement.SpaceBetween&#13;&#10;                    ) {&#13;&#10;                        Column(&#13;&#10;                            modifier = Modifier.weight(1f)&#13;&#10;                        ) {&#13;&#10;                            Text(&#13;&#10;                                text = recurso.nombre,&#13;&#10;                                fontSize = 24.sp,&#13;&#10;                                fontWeight = FontWeight.Bold,&#13;&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer,&#13;&#10;                                lineHeight = 28.sp&#13;&#10;                            )&#13;&#10;&#13;&#10;                            Spacer(modifier = Modifier.height(8.dp))&#13;&#10;&#13;&#10;                            category?.let { cat -&gt;&#13;&#10;                                Row(&#13;&#10;                                    verticalAlignment = Alignment.CenterVertically,&#13;&#10;                                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#13;&#10;                                ) {&#13;&#10;                                    val categoryIcon = IconPicker.getIconByName(cat.icono) ?: Icons.Default.Category&#13;&#10;                                    Icon(&#13;&#10;                                        imageVector = categoryIcon,&#13;&#10;                                        contentDescription = null,&#13;&#10;                                        modifier = Modifier.size(16.dp),&#13;&#10;                                        tint = MaterialTheme.colorScheme.primary&#13;&#10;                                    )&#13;&#10;                                    Text(&#13;&#10;                                        text = cat.nombre,&#13;&#10;                                        fontSize = 14.sp,&#13;&#10;                                        color = MaterialTheme.colorScheme.primary,&#13;&#10;                                        fontWeight = FontWeight.Medium&#13;&#10;                                    )&#13;&#10;                                }&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;&#13;&#10;                        // BotÃ³n de favorito&#13;&#10;                        IconButton(&#13;&#10;                            onClick = {&#13;&#10;                                recursoViewModel.toggleFavorite(recurso)&#13;&#10;                            }&#13;&#10;                        ) {&#13;&#10;                            Icon(&#13;&#10;                                imageVector = if (recurso.isFavorite) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#13;&#10;                                contentDescription = &quot;Favorito&quot;,&#13;&#10;                                modifier = Modifier.size(28.dp),&#13;&#10;                                tint = if (recurso.isFavorite) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.primary&#13;&#10;                            )&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            // Description Card&#13;&#10;            Card(&#13;&#10;                modifier = Modifier.fillMaxWidth(),&#13;&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#13;&#10;            ) {&#13;&#10;                Column(&#13;&#10;                    modifier = Modifier&#13;&#10;                        .fillMaxWidth()&#13;&#10;                        .padding(16.dp)&#13;&#10;                ) {&#13;&#10;                    Row(&#13;&#10;                        verticalAlignment = Alignment.CenterVertically,&#13;&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp)&#13;&#10;                    ) {&#13;&#10;                        Icon(&#13;&#10;                            imageVector = Icons.Default.Description,&#13;&#10;                            contentDescription = null,&#13;&#10;                            tint = MaterialTheme.colorScheme.primary&#13;&#10;                        )&#13;&#10;                        Text(&#13;&#10;                            text = &quot;DescripciÃ³n&quot;,&#13;&#10;                            fontSize = 18.sp,&#13;&#10;                            fontWeight = FontWeight.SemiBold,&#13;&#10;                            color = MaterialTheme.colorScheme.primary&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;&#13;&#10;                    Spacer(modifier = Modifier.height(12.dp))&#13;&#10;&#13;&#10;                    Text(&#13;&#10;                        text = recurso.descripcion,&#13;&#10;                        fontSize = 16.sp,&#13;&#10;                        lineHeight = 24.sp,&#13;&#10;                        color = MaterialTheme.colorScheme.onSurface&#13;&#10;                    )&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            // Link Card (solo si tiene enlace)&#13;&#10;            if (recurso.link.isNotBlank()) {&#13;&#10;                Card(&#13;&#10;                    modifier = Modifier.fillMaxWidth(),&#13;&#10;                    elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#13;&#10;                ) {&#13;&#10;                    Column(&#13;&#10;                        modifier = Modifier&#13;&#10;                            .fillMaxWidth()&#13;&#10;                            .padding(16.dp)&#13;&#10;                    ) {&#13;&#10;                        Row(&#13;&#10;                            verticalAlignment = Alignment.CenterVertically,&#13;&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp)&#13;&#10;                        ) {&#13;&#10;                            Icon(&#13;&#10;                                imageVector = Icons.Default.Link,&#13;&#10;                                contentDescription = null,&#13;&#10;                                tint = MaterialTheme.colorScheme.primary&#13;&#10;                            )&#13;&#10;                            Text(&#13;&#10;                                text = &quot;Enlace&quot;,&#13;&#10;                                fontSize = 18.sp,&#13;&#10;                                fontWeight = FontWeight.SemiBold,&#13;&#10;                                color = MaterialTheme.colorScheme.primary&#13;&#10;                            )&#13;&#10;                        }&#13;&#10;&#13;&#10;                        Spacer(modifier = Modifier.height(12.dp))&#13;&#10;&#13;&#10;                        Row(&#13;&#10;                            modifier = Modifier.fillMaxWidth(),&#13;&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp),&#13;&#10;                            verticalAlignment = Alignment.CenterVertically&#13;&#10;                        ) {&#13;&#10;                            Text(&#13;&#10;                                text = recurso.link,&#13;&#10;                                fontSize = 14.sp,&#13;&#10;                                color = MaterialTheme.colorScheme.primary,&#13;&#10;                                modifier = Modifier.weight(1f),&#13;&#10;                                maxLines = 2,&#13;&#10;                                overflow = TextOverflow.Ellipsis&#13;&#10;                            )&#13;&#10;&#13;&#10;                            // BotÃ³n copiar&#13;&#10;                            IconButton(&#13;&#10;                                onClick = {&#13;&#10;                                    clipboardManager.setText(AnnotatedString(recurso.link))&#13;&#10;                                }&#13;&#10;                            ) {&#13;&#10;                                Icon(&#13;&#10;                                    imageVector = Icons.Default.ContentCopy,&#13;&#10;                                    contentDescription = &quot;Copiar enlace&quot;,&#13;&#10;                                    tint = MaterialTheme.colorScheme.primary&#13;&#10;                                )&#13;&#10;                            }&#13;&#10;&#13;&#10;                            // BotÃ³n abrir&#13;&#10;                            IconButton(&#13;&#10;                                onClick = {&#13;&#10;                                    try {&#13;&#10;                                        uriHandler.openUri(recurso.link)&#13;&#10;                                    } catch (e: Exception) {&#13;&#10;                                        // Handle error&#13;&#10;                                    }&#13;&#10;                                }&#13;&#10;                            ) {&#13;&#10;                                Icon(&#13;&#10;                                    imageVector = Icons.Default.OpenInNew,&#13;&#10;                                    contentDescription = &quot;Abrir enlace&quot;,&#13;&#10;                                    tint = MaterialTheme.colorScheme.primary&#13;&#10;                                )&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            // Date Card - SOLO CORRECCIÃN DE FECHA AQUÃ&#13;&#10;            Card(&#13;&#10;                modifier = Modifier.fillMaxWidth(),&#13;&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#13;&#10;            ) {&#13;&#10;                Row(&#13;&#10;                    modifier = Modifier&#13;&#10;                        .fillMaxWidth()&#13;&#10;                        .padding(16.dp),&#13;&#10;                    verticalAlignment = Alignment.CenterVertically,&#13;&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp)&#13;&#10;                ) {&#13;&#10;                    Icon(&#13;&#10;                        imageVector = Icons.Default.DateRange,&#13;&#10;                        contentDescription = null,&#13;&#10;                        tint = MaterialTheme.colorScheme.primary&#13;&#10;                    )&#13;&#10;                    Column {&#13;&#10;                        Text(&#13;&#10;                            text = &quot;Fecha de creaciÃ³n&quot;,&#13;&#10;                            fontSize = 14.sp,&#13;&#10;                            fontWeight = FontWeight.Medium,&#13;&#10;                            color = MaterialTheme.colorScheme.primary&#13;&#10;                        )&#13;&#10;                        Text(&#13;&#10;                            text = formatFecha(recurso.createdAt),&#13;&#10;                            fontSize = 16.sp,&#13;&#10;                            color = MaterialTheme.colorScheme.onSurface&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            // Recursos relacionados de la misma categorÃ­a&#13;&#10;            if (filteredRelatedResources.isNotEmpty() &amp;&amp; category != null) {&#13;&#10;                Card(&#13;&#10;                    modifier = Modifier.fillMaxWidth(),&#13;&#10;                    elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#13;&#10;                ) {&#13;&#10;                    Column(&#13;&#10;                        modifier = Modifier&#13;&#10;                            .fillMaxWidth()&#13;&#10;                            .padding(16.dp)&#13;&#10;                    ) {&#13;&#10;                        Row(&#13;&#10;                            verticalAlignment = Alignment.CenterVertically,&#13;&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp)&#13;&#10;                        ) {&#13;&#10;                            Icon(&#13;&#10;                                imageVector = IconPicker.getIconByName(category.icono) ?: Icons.Default.Category,&#13;&#10;                                contentDescription = null,&#13;&#10;                                tint = MaterialTheme.colorScheme.primary&#13;&#10;                            )&#13;&#10;                            Text(&#13;&#10;                                text = &quot;MÃ¡s recursos de ${category.nombre}&quot;,&#13;&#10;                                fontSize = 18.sp,&#13;&#10;                                fontWeight = FontWeight.SemiBold,&#13;&#10;                                color = MaterialTheme.colorScheme.primary&#13;&#10;                            )&#13;&#10;                        }&#13;&#10;&#13;&#10;                        Spacer(modifier = Modifier.height(12.dp))&#13;&#10;&#13;&#10;                        LazyRow(&#13;&#10;                            horizontalArrangement = Arrangement.spacedBy(12.dp)&#13;&#10;                        ) {&#13;&#10;                            items(filteredRelatedResources) { relatedResource -&gt;&#13;&#10;                                RelatedResourceCard(&#13;&#10;                                    resource = relatedResource,&#13;&#10;                                    category = category,&#13;&#10;                                    onClick = {&#13;&#10;                                        // AquÃ­ podrÃ­as navegar al detalle del recurso relacionado&#13;&#10;                                    }&#13;&#10;                                )&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // DiÃ¡logo de confirmaciÃ³n para eliminar&#13;&#10;    if (showDeleteDialog) {&#13;&#10;        AlertDialog(&#13;&#10;            onDismissRequest = { showDeleteDialog = false },&#13;&#10;            title = {&#13;&#10;                Text(&#13;&#10;                    &quot;Eliminar Recurso&quot;,&#13;&#10;                    style = MaterialTheme.typography.titleLarge,&#13;&#10;                    fontWeight = FontWeight.Bold&#13;&#10;                )&#13;&#10;            },&#13;&#10;            text = {&#13;&#10;                Column {&#13;&#10;                    Text(&#13;&#10;                        &quot;Â¿EstÃ¡s seguro de que quieres eliminar el recurso \&quot;${recurso.nombre}\&quot;?&quot;,&#13;&#10;                        style = MaterialTheme.typography.bodyMedium&#13;&#10;                    )&#13;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#13;&#10;                    Card(&#13;&#10;                        colors = CardDefaults.cardColors(&#13;&#10;                            containerColor = MaterialTheme.colorScheme.errorContainer&#13;&#10;                        )&#13;&#10;                    ) {&#13;&#10;                        Text(&#13;&#10;                            text = &quot;Esta acciÃ³n no se puede deshacer.&quot;,&#13;&#10;                            modifier = Modifier.padding(12.dp),&#13;&#10;                            style = MaterialTheme.typography.bodySmall,&#13;&#10;                            color = MaterialTheme.colorScheme.onErrorContainer&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            },&#13;&#10;            confirmButton = {&#13;&#10;                Button(&#13;&#10;                    onClick = {&#13;&#10;                        recursoViewModel.deleteRecursoById(recurso.id)&#13;&#10;                        showDeleteDialog = false&#13;&#10;                        onBackClick()&#13;&#10;                    },&#13;&#10;                    colors = ButtonDefaults.buttonColors(&#13;&#10;                        containerColor = MaterialTheme.colorScheme.error&#13;&#10;                    )&#13;&#10;                ) {&#13;&#10;                    Text(&quot;Eliminar&quot;, color = MaterialTheme.colorScheme.onError)&#13;&#10;                }&#13;&#10;            },&#13;&#10;            dismissButton = {&#13;&#10;                TextButton(onClick = { showDeleteDialog = false }) {&#13;&#10;                    Text(&quot;Cancelar&quot;)&#13;&#10;                }&#13;&#10;            }&#13;&#10;        )&#13;&#10;    }&#13;&#10;&#13;&#10;    // DiÃ¡logo de ediciÃ³n&#13;&#10;    if (showEditDialog) {&#13;&#10;        DialogEditRecurso(&#13;&#10;            show = showEditDialog,&#13;&#10;            recurso = recurso,&#13;&#10;            onDismiss = { showEditDialog = false },&#13;&#10;            onAccept = { updatedRecurso -&gt;&#13;&#10;                recursoViewModel.updateRecurso(updatedRecurso)&#13;&#10;                showEditDialog = false&#13;&#10;            }&#13;&#10;        )&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;// FunciÃ³n para formatear fechas usando la nueva utilidad DateUtils&#13;&#10;fun formatFecha(fecha: String): String {&#13;&#10;    return DateUtils.formatForDisplay(fecha)&#13;&#10;}&#13;&#10;&#13;&#10;@Composable&#13;&#10;fun RelatedResourceCard(&#13;&#10;    resource: Recurso,&#13;&#10;    category: Category,&#13;&#10;    onClick: () -&gt; Unit&#13;&#10;) {&#13;&#10;    Card(&#13;&#10;        modifier = Modifier&#13;&#10;            .width(180.dp)&#13;&#10;            .height(120.dp),&#13;&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#13;&#10;        onClick = onClick&#13;&#10;    ) {&#13;&#10;        Column(&#13;&#10;            modifier = Modifier&#13;&#10;                .fillMaxSize()&#13;&#10;                .padding(12.dp),&#13;&#10;            verticalArrangement = Arrangement.spacedBy(8.dp)&#13;&#10;        ) {&#13;&#10;            Row(&#13;&#10;                verticalAlignment = Alignment.CenterVertically,&#13;&#10;                horizontalArrangement = Arrangement.spacedBy(6.dp)&#13;&#10;            ) {&#13;&#10;                Icon(&#13;&#10;                    imageVector = IconPicker.getIconByName(category.icono) ?: Icons.Default.Category,&#13;&#10;                    contentDescription = null,&#13;&#10;                    modifier = Modifier.size(16.dp),&#13;&#10;                    tint = MaterialTheme.colorScheme.primary&#13;&#10;                )&#13;&#10;                Text(&#13;&#10;                    text = category.nombre,&#13;&#10;                    fontSize = 12.sp,&#13;&#10;                    color = MaterialTheme.colorScheme.primary,&#13;&#10;                    fontWeight = FontWeight.Medium,&#13;&#10;                    maxLines = 1,&#13;&#10;                    overflow = TextOverflow.Ellipsis&#13;&#10;                )&#13;&#10;            }&#13;&#10;&#13;&#10;            Text(&#13;&#10;                text = resource.nombre,&#13;&#10;                fontSize = 14.sp,&#13;&#10;                fontWeight = FontWeight.SemiBold,&#13;&#10;                maxLines = 2,&#13;&#10;                overflow = TextOverflow.Ellipsis,&#13;&#10;                color = MaterialTheme.colorScheme.onSurface&#13;&#10;            )&#13;&#10;&#13;&#10;            Text(&#13;&#10;                text = resource.descripcion,&#13;&#10;                fontSize = 12.sp,&#13;&#10;                maxLines = 2,&#13;&#10;                overflow = TextOverflow.Ellipsis,&#13;&#10;                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#13;&#10;            )&#13;&#10;&#13;&#10;            Spacer(modifier = Modifier.weight(1f))&#13;&#10;&#13;&#10;            Text(&#13;&#10;                text = formatFecha(resource.createdAt),&#13;&#10;                fontSize = 10.sp,&#13;&#10;                color = MaterialTheme.colorScheme.outline,&#13;&#10;                textAlign = TextAlign.End,&#13;&#10;                modifier = Modifier.fillMaxWidth()&#13;&#10;            )&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/viewmodel/CategoryViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/viewmodel/CategoryViewModel.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.presentation.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import esan.mendoza.impulso.data.local.entities.Category&#10;import esan.mendoza.impulso.data.local.repositories.CategoryRepository&#10;import esan.mendoza.impulso.data.sample.ExampleData&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class CategoryViewModel @Inject constructor(&#10;    private val categoryRepository: CategoryRepository&#10;) : ViewModel() {&#10;&#10;    private val _categories = MutableStateFlow&lt;List&lt;Category&gt;&gt;(emptyList())&#10;    val categories: StateFlow&lt;List&lt;Category&gt;&gt; = _categories.asStateFlow()&#10;&#10;    private val _isLoading = MutableStateFlow(false)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading.asStateFlow()&#10;&#10;    private val _error = MutableStateFlow&lt;String?&gt;(null)&#10;    val error: StateFlow&lt;String?&gt; = _error.asStateFlow()&#10;&#10;    init {&#10;        loadCategories()&#10;    }&#10;&#10;    fun loadCategories() {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val categoryList = categoryRepository.getAllCategories()&#10;&#10;                // Si no hay categorÃ­as reales, mostrar la categorÃ­a de ejemplo&#10;                if (categoryList.isEmpty()) {&#10;&#10;                } else {&#10;                    _categories.value = categoryList&#10;                }&#10;&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun insertCategory(category: Category) {&#10;        viewModelScope.launch {&#10;            try {&#10;                categoryRepository.insertCategory(category)&#10;                loadCategories() // Recargar la lista&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateCategory(category: Category) {&#10;        viewModelScope.launch {&#10;            try {&#10;                categoryRepository.updateCategory(category)&#10;                loadCategories() // Recargar la lista&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteCategory(category: Category) {&#10;        viewModelScope.launch {&#10;            try {&#10;                categoryRepository.deleteCategory(category)&#10;                loadCategories() // Recargar la lista&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun addCategory(nombre: String, icono: String) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val newCategory = Category(&#10;                    id = 0, // Room generarÃ¡ el ID automÃ¡ticamente si es @PrimaryKey(autoGenerate = true)&#10;                    nombre = nombre,&#10;                    icono = icono&#10;                )&#10;                categoryRepository.insertCategory(newCategory)&#10;                loadCategories() // Recargar la lista (esto eliminarÃ¡ automÃ¡ticamente el ejemplo)&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearError() {&#10;        _error.value = null&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package esan.mendoza.impulso.presentation.viewmodel&#13;&#10;&#13;&#10;import androidx.lifecycle.ViewModel&#13;&#10;import androidx.lifecycle.viewModelScope&#13;&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#13;&#10;import esan.mendoza.impulso.data.local.entities.Category&#13;&#10;import esan.mendoza.impulso.data.local.repositories.CategoryRepository&#13;&#10;import esan.mendoza.impulso.data.sample.ExampleData&#13;&#10;import kotlinx.coroutines.flow.MutableStateFlow&#13;&#10;import kotlinx.coroutines.flow.StateFlow&#13;&#10;import kotlinx.coroutines.flow.asStateFlow&#13;&#10;import kotlinx.coroutines.launch&#13;&#10;import javax.inject.Inject&#13;&#10;&#13;&#10;@HiltViewModel&#13;&#10;class CategoryViewModel @Inject constructor(&#13;&#10;    private val categoryRepository: CategoryRepository&#13;&#10;) : ViewModel() {&#13;&#10;&#13;&#10;    private val _categories = MutableStateFlow&lt;List&lt;Category&gt;&gt;(emptyList())&#13;&#10;    val categories: StateFlow&lt;List&lt;Category&gt;&gt; = _categories.asStateFlow()&#13;&#10;&#13;&#10;    private val _isLoading = MutableStateFlow(false)&#13;&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading.asStateFlow()&#13;&#10;&#13;&#10;    private val _error = MutableStateFlow&lt;String?&gt;(null)&#13;&#10;    val error: StateFlow&lt;String?&gt; = _error.asStateFlow()&#13;&#10;&#13;&#10;    init {&#13;&#10;        loadCategories()&#13;&#10;    }&#13;&#10;&#13;&#10;    fun loadCategories() {&#13;&#10;        viewModelScope.launch {&#13;&#10;            _isLoading.value = true&#13;&#10;            try {&#13;&#10;                val categoryList = categoryRepository.getAllCategories()&#13;&#10;                _categories.value = categoryList&#13;&#10;                _error.value = null&#13;&#10;            } catch (e: Exception) {&#13;&#10;                _error.value = e.message&#13;&#10;                _categories.value = emptyList()&#13;&#10;            } finally {&#13;&#10;                _isLoading.value = false&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun addCategory(category: Category) {&#13;&#10;        viewModelScope.launch {&#13;&#10;            try {&#13;&#10;                categoryRepository.insertCategory(category)&#13;&#10;                loadCategories() // Recargar la lista despuÃ©s de agregar&#13;&#10;                _error.value = null&#13;&#10;            } catch (e: Exception) {&#13;&#10;                _error.value = &quot;Error al crear categorÃ­a: ${e.message}&quot;&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun updateCategory(category: Category) {&#13;&#10;        viewModelScope.launch {&#13;&#10;            try {&#13;&#10;                categoryRepository.updateCategory(category)&#13;&#10;                loadCategories() // Recargar la lista despuÃ©s de actualizar&#13;&#10;                _error.value = null&#13;&#10;            } catch (e: Exception) {&#13;&#10;                _error.value = &quot;Error al actualizar categorÃ­a: ${e.message}&quot;&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun deleteCategory(category: Category) {&#13;&#10;        viewModelScope.launch {&#13;&#10;            try {&#13;&#10;                categoryRepository.deleteCategory(category)&#13;&#10;                loadCategories() // Recargar la lista despuÃ©s de eliminar&#13;&#10;                _error.value = null&#13;&#10;            } catch (e: Exception) {&#13;&#10;                _error.value = &quot;Error al eliminar categorÃ­a: ${e.message}&quot;&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun clearError() {&#13;&#10;        _error.value = null&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/viewmodel/RecursoViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/viewmodel/RecursoViewModel.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.presentation.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.data.local.entities.RecursoWithCategory&#10;import esan.mendoza.impulso.data.local.repositories.RecursoRepository&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class RecursoViewModel @Inject constructor(&#10;    private val recursoRepository: RecursoRepository&#10;) : ViewModel() {&#10;&#10;    private val _recursos = MutableStateFlow&lt;List&lt;Recurso&gt;&gt;(emptyList())&#10;    val recursos: StateFlow&lt;List&lt;Recurso&gt;&gt; = _recursos.asStateFlow()&#10;&#10;    private val _recursosWithCategory = MutableStateFlow&lt;List&lt;RecursoWithCategory&gt;&gt;(emptyList())&#10;    val recursosWithCategory: StateFlow&lt;List&lt;RecursoWithCategory&gt;&gt; = _recursosWithCategory.asStateFlow()&#10;&#10;    private val _isLoading = MutableStateFlow(false)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading.asStateFlow()&#10;&#10;    private val _error = MutableStateFlow&lt;String?&gt;(null)&#10;    val error: StateFlow&lt;String?&gt; = _error.asStateFlow()&#10;&#10;    init {&#10;        loadRecursos()&#10;        loadRecursosWithCategory()&#10;    }&#10;&#10;    fun loadRecursos() {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val recursoList = recursoRepository.getAllRecursos()&#10;                _recursos.value = recursoList&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;                _recursos.value = emptyList()&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun loadRecursosWithCategory() {&#10;        viewModelScope.launch {&#10;            try {&#10;                val recursosWithCategory = recursoRepository.getRecursosWithCategory()&#10;                _recursosWithCategory.value = recursosWithCategory&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;                _recursosWithCategory.value = emptyList()&#10;            }&#10;        }&#10;    }&#10;&#10;    fun addRecurso(recurso: Recurso) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val result = recursoRepository.insertRecurso(recurso)&#10;                if (result.isSuccess) {&#10;                    loadRecursos() // Recargar la lista despuÃ©s de agregar&#10;                    loadRecursosWithCategory() // Recargar recursos con categorÃ­a&#10;                    _error.value = null&#10;                } else {&#10;                    _error.value = &quot;Error al crear recurso: ${result.exceptionOrNull()?.message}&quot;&#10;                }&#10;            } catch (e: Exception) {&#10;                _error.value = &quot;Error al crear recurso: ${e.message}&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateRecurso(recurso: Recurso) {&#10;        viewModelScope.launch {&#10;            try {&#10;                recursoRepository.updateRecurso(recurso)&#10;                loadRecursos() // Recargar la lista despuÃ©s de actualizar&#10;                loadRecursosWithCategory() // Recargar recursos con categorÃ­a&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = &quot;Error al actualizar recurso: ${e.message}&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteRecurso(recurso: Recurso) {&#10;        viewModelScope.launch {&#10;            try {&#10;                recursoRepository.deleteRecurso(recurso)&#10;                loadRecursos() // Recargar la lista despuÃ©s de eliminar&#10;                loadRecursosWithCategory() // Recargar recursos con categorÃ­a&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = &quot;Error al eliminar recurso: ${e.message}&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    fun getRecursosByCategory(categoryId: Int) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val recursos = recursoRepository.getRecursosByCategory(categoryId)&#10;                _recursos.value = recursos&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = &quot;Error al cargar recursos por categorÃ­a: ${e.message}&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    fun loadRecursosByCategory(categoryId: Int) {&#10;        getRecursosByCategory(categoryId)&#10;    }&#10;&#10;    fun searchRecursosByName(query: String) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val allRecursos = recursoRepository.getAllRecursos()&#10;                val filteredRecursos = allRecursos.filter {&#10;                    it.nombre.contains(query, ignoreCase = true) ||&#10;                    it.descripcion.contains(query, ignoreCase = true)&#10;                }&#10;                _recursos.value = filteredRecursos&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = &quot;Error al buscar recursos: ${e.message}&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    fun toggleFavorite(recurso: Int) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val updatedRecurso = recurso.copy(isFavorite = !recurso.isFavorite)&#10;                recursoRepository.updateRecurso(updatedRecurso)&#10;                loadRecursos()&#10;                loadRecursosWithCategory()&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = &quot;Error al actualizar favorito: ${e.message}&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteRecursoById(id: Int) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val recurso = recursoRepository.getRecursoById(id)&#10;                recurso?.let {&#10;                    recursoRepository.deleteRecurso(it)&#10;                    loadRecursos()&#10;                    loadRecursosWithCategory()&#10;                }&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = &quot;Error al eliminar recurso: ${e.message}&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearError() {&#10;        _error.value = null&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package esan.mendoza.impulso.presentation.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.data.local.entities.RecursoWithCategory&#10;import esan.mendoza.impulso.data.local.repositories.RecursoRepository&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class RecursoViewModel @Inject constructor(&#10;    private val recursoRepository: RecursoRepository&#10;) : ViewModel() {&#10;&#10;    private val _recursos = MutableStateFlow&lt;List&lt;Recurso&gt;&gt;(emptyList())&#10;    val recursos: StateFlow&lt;List&lt;Recurso&gt;&gt; = _recursos.asStateFlow()&#10;&#10;    private val _recursosWithCategory = MutableStateFlow&lt;List&lt;RecursoWithCategory&gt;&gt;(emptyList())&#10;    val recursosWithCategory: StateFlow&lt;List&lt;RecursoWithCategory&gt;&gt; = _recursosWithCategory.asStateFlow()&#10;&#10;    private val _isLoading = MutableStateFlow(false)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading.asStateFlow()&#10;&#10;    private val _error = MutableStateFlow&lt;String?&gt;(null)&#10;    val error: StateFlow&lt;String?&gt; = _error.asStateFlow()&#10;&#10;    init {&#10;        loadRecursos()&#10;        loadRecursosWithCategory()&#10;    }&#10;&#10;    fun loadRecursos() {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val recursoList = recursoRepository.getAllRecursos()&#10;                _recursos.value = recursoList&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;                _recursos.value = emptyList()&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun loadRecursosWithCategory() {&#10;        viewModelScope.launch {&#10;            try {&#10;                val recursosWithCategory = recursoRepository.getRecursosWithCategory()&#10;                _recursosWithCategory.value = recursosWithCategory&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;                _recursosWithCategory.value = emptyList()&#10;            }&#10;        }&#10;    }&#10;&#10;    fun addRecurso(recurso: Recurso) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val result = recursoRepository.insertRecurso(recurso)&#10;                if (result.isSuccess) {&#10;                    loadRecursos() // Recargar la lista despuÃ©s de agregar&#10;                    loadRecursosWithCategory() // Recargar recursos con categorÃ­a&#10;                    _error.value = null&#10;                } else {&#10;                    _error.value = &quot;Error al crear recurso: ${result.exceptionOrNull()?.message}&quot;&#10;                }&#10;            } catch (e: Exception) {&#10;                _error.value = &quot;Error al crear recurso: ${e.message}&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateRecurso(recurso: Recurso) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val result = recursoRepository.updateRecurso(recurso)&#10;                if (result.isSuccess) {&#10;                    loadRecursos() // Recargar la lista despuÃ©s de actualizar&#10;                    loadRecursosWithCategory() // Recargar recursos con categorÃ­a&#10;                    _error.value = null&#10;                } else {&#10;                    _error.value = &quot;Error al actualizar recurso: ${result.exceptionOrNull()?.message}&quot;&#10;                }&#10;            } catch (e: Exception) {&#10;                _error.value = &quot;Error al actualizar recurso: ${e.message}&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteRecurso(recurso: Recurso) {&#10;        viewModelScope.launch {&#10;            try {&#10;                recursoRepository.deleteRecurso(recurso)&#10;                loadRecursos() // Recargar la lista despuÃ©s de eliminar&#10;                loadRecursosWithCategory() // Recargar recursos con categorÃ­a&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = &quot;Error al eliminar recurso: ${e.message}&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    fun getRecursosByCategory(categoryId: Int) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val recursos = recursoRepository.getRecursosByCategory(categoryId)&#10;                _recursos.value = recursos&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = &quot;Error al cargar recursos por categorÃ­a: ${e.message}&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    fun loadRecursosByCategory(categoryId: Int) {&#10;        getRecursosByCategory(categoryId)&#10;    }&#10;&#10;    fun searchRecursosByName(query: String) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val allRecursos = recursoRepository.getAllRecursos()&#10;                val filteredRecursos = allRecursos.filter {&#10;                    it.nombre.contains(query, ignoreCase = true) ||&#10;                    it.descripcion.contains(query, ignoreCase = true)&#10;                }&#10;                _recursos.value = filteredRecursos&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = &quot;Error al buscar recursos: ${e.message}&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    fun toggleFavorite(recurso: Recurso) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val updatedRecurso = recurso.copy(isFavorite = !recurso.isFavorite)&#10;                val result = recursoRepository.updateRecurso(updatedRecurso)&#10;                if (result.isSuccess) {&#10;                    loadRecursos()&#10;                    loadRecursosWithCategory()&#10;                    _error.value = null&#10;                } else {&#10;                    _error.value = &quot;Error al actualizar favorito: ${result.exceptionOrNull()?.message}&quot;&#10;                }&#10;            } catch (e: Exception) {&#10;                _error.value = &quot;Error al actualizar favorito: ${e.message}&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteRecursoById(id: Int) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val recurso = recursoRepository.getRecursoById(id)&#10;                recurso?.let {&#10;                    recursoRepository.deleteRecurso(it)&#10;                    loadRecursos()&#10;                    loadRecursosWithCategory()&#10;                }&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = &quot;Error al eliminar recurso: ${e.message}&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    fun loadFavoriteRecursos() {&#10;        viewModelScope.launch {&#10;            try {&#10;                val allRecursos = recursoRepository.getAllRecursos()&#10;                val favoriteRecursos = allRecursos.filter { it.isFavorite }&#10;                _recursos.value = favoriteRecursos&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = &quot;Error al cargar favoritos: ${e.message}&quot;&#10;                _recursos.value = emptyList()&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearError() {&#10;        _error.value = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/utils/DateUtils.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/utils/DateUtils.kt" />
              <option name="updatedContent" value="package esan.mendoza.impulso.utils&#10;&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;object DateUtils {&#10;    &#10;    // Formato estÃ¡ndar para guardar en la base de datos (ISO 8601)&#10;    private val databaseDateFormat = SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ss'Z'&quot;, Locale.getDefault())&#10;    &#10;    // Formato para mostrar al usuario (mÃ¡s legible)&#10;    private val displayDateFormat = SimpleDateFormat(&quot;dd/MM/yyyy HH:mm&quot;, Locale.getDefault())&#10;    &#10;    // Formato para mostrar solo la fecha&#10;    private val displayDateOnlyFormat = SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault())&#10;    &#10;    // Formato para mostrar fecha relativa&#10;    private val monthYearFormat = SimpleDateFormat(&quot;MMM yyyy&quot;, Locale.getDefault())&#10;    &#10;    init {&#10;        // Configurar zona horaria para el formato de base de datos&#10;        databaseDateFormat.timeZone = TimeZone.getTimeZone(&quot;UTC&quot;)&#10;    }&#10;    &#10;    /**&#10;     * Obtiene la fecha y hora actual en formato estÃ¡ndar para la base de datos&#10;     */&#10;    fun getCurrentDateTimeString(): String {&#10;        return databaseDateFormat.format(Date())&#10;    }&#10;    &#10;    /**&#10;     * Obtiene solo la fecha actual en formato estÃ¡ndar&#10;     */&#10;    fun getCurrentDateString(): String {&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;        return dateFormat.format(Date())&#10;    }&#10;    &#10;    /**&#10;     * Convierte una fecha de string a Date&#10;     */&#10;    fun parseDate(dateString: String): Date? {&#10;        return try {&#10;            when {&#10;                // Formato ISO completo&#10;                dateString.contains(&quot;T&quot;) &amp;&amp; dateString.contains(&quot;Z&quot;) -&gt; &#10;                    databaseDateFormat.parse(dateString)&#10;                // Formato de solo fecha&#10;                dateString.matches(Regex(&quot;\\d{4}-\\d{2}-\\d{2}&quot;)) -&gt; &#10;                    SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault()).parse(dateString)&#10;                else -&gt; null&#10;            }&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Formatea una fecha para mostrar al usuario de forma legible&#10;     */&#10;    fun formatForDisplay(dateString: String): String {&#10;        val date = parseDate(dateString)&#10;        return if (date != null) {&#10;            displayDateFormat.format(date)&#10;        } else {&#10;            dateString // Si no se puede parsear, devolver el string original&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Formatea una fecha para mostrar solo el dÃ­a/mes/aÃ±o&#10;     */&#10;    fun formatDateOnly(dateString: String): String {&#10;        val date = parseDate(dateString)&#10;        return if (date != null) {&#10;            displayDateOnlyFormat.format(date)&#10;        } else {&#10;            dateString&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Formatea una fecha de forma relativa (hace X dÃ­as, esta semana, etc.)&#10;     */&#10;    fun formatRelativeDate(dateString: String): String {&#10;        val date = parseDate(dateString) ?: return dateString&#10;        val now = Date()&#10;        val diffInMillis = now.time - date.time&#10;        val diffInDays = diffInMillis / (24 * 60 * 60 * 1000)&#10;        &#10;        return when {&#10;            diffInDays == 0L -&gt; &quot;Hoy&quot;&#10;            diffInDays == 1L -&gt; &quot;Ayer&quot;&#10;            diffInDays &lt; 7L -&gt; &quot;Hace ${diffInDays} dÃ­as&quot;&#10;            diffInDays &lt; 30L -&gt; &quot;Hace ${diffInDays / 7} semanas&quot;&#10;            diffInDays &lt; 365L -&gt; monthYearFormat.format(date)&#10;            else -&gt; &quot;Hace ${diffInDays / 365} aÃ±os&quot;&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Verifica si una fecha es de hoy&#10;     */&#10;    fun isToday(dateString: String): Boolean {&#10;        val date = parseDate(dateString) ?: return false&#10;        val today = Calendar.getInstance()&#10;        val dateCalendar = Calendar.getInstance().apply { time = date }&#10;        &#10;        return today.get(Calendar.YEAR) == dateCalendar.get(Calendar.YEAR) &amp;&amp;&#10;                today.get(Calendar.DAY_OF_YEAR) == dateCalendar.get(Calendar.DAY_OF_YEAR)&#10;    }&#10;    &#10;    /**&#10;     * Verifica si una fecha es de esta semana&#10;     */&#10;    fun isThisWeek(dateString: String): Boolean {&#10;        val date = parseDate(dateString) ?: return false&#10;        val today = Calendar.getInstance()&#10;        val dateCalendar = Calendar.getInstance().apply { time = date }&#10;        &#10;        return today.get(Calendar.YEAR) == dateCalendar.get(Calendar.YEAR) &amp;&amp;&#10;                today.get(Calendar.WEEK_OF_YEAR) == dateCalendar.get(Calendar.WEEK_OF_YEAR)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/font/urbanist_regular.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/font/urbanist_regular.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;font-family xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;font&#10;        android:fontStyle=&quot;normal&quot;&#10;        android:fontWeight=&quot;400&quot;&#10;        android:font=&quot;@font/urbanist_regular&quot; /&gt;&#10;&lt;/font-family&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>