<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/data/local/repositories/RecursoRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/data/local/repositories/RecursoRepository.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.data.local.repositories&#10;&#10;import esan.mendoza.impulso.data.local.dao.CategoryDao&#10;import esan.mendoza.impulso.data.local.dao.RecursoDao&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.data.local.entities.RecursoWithCategory&#10;&#10;class RecursoRepository(&#10;    private val recursoDao: RecursoDao,&#10;    private val categoryDao: CategoryDao&#10;) {&#10;&#10;    // Obtener todos los recursos&#10;    suspend fun getAllRecursos(): List&lt;Recurso&gt; {&#10;        return recursoDao.getAllRecursos()&#10;    }&#10;&#10;    // Obtener recurso por ID&#10;    suspend fun getRecursoById(id: Int): Recurso? {&#10;        return recursoDao.getRecursoById(id)&#10;    }&#10;&#10;    // Obtener recursos por categoría&#10;    suspend fun getRecursosByCategory(categoryId: Int): List&lt;Recurso&gt; {&#10;        return recursoDao.getRecursosByCategory(categoryId)&#10;    }&#10;&#10;    // Obtener recursos con información de categoría&#10;    suspend fun getRecursosWithCategory(): List&lt;RecursoWithCategory&gt; {&#10;        return recursoDao.getRecursosWithCategory()&#10;    }&#10;&#10;    // Obtener recursos con categoría por ID de categoría&#10;    suspend fun getRecursosWithCategoryById(categoryId: Int): List&lt;RecursoWithCategory&gt; {&#10;        return recursoDao.getRecursosWithCategoryById(categoryId)&#10;    }&#10;&#10;    // Insertar nuevo recurso (con validación de categoría)&#10;    suspend fun insertRecurso(recurso: Recurso): Result&lt;Unit&gt; {&#10;        return try {&#10;            // Verificar que la categoría existe&#10;            val categoryExists = categoryDao.getCategoryById(recurso.categoriaId) != null&#10;            if (!categoryExists) {&#10;                Result.failure(IllegalArgumentException(&quot;La categoría con ID ${recurso.categoriaId} no existe&quot;))&#10;            } else {&#10;                recursoDao.insertRecurso(recurso)&#10;                Result.success(Unit)&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    // Actualizar recurso&#10;    suspend fun updateRecurso(recurso: Recurso): Result&lt;Unit&gt; {&#10;        return try {&#10;            // Verificar que la categoría existe&#10;            val categoryExists = categoryDao.getCategoryById(recurso.categoriaId) != null&#10;            if (!categoryExists) {&#10;                Result.failure(IllegalArgumentException(&quot;La categoría con ID ${recurso.categoriaId} no existe&quot;))&#10;            } else {&#10;                recursoDao.updateRecurso(recurso)&#10;                Result.success(Unit)&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    // Eliminar recurso&#10;    suspend fun deleteRecurso(recurso: Recurso) {&#10;        recursoDao.deleteRecurso(recurso)&#10;    }&#10;&#10;    // Eliminar recurso por ID&#10;    suspend fun deleteRecursoById(id: Int) {&#10;        val recurso = getRecursoById(id)&#10;        recurso?.let { deleteRecurso(it) }&#10;    }&#10;&#10;    // Eliminar todos los recursos de una categoría&#10;    suspend fun deleteRecursosByCategory(categoryId: Int) {&#10;        val recursos = getRecursosByCategory(categoryId)&#10;        recursos.forEach { deleteRecurso(it) }&#10;    }&#10;&#10;    // Verificar si existe un recurso&#10;    suspend fun recursoExists(id: Int): Boolean {&#10;        return getRecursoById(id) != null&#10;    }&#10;&#10;    // Contar recursos por categoría&#10;    suspend fun countRecursosByCategory(categoryId: Int): Int {&#10;        return getRecursosByCategory(categoryId).size&#10;    }&#10;&#10;    // Buscar recursos por nombre&#10;    suspend fun searchRecursosByName(query: String): List&lt;Recurso&gt; {&#10;        return getAllRecursos().filter {&#10;            it.nombre.contains(query, ignoreCase = true)&#10;        }&#10;    }&#10;&#10;    // Buscar recursos por descripción&#10;    suspend fun searchRecursosByDescription(query: String): List&lt;Recurso&gt; {&#10;        return getAllRecursos().filter {&#10;            it.descripcion.contains(query, ignoreCase = true)&#10;        }&#10;    }&#10;&#10;    // Buscar recursos por nombre o descripción&#10;    suspend fun searchRecursos(query: String): List&lt;RecursoWithCategory&gt; {&#10;        return getRecursosWithCategory().filter {&#10;            it.recurso.nombre.contains(query, ignoreCase = true) ||&#10;                    it.recurso.descripcion.contains(query, ignoreCase = true)&#10;        }&#10;    }&#10;" />
              <option name="updatedContent" value="package esan.mendoza.impulso.data.local.repositories&#10;&#10;import esan.mendoza.impulso.data.local.dao.CategoryDao&#10;import esan.mendoza.impulso.data.local.dao.RecursoDao&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.data.local.entities.RecursoWithCategory&#10;&#10;class RecursoRepository(&#10;    private val recursoDao: RecursoDao,&#10;    private val categoryDao: CategoryDao&#10;) {&#10;&#10;    // Obtener todos los recursos&#10;    suspend fun getAllRecursos(): List&lt;Recurso&gt; {&#10;        return recursoDao.getAllRecursos()&#10;    }&#10;&#10;    // Obtener recurso por ID&#10;    suspend fun getRecursoById(id: Int): Recurso? {&#10;        return recursoDao.getRecursoById(id)&#10;    }&#10;&#10;    // Obtener recursos por categoría&#10;    suspend fun getRecursosByCategory(categoryId: Int): List&lt;Recurso&gt; {&#10;        return recursoDao.getRecursosByCategory(categoryId)&#10;    }&#10;&#10;    // Obtener recursos con información de categoría&#10;    suspend fun getRecursosWithCategory(): List&lt;RecursoWithCategory&gt; {&#10;        return recursoDao.getRecursosWithCategory()&#10;    }&#10;&#10;    // Obtener recursos con categoría por ID de categoría&#10;    suspend fun getRecursosWithCategoryById(categoryId: Int): List&lt;RecursoWithCategory&gt; {&#10;        return recursoDao.getRecursosWithCategoryById(categoryId)&#10;    }&#10;&#10;    // Insertar nuevo recurso (con validación de categoría)&#10;    suspend fun insertRecurso(recurso: Recurso): Result&lt;Unit&gt; {&#10;        return try {&#10;            // Verificar que la categoría existe&#10;            val categoryExists = categoryDao.getCategoryById(recurso.categoriaId) != null&#10;            if (!categoryExists) {&#10;                Result.failure(IllegalArgumentException(&quot;La categoría con ID ${recurso.categoriaId} no existe&quot;))&#10;            } else {&#10;                recursoDao.insertRecurso(recurso)&#10;                Result.success(Unit)&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    // Actualizar recurso&#10;    suspend fun updateRecurso(recurso: Recurso): Result&lt;Unit&gt; {&#10;        return try {&#10;            // Verificar que la categoría existe&#10;            val categoryExists = categoryDao.getCategoryById(recurso.categoriaId) != null&#10;            if (!categoryExists) {&#10;                Result.failure(IllegalArgumentException(&quot;La categoría con ID ${recurso.categoriaId} no existe&quot;))&#10;            } else {&#10;                recursoDao.updateRecurso(recurso)&#10;                Result.success(Unit)&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    // Eliminar recurso&#10;    suspend fun deleteRecurso(recurso: Recurso) {&#10;        recursoDao.deleteRecurso(recurso)&#10;    }&#10;&#10;    // Eliminar recurso por ID&#10;    suspend fun deleteRecursoById(id: Int) {&#10;        val recurso = getRecursoById(id)&#10;        recurso?.let { deleteRecurso(it) }&#10;    }&#10;&#10;    // Eliminar todos los recursos de una categoría&#10;    suspend fun deleteRecursosByCategory(categoryId: Int) {&#10;        val recursos = getRecursosByCategory(categoryId)&#10;        recursos.forEach { deleteRecurso(it) }&#10;    }&#10;&#10;    // Verificar si existe un recurso&#10;    suspend fun recursoExists(id: Int): Boolean {&#10;        return getRecursoById(id) != null&#10;    }&#10;&#10;    // Contar recursos por categoría&#10;    suspend fun countRecursosByCategory(categoryId: Int): Int {&#10;        return getRecursosByCategory(categoryId).size&#10;    }&#10;&#10;    // Buscar recursos por nombre&#10;    suspend fun searchRecursosByName(query: String): List&lt;Recurso&gt; {&#10;        return getAllRecursos().filter {&#10;            it.nombre.contains(query, ignoreCase = true)&#10;        }&#10;    }&#10;&#10;    // Buscar recursos por descripción&#10;    suspend fun searchRecursosByDescription(query: String): List&lt;Recurso&gt; {&#10;        return getAllRecursos().filter {&#10;            it.descripcion.contains(query, ignoreCase = true)&#10;        }&#10;    }&#10;&#10;    // Buscar recursos por nombre o descripción&#10;    suspend fun searchRecursos(query: String): List&lt;RecursoWithCategory&gt; {&#10;        return getRecursosWithCategory().filter {&#10;            it.recurso.nombre.contains(query, ignoreCase = true) ||&#10;                    it.recurso.descripcion.contains(query, ignoreCase = true)&#10;        }&#10;    }&#10;&#10;    // Obtener recursos favoritos&#10;    suspend fun getFavoriteRecursos(): List&lt;Recurso&gt; {&#10;        return getAllRecursos().filter { it.isFavorite }&#10;    }&#10;&#10;    // Obtener recursos favoritos con categoría&#10;    suspend fun getFavoriteRecursosWithCategory(): List&lt;RecursoWithCategory&gt; {&#10;        return getRecursosWithCategory().filter { it.recurso.isFavorite }&#10;    }&#10;&#10;    // Alternar estado de favorito&#10;    suspend fun toggleFavorite(recursoId: Int): Result&lt;Unit&gt; {&#10;        return try {&#10;            val recurso = getRecursoById(recursoId)&#10;            if (recurso != null) {&#10;                val updatedRecurso = recurso.copy(isFavorite = !recurso.isFavorite)&#10;                updateRecurso(updatedRecurso)&#10;            } else {&#10;                Result.failure(IllegalArgumentException(&quot;Recurso no encontrado&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/homeScreen/HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/homeScreen/HomeScreen.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.presentation.homeScreen&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.slideInVertically&#10;import androidx.compose.animation.slideOutVertically&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.AddRoad&#10;import androidx.compose.material.icons.filled.Category&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.data.local.entities.Category&#10;import esan.mendoza.impulso.presentation.principalScreen.PrincipalScreen&#10;import esan.mendoza.impulso.presentation.resourceDetailScreen.ResourceDetailScreen&#10;import esan.mendoza.impulso.presentation.navigation.Screen&#10;import esan.mendoza.impulso.presentation.navigation.NavigationState&#10;import esan.mendoza.impulso.presentation.viewmodel.CategoryViewModel&#10;import esan.mendoza.impulso.presentation.viewmodel.RecursoViewModel&#10;import esan.mendoza.impulso.presentation.favoritesScreen.FavoritesScreen&#10;import esan.mendoza.impulso.presentation.settingsScreen.SettingsScreen&#10;&#10;@Composable&#10;fun HomeScreen(&#10;    categoryViewModel: CategoryViewModel = hiltViewModel(),&#10;    recursoViewModel: RecursoViewModel = hiltViewModel()&#10;) {&#10;    var navigationState by remember { mutableStateOf(NavigationState()) }&#10;    var fabsVisible by remember { mutableStateOf(false) }&#10;    var showAddCategoryDialog by remember { mutableStateOf(false) }&#10;    var showAddRecursoDialog by remember { mutableStateOf(false) }&#10;&#10;    Scaffold(&#10;        floatingActionButton = {&#10;            // Solo mostrar FAB principal en la pantalla HOME&#10;            if (navigationState.currentScreen == Screen.HOME) {&#10;                FloatingActionButton(&#10;                    onClick = {&#10;                        fabsVisible = !fabsVisible&#10;                    },&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = if (fabsVisible) Icons.Default.Close else Icons.Default.Add,&#10;                        contentDescription = if (fabsVisible) &quot;Close&quot; else &quot;Open Menu&quot;,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    ) { innerPadding -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .padding(innerPadding)&#10;                .fillMaxSize()&#10;        ) {&#10;            // Contenido principal basado en la pantalla actual&#10;            when (navigationState.currentScreen) {&#10;                Screen.HOME -&gt; {&#10;                    Column(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        PrincipalScreen(&#10;                            categoryViewModel = categoryViewModel,&#10;                            recursoViewModel = recursoViewModel,&#10;                            onResourceClick = { recurso, category -&gt;&#10;                                navigationState = navigationState.copy(&#10;                                    currentScreen = Screen.RESOURCE_DETAIL,&#10;                                    selectedRecurso = recurso,&#10;                                    selectedCategory = category&#10;                                )&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Screen.RESOURCE_DETAIL -&gt; {&#10;                    navigationState.selectedRecurso?.let { recurso -&gt;&#10;                        ResourceDetailScreen(&#10;                            recurso = recurso,&#10;                            category = navigationState.selectedCategory,&#10;                            onBackClick = {&#10;                                navigationState = navigationState.copy(&#10;                                    currentScreen = Screen.HOME,&#10;                                    selectedRecurso = null,&#10;                                    selectedCategory = null&#10;                                )&#10;                            },&#10;                            onEditClick = {&#10;                                // TODO: Implementar edición de recurso&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Screen.FAVORITES -&gt; {&#10;                    FavoritesScreen(&#10;                        onBackClick = {&#10;                            navigationState = navigationState.copy(currentScreen = Screen.HOME)&#10;                        },&#10;                        onResourceClick = { recurso, category -&gt;&#10;                            navigationState = navigationState.copy(&#10;                                currentScreen = Screen.RESOURCE_DETAIL,&#10;                                selectedRecurso = recurso,&#10;                                selectedCategory = category&#10;                            )&#10;                        },&#10;                        categoryViewModel = categoryViewModel,&#10;                        recursoViewModel = recursoViewModel&#10;                    )&#10;                }&#10;&#10;                Screen.SETTINGS -&gt; {&#10;                    SettingsScreen(&#10;                        onBackClick = {&#10;                            navigationState = navigationState.copy(currentScreen = Screen.HOME)&#10;                        },&#10;                        categoryViewModel = categoryViewModel&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // FABs secundarios posicionados en la esquina inferior derecha (solo en HOME)&#10;        if (navigationState.currentScreen == Screen.HOME) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(bottom = 80.dp), // Espacio para el FAB principal&#10;                contentAlignment = Alignment.BottomEnd&#10;            ) {&#10;                FABColumn(&#10;                    isVisible = fabsVisible,&#10;                    fabsEnabled = true,&#10;                    onAddCategory = { showAddCategoryDialog = true },&#10;                    onAddRecurso = { showAddRecursoDialog = true },&#10;                    onFavorites = {&#10;                        navigationState = navigationState.copy(currentScreen = Screen.FAVORITES)&#10;                        fabsVisible = false&#10;                    },&#10;                    onSettings = {&#10;                        navigationState = navigationState.copy(currentScreen = Screen.SETTINGS)&#10;                        fabsVisible = false&#10;                    }&#10;                )&#10;            }&#10;        }&#10;&#10;        // Diálogos (disponibles en todas las pantallas)&#10;        esan.mendoza.impulso.presentation.component.DialogAddCategory(&#10;            show = showAddCategoryDialog,&#10;            onDismiss = { showAddCategoryDialog = false },&#10;            onAccept = { nombre, icono -&gt;&#10;                categoryViewModel.addCategory(nombre, icono)&#10;                showAddCategoryDialog = false&#10;            }&#10;        )&#10;&#10;        esan.mendoza.impulso.presentation.component.DialogAddRecurso(&#10;            show = showAddRecursoDialog,&#10;            onDismiss = { showAddRecursoDialog = false },&#10;            onAccept = { nombre, descripcion, categoriaId, link, createdAt -&gt;&#10;                recursoViewModel.addRecurso(nombre, descripcion, categoriaId.toIntOrNull() ?: 0, link, createdAt)&#10;                showAddRecursoDialog = false&#10;            }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CustomFAB(&#10;    icon: ImageVector,&#10;    contentDescription: String,&#10;    onClick: () -&gt; Unit,&#10;    enabled: Boolean = true&#10;) {&#10;    FloatingActionButton(&#10;        onClick = onClick,&#10;        modifier = Modifier&#10;            .padding(vertical = 4.dp, horizontal = 16.dp)&#10;            .alpha(if (enabled) 1f else 0.9f),&#10;        containerColor = if (enabled) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.surfaceVariant&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = contentDescription,&#10;            modifier = Modifier.size(24.dp),&#10;            tint = if (enabled) MaterialTheme.colorScheme.onPrimary else MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FABColumn(&#10;    isVisible: Boolean,&#10;    fabsEnabled: Boolean,&#10;    onAddCategory: () -&gt; Unit,&#10;    onAddRecurso: () -&gt; Unit,&#10;    onFavorites: () -&gt; Unit,&#10;    onSettings: () -&gt; Unit&#10;) {&#10;    AnimatedVisibility(&#10;        visible = isVisible,&#10;        enter = slideInVertically(&#10;            initialOffsetY = { it },&#10;            animationSpec = tween(300)&#10;        ) + fadeIn(animationSpec = tween(300)),&#10;        exit = slideOutVertically(&#10;            targetOffsetY = { it },&#10;            animationSpec = tween(300)&#10;        ) + fadeOut(animationSpec = tween(300))&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .padding(end = 16.dp, bottom = 32.dp),&#10;            verticalArrangement = Arrangement.spacedBy(8.dp),&#10;            horizontalAlignment = Alignment.End&#10;        ) {&#10;            CustomFAB(&#10;                icon = Icons.Default.AddRoad,&#10;                contentDescription = &quot;Añadir Recurso&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onAddRecurso()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;&#10;            CustomFAB(&#10;                icon = Icons.Default.Category,&#10;                contentDescription = &quot;Añadir Categoria&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onAddCategory()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;&#10;            CustomFAB(&#10;                icon = Icons.Default.Favorite,&#10;                contentDescription = &quot;Mis Favoritos&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onFavorites()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;&#10;            CustomFAB(&#10;                icon = Icons.Default.Settings,&#10;                contentDescription = &quot;Configuración de categorias y recursos&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onSettings()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package esan.mendoza.impulso.presentation.homeScreen&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.slideInVertically&#10;import androidx.compose.animation.slideOutVertically&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.AddRoad&#10;import androidx.compose.material.icons.filled.Category&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.data.local.entities.Category&#10;import esan.mendoza.impulso.presentation.principalScreen.PrincipalScreen&#10;import esan.mendoza.impulso.presentation.resourceDetailScreen.ResourceDetailScreen&#10;import esan.mendoza.impulso.presentation.navigation.Screen&#10;import esan.mendoza.impulso.presentation.navigation.NavigationState&#10;import esan.mendoza.impulso.presentation.viewmodel.CategoryViewModel&#10;import esan.mendoza.impulso.presentation.viewmodel.RecursoViewModel&#10;import esan.mendoza.impulso.presentation.favoritesScreen.FavoritesScreen&#10;import esan.mendoza.impulso.presentation.settingsScreen.SettingsScreen&#10;&#10;@Composable&#10;fun HomeScreen(&#10;    categoryViewModel: CategoryViewModel = hiltViewModel(),&#10;    recursoViewModel: RecursoViewModel = hiltViewModel()&#10;) {&#10;    var navigationState by remember { mutableStateOf(NavigationState()) }&#10;    var fabsVisible by remember { mutableStateOf(false) }&#10;    var showAddCategoryDialog by remember { mutableStateOf(false) }&#10;    var showAddRecursoDialog by remember { mutableStateOf(false) }&#10;&#10;    Scaffold(&#10;        floatingActionButton = {&#10;            // Solo mostrar FAB principal en la pantalla HOME&#10;            if (navigationState.currentScreen == Screen.HOME) {&#10;                FloatingActionButton(&#10;                    onClick = {&#10;                        fabsVisible = !fabsVisible&#10;                    },&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = if (fabsVisible) Icons.Default.Close else Icons.Default.Add,&#10;                        contentDescription = if (fabsVisible) &quot;Close&quot; else &quot;Open Menu&quot;,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    ) { innerPadding -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .padding(innerPadding)&#10;                .fillMaxSize()&#10;        ) {&#10;            // Contenido principal basado en la pantalla actual&#10;            when (navigationState.currentScreen) {&#10;                Screen.HOME -&gt; {&#10;                    Column(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        PrincipalScreen(&#10;                            categoryViewModel = categoryViewModel,&#10;                            recursoViewModel = recursoViewModel,&#10;                            onResourceClick = { recurso, category -&gt;&#10;                                navigationState = navigationState.copy(&#10;                                    currentScreen = Screen.RESOURCE_DETAIL,&#10;                                    selectedRecurso = recurso,&#10;                                    selectedCategory = category&#10;                                )&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Screen.RESOURCE_DETAIL -&gt; {&#10;                    navigationState.selectedRecurso?.let { recurso -&gt;&#10;                        ResourceDetailScreen(&#10;                            recurso = recurso,&#10;                            category = navigationState.selectedCategory,&#10;                            onBackClick = {&#10;                                navigationState = navigationState.copy(&#10;                                    currentScreen = Screen.HOME,&#10;                                    selectedRecurso = null,&#10;                                    selectedCategory = null&#10;                                )&#10;                            },&#10;                            onEditClick = {&#10;                                // TODO: Implementar edición de recurso&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Screen.FAVORITES -&gt; {&#10;                    FavoritesScreen(&#10;                        onBackClick = {&#10;                            navigationState = navigationState.copy(currentScreen = Screen.HOME)&#10;                        },&#10;                        onResourceClick = { recurso, category -&gt;&#10;                            navigationState = navigationState.copy(&#10;                                currentScreen = Screen.RESOURCE_DETAIL,&#10;                                selectedRecurso = recurso,&#10;                                selectedCategory = category&#10;                            )&#10;                        },&#10;                        categoryViewModel = categoryViewModel,&#10;                        recursoViewModel = recursoViewModel&#10;                    )&#10;                }&#10;&#10;                Screen.SETTINGS -&gt; {&#10;                    SettingsScreen(&#10;                        onBackClick = {&#10;                            navigationState = navigationState.copy(currentScreen = Screen.HOME)&#10;                        },&#10;                        categoryViewModel = categoryViewModel&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // FABs secundarios posicionados en la esquina inferior derecha (solo en HOME)&#10;        if (navigationState.currentScreen == Screen.HOME) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(bottom = 80.dp), // Espacio para el FAB principal&#10;                contentAlignment = Alignment.BottomEnd&#10;            ) {&#10;                FABColumn(&#10;                    isVisible = fabsVisible,&#10;                    fabsEnabled = true,&#10;                    onAddCategory = { showAddCategoryDialog = true },&#10;                    onAddRecurso = { showAddRecursoDialog = true },&#10;                    onFavorites = {&#10;                        navigationState = navigationState.copy(currentScreen = Screen.FAVORITES)&#10;                        fabsVisible = false&#10;                    },&#10;                    onSettings = {&#10;                        navigationState = navigationState.copy(currentScreen = Screen.SETTINGS)&#10;                        fabsVisible = false&#10;                    }&#10;                )&#10;            }&#10;        }&#10;&#10;        // Diálogos (disponibles en todas las pantallas)&#10;        esan.mendoza.impulso.presentation.component.DialogAddCategory(&#10;            show = showAddCategoryDialog,&#10;            onDismiss = { showAddCategoryDialog = false },&#10;            onAccept = { nombre, icono -&gt;&#10;                categoryViewModel.addCategory(nombre, icono)&#10;                showAddCategoryDialog = false&#10;            }&#10;        )&#10;&#10;        esan.mendoza.impulso.presentation.component.DialogAddRecurso(&#10;            show = showAddRecursoDialog,&#10;            onDismiss = { showAddRecursoDialog = false },&#10;            onAccept = { nombre, descripcion, categoriaId, link, createdAt -&gt;&#10;                recursoViewModel.addRecurso(nombre, descripcion, categoriaId.toIntOrNull() ?: 0, link, createdAt)&#10;                showAddRecursoDialog = false&#10;            },&#10;            categoryViewModel = categoryViewModel&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CustomFAB(&#10;    icon: ImageVector,&#10;    contentDescription: String,&#10;    onClick: () -&gt; Unit,&#10;    enabled: Boolean = true&#10;) {&#10;    FloatingActionButton(&#10;        onClick = onClick,&#10;        modifier = Modifier&#10;            .padding(vertical = 4.dp, horizontal = 16.dp)&#10;            .alpha(if (enabled) 1f else 0.9f),&#10;        containerColor = if (enabled) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.surfaceVariant&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = contentDescription,&#10;            modifier = Modifier.size(24.dp),&#10;            tint = if (enabled) MaterialTheme.colorScheme.onPrimary else MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FABColumn(&#10;    isVisible: Boolean,&#10;    fabsEnabled: Boolean,&#10;    onAddCategory: () -&gt; Unit,&#10;    onAddRecurso: () -&gt; Unit,&#10;    onFavorites: () -&gt; Unit,&#10;    onSettings: () -&gt; Unit&#10;) {&#10;    AnimatedVisibility(&#10;        visible = isVisible,&#10;        enter = slideInVertically(&#10;            initialOffsetY = { it },&#10;            animationSpec = tween(300)&#10;        ) + fadeIn(animationSpec = tween(300)),&#10;        exit = slideOutVertically(&#10;            targetOffsetY = { it },&#10;            animationSpec = tween(300)&#10;        ) + fadeOut(animationSpec = tween(300))&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .padding(end = 16.dp, bottom = 32.dp),&#10;            verticalArrangement = Arrangement.spacedBy(8.dp),&#10;            horizontalAlignment = Alignment.End&#10;        ) {&#10;            CustomFAB(&#10;                icon = Icons.Default.AddRoad,&#10;                contentDescription = &quot;Añadir Recurso&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onAddRecurso()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;&#10;            CustomFAB(&#10;                icon = Icons.Default.Category,&#10;                contentDescription = &quot;Añadir Categoria&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onAddCategory()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;&#10;            CustomFAB(&#10;                icon = Icons.Default.Favorite,&#10;                contentDescription = &quot;Mis Favoritos&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onFavorites()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;&#10;            CustomFAB(&#10;                icon = Icons.Default.Settings,&#10;                contentDescription = &quot;Configuración de categorias y recursos&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onSettings()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/viewmodel/RecursoViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/viewmodel/RecursoViewModel.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.presentation.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.data.local.entities.RecursoWithCategory&#10;import esan.mendoza.impulso.data.local.repositories.RecursoRepository&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class RecursoViewModel @Inject constructor(&#10;    private val recursoRepository: RecursoRepository&#10;) : ViewModel() {&#10;&#10;    private val _recursos = MutableStateFlow&lt;List&lt;Recurso&gt;&gt;(emptyList())&#10;    val recursos: StateFlow&lt;List&lt;Recurso&gt;&gt; = _recursos.asStateFlow()&#10;&#10;    private val _recursosWithCategory = MutableStateFlow&lt;List&lt;RecursoWithCategory&gt;&gt;(emptyList())&#10;    val recursosWithCategory: StateFlow&lt;List&lt;RecursoWithCategory&gt;&gt; = _recursosWithCategory.asStateFlow()&#10;&#10;    private val _isLoading = MutableStateFlow(false)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading.asStateFlow()&#10;&#10;    private val _error = MutableStateFlow&lt;String?&gt;(null)&#10;    val error: StateFlow&lt;String?&gt; = _error.asStateFlow()&#10;&#10;    init {&#10;        loadRecursos()&#10;        loadRecursosWithCategory()&#10;    }&#10;&#10;    fun loadRecursos() {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val recursoList = recursoRepository.getAllRecursos()&#10;                _recursos.value = recursoList&#10;                _recursos.value = recursoList&#10;&#10;    fun loadRecursosWithCategory() {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val recursoList = recursoRepository.getRecursosWithCategory()&#10;                _recursosWithCategory.value = recursoList&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun loadRecursosByCategory(categoryId: Int) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val recursoList = recursoRepository.getRecursosByCategory(categoryId)&#10;                _recursos.value = recursoList&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun insertRecurso(recurso: Recurso) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val result = recursoRepository.insertRecurso(recurso)&#10;                result.fold(&#10;                    onSuccess = {&#10;                        loadRecursos()&#10;                        loadRecursosWithCategory()&#10;                        _error.value = null&#10;                    },&#10;                    onFailure = { exception -&gt;&#10;                        _error.value = exception.message&#10;                    }&#10;                )&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateRecurso(recurso: Recurso) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val result = recursoRepository.updateRecurso(recurso)&#10;                result.fold(&#10;                    onSuccess = {&#10;                        loadRecursos()&#10;                        loadRecursosWithCategory()&#10;                        _error.value = null&#10;                    },&#10;                    onFailure = { exception -&gt;&#10;                        _error.value = exception.message&#10;                    }&#10;                )&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteRecurso(recurso: Recurso) {&#10;        viewModelScope.launch {&#10;            try {&#10;                recursoRepository.deleteRecurso(recurso)&#10;                loadRecursos()&#10;                loadRecursosWithCategory()&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun searchRecursosByName(query: String) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val recursoList = recursoRepository.searchRecursosByName(query)&#10;                _recursos.value = recursoList&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearError() {&#10;        _error.value = null&#10;    }&#10;&#10;    fun addRecurso(nombre: String, descripcion: String, categoriaId: Int, link: String, createdAt: String) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val newRecurso = Recurso(&#10;                    id = 0, // Room generará el ID automáticamente&#10;                    nombre = nombre,&#10;                    descripcion = descripcion,&#10;                    categoriaId = categoriaId,&#10;                    link = link,&#10;                    createdAt = createdAt&#10;                )&#10;                val result = recursoRepository.insertRecurso(newRecurso)&#10;                result.fold(&#10;                    onSuccess = {&#10;                        loadRecursos()&#10;                        loadRecursosWithCategory()&#10;                        _error.value = null&#10;                    },&#10;                    onFailure = { exception -&gt;&#10;                        _error.value = exception.message&#10;                    }&#10;                )&#10;                        loadRecursos()&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    // Métodos para manejar favoritos&#10;    fun loadFavoriteRecursos() {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val favoriteRecursos = recursoRepository.getFavoriteRecursos()&#10;                _recursos.value = favoriteRecursos&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    fun toggleFavorite(recursoId: Int) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val result = recursoRepository.toggleFavorite(recursoId)&#10;                result.fold(&#10;                    onSuccess = {&#10;                        loadRecursos()&#10;                        loadRecursosWithCategory()&#10;                        _error.value = null&#10;                    },&#10;                    onFailure = { exception -&gt;&#10;                        _error.value = exception.message&#10;                    }&#10;                )&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package esan.mendoza.impulso.presentation.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.data.local.entities.RecursoWithCategory&#10;import esan.mendoza.impulso.data.local.repositories.RecursoRepository&#10;import esan.mendoza.impulso.data.sample.ExampleData&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class RecursoViewModel @Inject constructor(&#10;    private val recursoRepository: RecursoRepository&#10;) : ViewModel() {&#10;&#10;    private val _recursos = MutableStateFlow&lt;List&lt;Recurso&gt;&gt;(emptyList())&#10;    val recursos: StateFlow&lt;List&lt;Recurso&gt;&gt; = _recursos.asStateFlow()&#10;&#10;    private val _recursosWithCategory = MutableStateFlow&lt;List&lt;RecursoWithCategory&gt;&gt;(emptyList())&#10;    val recursosWithCategory: StateFlow&lt;List&lt;RecursoWithCategory&gt;&gt; = _recursosWithCategory.asStateFlow()&#10;&#10;    private val _isLoading = MutableStateFlow(false)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading.asStateFlow()&#10;&#10;    private val _error = MutableStateFlow&lt;String?&gt;(null)&#10;    val error: StateFlow&lt;String?&gt; = _error.asStateFlow()&#10;&#10;    init {&#10;        loadRecursos()&#10;        loadRecursosWithCategory()&#10;    }&#10;&#10;    fun loadRecursos() {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val recursoList = recursoRepository.getAllRecursos()&#10;&#10;                // Si no hay recursos reales, mostrar el recurso de ejemplo&#10;                if (recursoList.isEmpty()) {&#10;                    _recursos.value = listOf(ExampleData.exampleRecurso)&#10;                } else {&#10;                    _recursos.value = recursoList&#10;                }&#10;&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun loadRecursosWithCategory() {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val recursoList = recursoRepository.getRecursosWithCategory()&#10;                _recursosWithCategory.value = recursoList&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun loadRecursosByCategory(categoryId: Int) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val recursoList = recursoRepository.getRecursosByCategory(categoryId)&#10;                _recursos.value = recursoList&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun insertRecurso(recurso: Recurso) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val result = recursoRepository.insertRecurso(recurso)&#10;                result.fold(&#10;                    onSuccess = {&#10;                        loadRecursos()&#10;                        loadRecursosWithCategory()&#10;                        _error.value = null&#10;                    },&#10;                    onFailure = { exception -&gt;&#10;                        _error.value = exception.message&#10;                    }&#10;                )&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateRecurso(recurso: Recurso) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val result = recursoRepository.updateRecurso(recurso)&#10;                result.fold(&#10;                    onSuccess = {&#10;                        loadRecursos()&#10;                        loadRecursosWithCategory()&#10;                        _error.value = null&#10;                    },&#10;                    onFailure = { exception -&gt;&#10;                        _error.value = exception.message&#10;                    }&#10;                )&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteRecurso(recurso: Recurso) {&#10;        viewModelScope.launch {&#10;            try {&#10;                recursoRepository.deleteRecurso(recurso)&#10;                loadRecursos()&#10;                loadRecursosWithCategory()&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun searchRecursosByName(query: String) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val recursoList = recursoRepository.searchRecursosByName(query)&#10;                _recursos.value = recursoList&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearError() {&#10;        _error.value = null&#10;    }&#10;&#10;    fun addRecurso(nombre: String, descripcion: String, categoriaId: Int, link: String, createdAt: String) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val newRecurso = Recurso(&#10;                    id = 0, // Room generará el ID automáticamente&#10;                    nombre = nombre,&#10;                    descripcion = descripcion,&#10;                    categoriaId = categoriaId,&#10;                    link = link,&#10;                    createdAt = createdAt&#10;                )&#10;                val result = recursoRepository.insertRecurso(newRecurso)&#10;                result.fold(&#10;                    onSuccess = {&#10;                        loadRecursos() // Recargar la lista (esto eliminará automáticamente el ejemplo)&#10;                        loadRecursosWithCategory()&#10;                        _error.value = null&#10;                    },&#10;                    onFailure = { exception -&gt;&#10;                        _error.value = exception.message&#10;                    }&#10;                )&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    // Métodos para manejar favoritos&#10;    fun loadFavoriteRecursos() {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val favoriteRecursos = recursoRepository.getFavoriteRecursos()&#10;&#10;                // Para favoritos, no mostrar ejemplos - solo recursos reales marcados como favoritos&#10;                _recursos.value = favoriteRecursos&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun toggleFavorite(recursoId: Int) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val result = recursoRepository.toggleFavorite(recursoId)&#10;                result.fold(&#10;                    onSuccess = {&#10;                        loadRecursos()&#10;                        loadRecursosWithCategory()&#10;                        _error.value = null&#10;                    },&#10;                    onFailure = { exception -&gt;&#10;                        _error.value = exception.message&#10;                    }&#10;                )&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>