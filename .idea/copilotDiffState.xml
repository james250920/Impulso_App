<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/data/local/entities/Categoria.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/data/local/entities/Categoria.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.data.local.entities&#10;&#10;import androidx.room.ColumnInfo&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(tableName = &quot;category&quot;)&#10;data class Category(&#10;    @PrimaryKey&#10;    val id: Int,&#10;&#10;    @ColumnInfo(name = &quot;Nombre&quot;)&#10;    val nombre: String,&#10;&#10;    @ColumnInfo(name = &quot;icono&quot;)&#10;    val icono: String&#10;)" />
              <option name="updatedContent" value="package esan.mendoza.impulso.data.local.entities&#10;&#10;import androidx.room.ColumnInfo&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(tableName = &quot;category&quot;)&#10;data class Category(&#10;    @PrimaryKey(autoGenerate = true)&#10;    val id: Int,&#10;&#10;    @ColumnInfo(name = &quot;Nombre&quot;)&#10;    val nombre: String,&#10;&#10;    @ColumnInfo(name = &quot;icono&quot;)&#10;    val icono: String&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/data/local/entities/Recurso.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/data/local/entities/Recurso.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.data.local.entities&#10;&#10;import androidx.room.ColumnInfo&#10;import androidx.room.Entity&#10;import androidx.room.ForeignKey&#10;import androidx.room.Index&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(&#10;    tableName = &quot;recurso&quot;,&#10;    foreignKeys = [&#10;        ForeignKey(&#10;            entity = Category::class,&#10;            parentColumns = [&quot;id&quot;],&#10;            childColumns = [&quot;categoria_id&quot;],&#10;            onDelete = ForeignKey.CASCADE&#10;        )&#10;    ],&#10;    indices = [Index(value = [&quot;categoria_id&quot;])]&#10;)&#10;data class Recurso(&#10;    @PrimaryKey&#10;    val id: Int,&#10;&#10;    @ColumnInfo(name = &quot;Nombre&quot;)&#10;    val nombre: String,&#10;&#10;    @ColumnInfo(name = &quot;Descripcion&quot;)&#10;    val descripcion: String,&#10;&#10;    @ColumnInfo(name = &quot;categoria_id&quot;)&#10;    val categoriaId: Int,&#10;&#10;    @ColumnInfo(name = &quot;Link&quot;)&#10;    val link: String,&#10;&#10;    @ColumnInfo(name = &quot;created_at&quot;)&#10;    val createdAt: String // Puedes usar Long para timestamp o Date&#10;)" />
              <option name="updatedContent" value="package esan.mendoza.impulso.data.local.entities&#10;&#10;import androidx.room.ColumnInfo&#10;import androidx.room.Entity&#10;import androidx.room.ForeignKey&#10;import androidx.room.Index&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(&#10;    tableName = &quot;recurso&quot;,&#10;    foreignKeys = [&#10;        ForeignKey(&#10;            entity = Category::class,&#10;            parentColumns = [&quot;id&quot;],&#10;            childColumns = [&quot;categoria_id&quot;],&#10;            onDelete = ForeignKey.CASCADE&#10;        )&#10;    ],&#10;    indices = [Index(value = [&quot;categoria_id&quot;])]&#10;)&#10;data class Recurso(&#10;    @PrimaryKey(autoGenerate = true)&#10;    val id: Int,&#10;&#10;    @ColumnInfo(name = &quot;Nombre&quot;)&#10;    val nombre: String,&#10;&#10;    @ColumnInfo(name = &quot;Descripcion&quot;)&#10;    val descripcion: String,&#10;&#10;    @ColumnInfo(name = &quot;categoria_id&quot;)&#10;    val categoriaId: Int,&#10;&#10;    @ColumnInfo(name = &quot;Link&quot;)&#10;    val link: String,&#10;&#10;    @ColumnInfo(name = &quot;created_at&quot;)&#10;    val createdAt: String, // Puedes usar Long para timestamp o Date&#10;&#10;    @ColumnInfo(name = &quot;is_favorite&quot;)&#10;    val isFavorite: Boolean = false&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/data/local/repositories/RecursoRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/data/local/repositories/RecursoRepository.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.data.local.repositories&#10;&#10;import esan.mendoza.impulso.data.local.dao.CategoryDao&#10;import esan.mendoza.impulso.data.local.dao.RecursoDao&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.data.local.entities.RecursoWithCategory&#10;&#10;class RecursoRepository(&#10;    private val recursoDao: RecursoDao,&#10;    private val categoryDao: CategoryDao&#10;) {&#10;&#10;    // Obtener todos los recursos&#10;    suspend fun getAllRecursos(): List&lt;Recurso&gt; {&#10;        return recursoDao.getAllRecursos()&#10;    }&#10;&#10;    // Obtener recurso por ID&#10;    suspend fun getRecursoById(id: Int): Recurso? {&#10;        return recursoDao.getRecursoById(id)&#10;    }&#10;&#10;    // Obtener recursos por categoría&#10;    suspend fun getRecursosByCategory(categoryId: Int): List&lt;Recurso&gt; {&#10;        return recursoDao.getRecursosByCategory(categoryId)&#10;    }&#10;&#10;    // Obtener recursos con información de categoría&#10;    suspend fun getRecursosWithCategory(): List&lt;RecursoWithCategory&gt; {&#10;        return recursoDao.getRecursosWithCategory()&#10;    }&#10;&#10;    // Obtener recursos con categoría por ID de categoría&#10;    suspend fun getRecursosWithCategoryById(categoryId: Int): List&lt;RecursoWithCategory&gt; {&#10;        return recursoDao.getRecursosWithCategoryById(categoryId)&#10;    }&#10;&#10;    // Insertar nuevo recurso (con validación de categoría)&#10;    suspend fun insertRecurso(recurso: Recurso): Result&lt;Unit&gt; {&#10;        return try {&#10;            // Verificar que la categoría existe&#10;            val categoryExists = categoryDao.getCategoryById(recurso.categoriaId) != null&#10;            if (!categoryExists) {&#10;                Result.failure(IllegalArgumentException(&quot;La categoría con ID ${recurso.categoriaId} no existe&quot;))&#10;            } else {&#10;                recursoDao.insertRecurso(recurso)&#10;                Result.success(Unit)&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    // Actualizar recurso&#10;    suspend fun updateRecurso(recurso: Recurso): Result&lt;Unit&gt; {&#10;        return try {&#10;            // Verificar que la categoría existe&#10;            val categoryExists = categoryDao.getCategoryById(recurso.categoriaId) != null&#10;            if (!categoryExists) {&#10;                Result.failure(IllegalArgumentException(&quot;La categoría con ID ${recurso.categoriaId} no existe&quot;))&#10;            } else {&#10;                recursoDao.updateRecurso(recurso)&#10;                Result.success(Unit)&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    // Eliminar recurso&#10;    suspend fun deleteRecurso(recurso: Recurso) {&#10;        recursoDao.deleteRecurso(recurso)&#10;    }&#10;&#10;    // Eliminar recurso por ID&#10;    suspend fun deleteRecursoById(id: Int) {&#10;        val recurso = getRecursoById(id)&#10;        recurso?.let { deleteRecurso(it) }&#10;    }&#10;&#10;    // Eliminar todos los recursos de una categoría&#10;    suspend fun deleteRecursosByCategory(categoryId: Int) {&#10;        val recursos = getRecursosByCategory(categoryId)&#10;        recursos.forEach { deleteRecurso(it) }&#10;    }&#10;&#10;    // Verificar si existe un recurso&#10;    suspend fun recursoExists(id: Int): Boolean {&#10;        return getRecursoById(id) != null&#10;    }&#10;&#10;    // Contar recursos por categoría&#10;    suspend fun countRecursosByCategory(categoryId: Int): Int {&#10;        return getRecursosByCategory(categoryId).size&#10;    }&#10;&#10;    // Buscar recursos por nombre&#10;    suspend fun searchRecursosByName(query: String): List&lt;Recurso&gt; {&#10;        return getAllRecursos().filter {&#10;            it.nombre.contains(query, ignoreCase = true)&#10;        }&#10;    }&#10;&#10;    // Buscar recursos por descripción&#10;    suspend fun searchRecursosByDescription(query: String): List&lt;Recurso&gt; {&#10;        return getAllRecursos().filter {&#10;            it.descripcion.contains(query, ignoreCase = true)&#10;        }&#10;    }&#10;&#10;    // Buscar recursos por nombre o descripción&#10;    suspend fun searchRecursos(query: String): List&lt;RecursoWithCategory&gt; {&#10;        return getRecursosWithCategory().filter {&#10;            it.recurso.nombre.contains(query, ignoreCase = true) ||&#10;                    it.recurso.descripcion.contains(query, ignoreCase = true)&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package esan.mendoza.impulso.data.local.repositories&#10;&#10;import esan.mendoza.impulso.data.local.dao.CategoryDao&#10;import esan.mendoza.impulso.data.local.dao.RecursoDao&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.data.local.entities.RecursoWithCategory&#10;&#10;class RecursoRepository(&#10;    private val recursoDao: RecursoDao,&#10;    private val categoryDao: CategoryDao&#10;) {&#10;&#10;    // Obtener todos los recursos&#10;    suspend fun getAllRecursos(): List&lt;Recurso&gt; {&#10;        return recursoDao.getAllRecursos()&#10;    }&#10;&#10;    // Obtener recurso por ID&#10;    suspend fun getRecursoById(id: Int): Recurso? {&#10;        return recursoDao.getRecursoById(id)&#10;    }&#10;&#10;    // Obtener recursos por categoría&#10;    suspend fun getRecursosByCategory(categoryId: Int): List&lt;Recurso&gt; {&#10;        return recursoDao.getRecursosByCategory(categoryId)&#10;    }&#10;&#10;    // Obtener recursos con información de categoría&#10;    suspend fun getRecursosWithCategory(): List&lt;RecursoWithCategory&gt; {&#10;        return recursoDao.getRecursosWithCategory()&#10;    }&#10;&#10;    // Obtener recursos con categoría por ID de categoría&#10;    suspend fun getRecursosWithCategoryById(categoryId: Int): List&lt;RecursoWithCategory&gt; {&#10;        return recursoDao.getRecursosWithCategoryById(categoryId)&#10;    }&#10;&#10;    // Insertar nuevo recurso (con validación de categoría)&#10;    suspend fun insertRecurso(recurso: Recurso): Result&lt;Unit&gt; {&#10;        return try {&#10;            // Verificar que la categoría existe&#10;            val categoryExists = categoryDao.getCategoryById(recurso.categoriaId) != null&#10;            if (!categoryExists) {&#10;                Result.failure(IllegalArgumentException(&quot;La categoría con ID ${recurso.categoriaId} no existe&quot;))&#10;            } else {&#10;                recursoDao.insertRecurso(recurso)&#10;                Result.success(Unit)&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    // Actualizar recurso&#10;    suspend fun updateRecurso(recurso: Recurso): Result&lt;Unit&gt; {&#10;        return try {&#10;            // Verificar que la categoría existe&#10;            val categoryExists = categoryDao.getCategoryById(recurso.categoriaId) != null&#10;            if (!categoryExists) {&#10;                Result.failure(IllegalArgumentException(&quot;La categoría con ID ${recurso.categoriaId} no existe&quot;))&#10;            } else {&#10;                recursoDao.updateRecurso(recurso)&#10;                Result.success(Unit)&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    // Eliminar recurso&#10;    suspend fun deleteRecurso(recurso: Recurso) {&#10;        recursoDao.deleteRecurso(recurso)&#10;    }&#10;&#10;    // Eliminar recurso por ID&#10;    suspend fun deleteRecursoById(id: Int) {&#10;        val recurso = getRecursoById(id)&#10;        recurso?.let { deleteRecurso(it) }&#10;    }&#10;&#10;    // Eliminar todos los recursos de una categoría&#10;    suspend fun deleteRecursosByCategory(categoryId: Int) {&#10;        val recursos = getRecursosByCategory(categoryId)&#10;        recursos.forEach { deleteRecurso(it) }&#10;    }&#10;&#10;    // Verificar si existe un recurso&#10;    suspend fun recursoExists(id: Int): Boolean {&#10;        return getRecursoById(id) != null&#10;    }&#10;&#10;    // Contar recursos por categoría&#10;    suspend fun countRecursosByCategory(categoryId: Int): Int {&#10;        return getRecursosByCategory(categoryId).size&#10;    }&#10;&#10;    // Buscar recursos por nombre&#10;    suspend fun searchRecursosByName(query: String): List&lt;Recurso&gt; {&#10;        return getAllRecursos().filter {&#10;            it.nombre.contains(query, ignoreCase = true)&#10;        }&#10;    }&#10;&#10;    // Buscar recursos por descripción&#10;    suspend fun searchRecursosByDescription(query: String): List&lt;Recurso&gt; {&#10;        return getAllRecursos().filter {&#10;            it.descripcion.contains(query, ignoreCase = true)&#10;        }&#10;    }&#10;&#10;    // Buscar recursos por nombre o descripción&#10;    suspend fun searchRecursos(query: String): List&lt;RecursoWithCategory&gt; {&#10;        return getRecursosWithCategory().filter {&#10;            it.recurso.nombre.contains(query, ignoreCase = true) ||&#10;                    it.recurso.descripcion.contains(query, ignoreCase = true)&#10;        }&#10;    }&#10;&#10;    // Obtener recursos favoritos&#10;    suspend fun getFavoriteRecursos(): List&lt;Recurso&gt; {&#10;        return getAllRecursos().filter { it.isFavorite }&#10;    }&#10;&#10;    // Obtener recursos favoritos con categoría&#10;    suspend fun getFavoriteRecursosWithCategory(): List&lt;RecursoWithCategory&gt; {&#10;        return getRecursosWithCategory().filter { it.recurso.isFavorite }&#10;    }&#10;&#10;    // Alternar estado de favorito&#10;    suspend fun toggleFavorite(recursoId: Int): Result&lt;Unit&gt; {&#10;        return try {&#10;            val recurso = getRecursoById(recursoId)&#10;            if (recurso != null) {&#10;                val updatedRecurso = recurso.copy(isFavorite = !recurso.isFavorite)&#10;                updateRecurso(updatedRecurso)&#10;            } else {&#10;                Result.failure(IllegalArgumentException(&quot;Recurso no encontrado&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/data/sample/ExampleData.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/data/sample/ExampleData.kt" />
              <option name="updatedContent" value="package esan.mendoza.impulso.data.sample&#10;&#10;import esan.mendoza.impulso.data.local.entities.Category&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;&#10;object ExampleData {&#10;    &#10;    // Categoría de ejemplo&#10;    val exampleCategory = Category(&#10;        id = -1, // ID negativo para distinguirlo de datos reales&#10;        nombre = &quot;Ejemplo&quot;,&#10;        icono = &quot;Información&quot;&#10;    )&#10;    &#10;    // Recurso de ejemplo&#10;    val exampleRecurso = Recurso(&#10;        id = -1, // ID negativo para distinguirlo de datos reales&#10;        nombre = &quot;¡Bienvenido a Impulso!&quot;,&#10;        descripcion = &quot;Este es un recurso de ejemplo para ayudarte a comenzar. Puedes crear tus propios recursos usando el botón + flotante. Una vez que agregues tu primer recurso, este ejemplo desaparecerá automáticamente.&quot;,&#10;        categoriaId = -1,&#10;        link = &quot;https://ejemplo.com&quot;,&#10;        createdAt = &quot;2024-01-01&quot;,&#10;        isFavorite = false&#10;    )&#10;    &#10;    // Lista combinada para mostrar&#10;    fun getExampleData(): Pair&lt;List&lt;Category&gt;, List&lt;Recurso&gt;&gt; {&#10;        return Pair(listOf(exampleCategory), listOf(exampleRecurso))&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/component/DialogAddCategory.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/component/DialogAddCategory.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.presentation.component&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;&#10;@Composable&#10;fun DialogAddCategory(&#10;    show: Boolean,&#10;    onDismiss: () -&gt; Unit,&#10;    onAccept: (String, String) -&gt; Unit&#10;) {&#10;    var nombre by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedIcon by remember { mutableStateOf&lt;IconPicker.IconOption?&gt;(null) }&#10;    var showIconPicker by remember { mutableStateOf(false) }&#10;&#10;    if (show) {&#10;        AlertDialog(&#10;            onDismissRequest = onDismiss,&#10;            title = { Text(&quot;Agregar Categoría&quot;, fontWeight = FontWeight.Bold) },&#10;            text = {&#10;                Column {&#10;                    OutlinedTextField(&#10;                        value = nombre,&#10;                        onValueChange = { nombre = it },&#10;                        label = { Text(&quot;Nombre de la categoría&quot;) },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        singleLine = true&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    Text(&#10;                        text = &quot;Seleccionar ícono&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    // Botón para seleccionar ícono&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .clickable { showIconPicker = !showIconPicker },&#10;                        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(16.dp),&#10;                            horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            if (selectedIcon != null) {&#10;                                Icon(&#10;                                    imageVector = selectedIcon!!.icon,&#10;                                    contentDescription = null,&#10;                                    modifier = Modifier.size(24.dp),&#10;                                    tint = MaterialTheme.colorScheme.primary&#10;                                )&#10;                                Text(&#10;                                    text = selectedIcon!!.name,&#10;                                    style = MaterialTheme.typography.bodyMedium&#10;                                )&#10;                            } else {&#10;                                Icon(&#10;                                    imageVector = IconPicker.availableIcons[0].icon,&#10;                                    contentDescription = null,&#10;                                    modifier = Modifier.size(24.dp),&#10;                                    tint = MaterialTheme.colorScheme.outline&#10;                                )&#10;                                Text(&#10;                                    text = &quot;Seleccionar ícono&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium,&#10;                                    color = MaterialTheme.colorScheme.outline&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Grid de iconos (mostrar solo si showIconPicker es true)&#10;                    if (showIconPicker) {&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                        LazyVerticalGrid(&#10;                            columns = GridCells.Fixed(4),&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(200.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(8.dp),&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                        ) {&#10;                            items(IconPicker.availableIcons) { iconOption -&gt;&#10;                                IconSelectionItem(&#10;                                    iconOption = iconOption,&#10;                                    isSelected = selectedIcon == iconOption,&#10;                                    onIconSelected = {&#10;                                        selectedIcon = iconOption&#10;                                        showIconPicker = false&#10;                                    }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            },&#10;            confirmButton = {&#10;                Button(&#10;                    onClick = {&#10;                        val iconName = selectedIcon?.name ?: IconPicker.availableIcons[0].name&#10;                        onAccept(nombre, iconName)&#10;                        // Reset state&#10;                        nombre = &quot;&quot;&#10;                        selectedIcon = null&#10;                        showIconPicker = false&#10;                    },&#10;                    enabled = nombre.isNotBlank()&#10;                ) {&#10;                    Text(&quot;Crear&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = {&#10;                    onDismiss()&#10;                    // Reset state&#10;                    nombre = &quot;&quot;&#10;                    selectedIcon = null&#10;                    showIconPicker = false&#10;                }) {&#10;                    Text(&quot;Cancelar&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun IconSelectionItem(&#10;    iconOption: IconPicker.IconOption,&#10;    isSelected: Boolean,&#10;    onIconSelected: () -&gt; Unit&#10;) {&#10;    val backgroundColor = if (isSelected) {&#10;        MaterialTheme.colorScheme.primaryContainer&#10;    } else {&#10;        MaterialTheme.colorScheme.surface&#10;    }&#10;&#10;    val borderColor = if (isSelected) {&#10;        MaterialTheme.colorScheme.primary&#10;    } else {&#10;        MaterialTheme.colorScheme.outline.copy(alpha = 0.5f)&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .size(48.dp)&#10;            .clip(RoundedCornerShape(8.dp))&#10;            .background(backgroundColor)&#10;            .border(&#10;                width = if (isSelected) 2.dp else 1.dp,&#10;                color = borderColor,&#10;                shape = RoundedCornerShape(8.dp)&#10;            )&#10;            .clickable { onIconSelected() },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = iconOption.icon,&#10;            contentDescription = iconOption.name,&#10;            modifier = Modifier.size(24.dp),&#10;            tint = if (isSelected) {&#10;                MaterialTheme.colorScheme.primary&#10;            } else {&#10;                MaterialTheme.colorScheme.onSurface&#10;            }&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package esan.mendoza.impulso.presentation.component&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import esan.mendoza.impulso.presentation.component.IconPicker&#10;&#10;@Composable&#10;fun DialogAddCategory(&#10;    show: Boolean,&#10;    onDismiss: () -&gt; Unit,&#10;    onAccept: (String, String) -&gt; Unit&#10;) {&#10;    var nombre by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedIcon by remember { mutableStateOf&lt;IconPicker.IconOption?&gt;(null) }&#10;    var showIconPicker by remember { mutableStateOf(false) }&#10;&#10;    if (show) {&#10;        AlertDialog(&#10;            onDismissRequest = onDismiss,&#10;            title = { Text(&quot;Agregar Categoría&quot;, fontWeight = FontWeight.Bold) },&#10;            text = {&#10;                Column {&#10;                    OutlinedTextField(&#10;                        value = nombre,&#10;                        onValueChange = { nombre = it },&#10;                        label = { Text(&quot;Nombre de la categoría&quot;) },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        singleLine = true&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    Text(&#10;                        text = &quot;Seleccionar ícono&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    // Botón para seleccionar ícono&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .clickable { showIconPicker = !showIconPicker },&#10;                        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(16.dp),&#10;                            horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            if (selectedIcon != null) {&#10;                                Icon(&#10;                                    imageVector = selectedIcon!!.icon,&#10;                                    contentDescription = null,&#10;                                    modifier = Modifier.size(24.dp),&#10;                                    tint = MaterialTheme.colorScheme.primary&#10;                                )&#10;                                Text(&#10;                                    text = selectedIcon!!.name,&#10;                                    style = MaterialTheme.typography.bodyMedium&#10;                                )&#10;                            } else {&#10;                                Icon(&#10;                                    imageVector = IconPicker.availableIcons[0].icon,&#10;                                    contentDescription = null,&#10;                                    modifier = Modifier.size(24.dp),&#10;                                    tint = MaterialTheme.colorScheme.outline&#10;                                )&#10;                                Text(&#10;                                    text = &quot;Seleccionar ícono&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium,&#10;                                    color = MaterialTheme.colorScheme.outline&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Grid de iconos (mostrar solo si showIconPicker es true)&#10;                    if (showIconPicker) {&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                        LazyVerticalGrid(&#10;                            columns = GridCells.Fixed(4),&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(200.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(8.dp),&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                        ) {&#10;                            items(IconPicker.availableIcons) { iconOption -&gt;&#10;                                IconSelectionItem(&#10;                                    iconOption = iconOption,&#10;                                    isSelected = selectedIcon == iconOption,&#10;                                    onIconSelected = {&#10;                                        selectedIcon = iconOption&#10;                                        showIconPicker = false&#10;                                    }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            },&#10;            confirmButton = {&#10;                Button(&#10;                    onClick = {&#10;                        val iconName = selectedIcon?.name ?: IconPicker.availableIcons[0].name&#10;                        onAccept(nombre, iconName)&#10;                        // Reset state&#10;                        nombre = &quot;&quot;&#10;                        selectedIcon = null&#10;                        showIconPicker = false&#10;                    },&#10;                    enabled = nombre.isNotBlank()&#10;                ) {&#10;                    Text(&quot;Crear&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = {&#10;                    onDismiss()&#10;                    // Reset state&#10;                    nombre = &quot;&quot;&#10;                    selectedIcon = null&#10;                    showIconPicker = false&#10;                }) {&#10;                    Text(&quot;Cancelar&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun IconSelectionItem(&#10;    iconOption: IconPicker.IconOption,&#10;    isSelected: Boolean,&#10;    onIconSelected: () -&gt; Unit&#10;) {&#10;    val backgroundColor = if (isSelected) {&#10;        MaterialTheme.colorScheme.primaryContainer&#10;    } else {&#10;        MaterialTheme.colorScheme.surface&#10;    }&#10;&#10;    val borderColor = if (isSelected) {&#10;        MaterialTheme.colorScheme.primary&#10;    } else {&#10;        MaterialTheme.colorScheme.outline.copy(alpha = 0.5f)&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .size(48.dp)&#10;            .clip(RoundedCornerShape(8.dp))&#10;            .background(backgroundColor)&#10;            .border(&#10;                width = if (isSelected) 2.dp else 1.dp,&#10;                color = borderColor,&#10;                shape = RoundedCornerShape(8.dp)&#10;            )&#10;            .clickable { onIconSelected() },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = iconOption.icon,&#10;            contentDescription = iconOption.name,&#10;            modifier = Modifier.size(24.dp),&#10;            tint = if (isSelected) {&#10;                MaterialTheme.colorScheme.primary&#10;            } else {&#10;                MaterialTheme.colorScheme.onSurface&#10;            }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/component/DialogAddRecurso.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/component/DialogAddRecurso.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.presentation.component&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;&#10;@Composable&#10;fun DialogAddRecurso(&#10;    show: Boolean,&#10;    onDismiss: () -&gt; Unit,&#10;    onAccept: (String, String, String, String, String) -&gt; Unit&#10;) {&#10;    var nombre by remember { mutableStateOf(&quot;&quot;) }&#10;    var descripcion by remember { mutableStateOf(&quot;&quot;) }&#10;    var categoriaId by remember { mutableStateOf(&quot;&quot;) }&#10;    var link by remember { mutableStateOf(&quot;&quot;) }&#10;    var createdAt by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    if (show) {&#10;        AlertDialog(&#10;            onDismissRequest = onDismiss,&#10;            title = { Text(&quot;Agregar Recurso&quot;) },&#10;            text = {&#10;                Column {&#10;                    OutlinedTextField(&#10;                        value = nombre,&#10;                        onValueChange = { nombre = it },&#10;                        label = { Text(&quot;Nombre&quot;) },&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    OutlinedTextField(&#10;                        value = descripcion,&#10;                        onValueChange = { descripcion = it },&#10;                        label = { Text(&quot;Descripción&quot;) },&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    OutlinedTextField(&#10;                        value = categoriaId,&#10;                        onValueChange = { categoriaId = it },&#10;                        label = { Text(&quot;ID Categoría&quot;) },&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    OutlinedTextField(&#10;                        value = link,&#10;                        onValueChange = { link = it },&#10;                        label = { Text(&quot;Link&quot;) },&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    OutlinedTextField(&#10;                        value = createdAt,&#10;                        onValueChange = { createdAt = it },&#10;                        label = { Text(&quot;Fecha de creación&quot;) },&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;                }&#10;            },&#10;            confirmButton = {&#10;                Button(onClick = { onAccept(nombre, descripcion, categoriaId, link, createdAt) }) {&#10;                    Text(&quot;Aceptar&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                Button(onClick = onDismiss) {&#10;                    Text(&quot;Cancelar&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package esan.mendoza.impulso.presentation.component&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Link&#10;import androidx.compose.material.icons.filled.Mic&#10;import androidx.compose.material.icons.filled.MicOff&#10;import androidx.compose.material.icons.filled.Category&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import esan.mendoza.impulso.data.local.entities.Category&#10;import esan.mendoza.impulso.presentation.viewmodel.CategoryViewModel&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun DialogAddRecurso(&#10;    show: Boolean,&#10;    onDismiss: () -&gt; Unit,&#10;    onAccept: (String, String, String, String, String) -&gt; Unit,&#10;    categoryViewModel: CategoryViewModel = hiltViewModel()&#10;) {&#10;    var nombre by remember { mutableStateOf(&quot;&quot;) }&#10;    var descripcion by remember { mutableStateOf(&quot;&quot;) }&#10;    var link by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedCategory by remember { mutableStateOf&lt;Category?&gt;(null) }&#10;    var isRecording by remember { mutableStateOf(false) }&#10;    var showLinkField by remember { mutableStateOf(false) }&#10;    &#10;    val categories by categoryViewModel.categories.collectAsState()&#10;    val scrollState = rememberScrollState()&#10;    &#10;    // Fecha automática&#10;    val currentDate = remember {&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;        dateFormat.format(Date())&#10;    }&#10;&#10;    if (show) {&#10;        AlertDialog(&#10;            onDismissRequest = onDismiss,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .heightIn(max = 600.dp),&#10;            title = { &#10;                Text(&#10;                    &quot;Nuevo Recurso&quot;, &#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 20.sp&#10;                ) &#10;            },&#10;            text = {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .verticalScroll(scrollState),&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    // Campo Nombre&#10;                    OutlinedTextField(&#10;                        value = nombre,&#10;                        onValueChange = { nombre = it },&#10;                        label = { Text(&quot;Nombre del recurso&quot;) },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        singleLine = true,&#10;                        shape = RoundedCornerShape(12.dp),&#10;                        colors = OutlinedTextFieldDefaults.colors(&#10;                            focusedBorderColor = MaterialTheme.colorScheme.primary,&#10;                            focusedLabelColor = MaterialTheme.colorScheme.primary&#10;                        )&#10;                    )&#10;&#10;                    // Campo Descripción con opción de voz&#10;                    Text(&#10;                        text = &quot;Descripción&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    &#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(12.dp)&#10;                        ) {&#10;                            OutlinedTextField(&#10;                                value = descripcion,&#10;                                onValueChange = { descripcion = it },&#10;                                label = { Text(&quot;Describe tu recurso&quot;) },&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                minLines = 3,&#10;                                maxLines = 4,&#10;                                shape = RoundedCornerShape(8.dp),&#10;                                trailingIcon = {&#10;                                    IconButton(&#10;                                        onClick = { &#10;                                            isRecording = !isRecording&#10;                                            // TODO: Implementar reconocimiento de voz&#10;                                        }&#10;                                    ) {&#10;                                        Icon(&#10;                                            imageVector = if (isRecording) Icons.Default.MicOff else Icons.Default.Mic,&#10;                                            contentDescription = if (isRecording) &quot;Detener grabación&quot; else &quot;Grabar audio&quot;,&#10;                                            tint = if (isRecording) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.primary&#10;                                        )&#10;                                    }&#10;                                }&#10;                            )&#10;                            &#10;                            if (isRecording) {&#10;                                Spacer(modifier = Modifier.height(8.dp))&#10;                                Row(&#10;                                    verticalAlignment = Alignment.CenterVertically,&#10;                                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                                ) {&#10;                                    CircularProgressIndicator(&#10;                                        modifier = Modifier.size(16.dp),&#10;                                        strokeWidth = 2.dp,&#10;                                        color = MaterialTheme.colorScheme.error&#10;                                    )&#10;                                    Text(&#10;                                        text = &quot;Escuchando...&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall,&#10;                                        color = MaterialTheme.colorScheme.error&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Enlace opcional&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.SpaceBetween&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Enlace (opcional)&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                        &#10;                        Switch(&#10;                            checked = showLinkField,&#10;                            onCheckedChange = { showLinkField = it }&#10;                        )&#10;                    }&#10;                    &#10;                    if (showLinkField) {&#10;                        OutlinedTextField(&#10;                            value = link,&#10;                            onValueChange = { link = it },&#10;                            label = { Text(&quot;URL o enlace&quot;) },&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            singleLine = true,&#10;                            leadingIcon = {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Link,&#10;                                    contentDescription = null,&#10;                                    tint = MaterialTheme.colorScheme.primary&#10;                                )&#10;                            },&#10;                            placeholder = { Text(&quot;https://ejemplo.com&quot;) },&#10;                            shape = RoundedCornerShape(12.dp)&#10;                        )&#10;                    }&#10;&#10;                    // Selección de categoría&#10;                    Text(&#10;                        text = &quot;Seleccionar categoría&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;&#10;                    if (categories.isEmpty()) {&#10;                        Card(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = MaterialTheme.colorScheme.errorContainer&#10;                            )&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;No hay categorías disponibles. Crea una categoría primero.&quot;,&#10;                                modifier = Modifier.padding(16.dp),&#10;                                color = MaterialTheme.colorScheme.onErrorContainer,&#10;                                style = MaterialTheme.typography.bodyMedium&#10;                            )&#10;                        }&#10;                    } else {&#10;                        LazyRow(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                        ) {&#10;                            items(categories) { category -&gt;&#10;                                CategorySelectionCard(&#10;                                    category = category,&#10;                                    isSelected = selectedCategory == category,&#10;                                    onCategorySelected = { &#10;                                        selectedCategory = if (selectedCategory == category) null else category&#10;                                    }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Información de fecha&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                        )&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(12.dp),&#10;                            horizontalArrangement = Arrangement.SpaceBetween,&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;Fecha de creación:&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                            Text(&#10;                                text = currentDate,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = MaterialTheme.colorScheme.primary&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            },&#10;            confirmButton = {&#10;                Button(&#10;                    onClick = { &#10;                        val categoryId = selectedCategory?.id?.toString() ?: &quot;0&quot;&#10;                        val finalLink = if (showLinkField) link else &quot;&quot;&#10;                        onAccept(nombre, descripcion, categoryId, finalLink, currentDate)&#10;                        &#10;                        // Reset state&#10;                        nombre = &quot;&quot;&#10;                        descripcion = &quot;&quot;&#10;                        link = &quot;&quot;&#10;                        selectedCategory = null&#10;                        showLinkField = false&#10;                        isRecording = false&#10;                    },&#10;                    enabled = nombre.isNotBlank() &amp;&amp; descripcion.isNotBlank() &amp;&amp; selectedCategory != null,&#10;                    shape = RoundedCornerShape(8.dp)&#10;                ) {&#10;                    Text(&quot;Crear Recurso&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        onDismiss()&#10;                        // Reset state&#10;                        nombre = &quot;&quot;&#10;                        descripcion = &quot;&quot;&#10;                        link = &quot;&quot;&#10;                        selectedCategory = null&#10;                        showLinkField = false&#10;                        isRecording = false&#10;                    },&#10;                    shape = RoundedCornerShape(8.dp)&#10;                ) {&#10;                    Text(&quot;Cancelar&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CategorySelectionCard(&#10;    category: Category,&#10;    isSelected: Boolean,&#10;    onCategorySelected: () -&gt; Unit&#10;) {&#10;    val backgroundColor = if (isSelected) {&#10;        MaterialTheme.colorScheme.primaryContainer&#10;    } else {&#10;        MaterialTheme.colorScheme.surface&#10;    }&#10;    &#10;    val borderColor = if (isSelected) {&#10;        MaterialTheme.colorScheme.primary&#10;    } else {&#10;        MaterialTheme.colorScheme.outline.copy(alpha = 0.5f)&#10;    }&#10;    &#10;    val categoryIcon = IconPicker.getIconByName(category.icono) ?: Icons.Default.Category&#10;&#10;    Card(&#10;        modifier = Modifier&#10;            .width(120.dp)&#10;            .clip(RoundedCornerShape(12.dp))&#10;            .background(backgroundColor)&#10;            .border(&#10;                width = if (isSelected) 2.dp else 1.dp,&#10;                color = borderColor,&#10;                shape = RoundedCornerShape(12.dp)&#10;            )&#10;            .clickable { onCategorySelected() },&#10;        elevation = CardDefaults.cardElevation(&#10;            defaultElevation = if (isSelected) 6.dp else 2.dp&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = categoryIcon,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(24.dp),&#10;                tint = if (isSelected) {&#10;                    MaterialTheme.colorScheme.primary&#10;                } else {&#10;                    MaterialTheme.colorScheme.onSurface&#10;                }&#10;            )&#10;            &#10;            Text(&#10;                text = category.nombre,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = if (isSelected) {&#10;                    MaterialTheme.colorScheme.primary&#10;                } else {&#10;                    MaterialTheme.colorScheme.onSurface&#10;                },&#10;                fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Normal,&#10;                maxLines = 2,&#10;                textAlign = TextAlign.Center&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/component/IconPicker.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/component/IconPicker.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.presentation.component&#10;&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;&#10;object IconPicker {&#10;    data class IconOption(&#10;        val name: String,&#10;        val icon: ImageVector&#10;    )&#10;&#10;    val availableIcons = listOf(&#10;        IconOption(&quot;Trabajo&quot;, Icons.Default.Work),&#10;        IconOption(&quot;Educación&quot;, Icons.Default.School),&#10;        IconOption(&quot;Entretenimiento&quot;, Icons.Default.Movie),&#10;        IconOption(&quot;Tecnología&quot;, Icons.Default.Computer),&#10;        IconOption(&quot;Deportes&quot;, Icons.Default.SportsBaseball),&#10;        IconOption(&quot;Música&quot;, Icons.Default.MusicNote),&#10;        IconOption(&quot;Cocina&quot;, Icons.Default.Restaurant),&#10;        IconOption(&quot;Viajes&quot;, Icons.Default.Flight),&#10;        IconOption(&quot;Salud&quot;, Icons.Default.LocalHospital),&#10;        IconOption(&quot;Compras&quot;, Icons.Default.ShoppingCart),&#10;        IconOption(&quot;Arte&quot;, Icons.Default.Palette),&#10;        IconOption(&quot;Libros&quot;, Icons.Default.MenuBook),&#10;        IconOption(&quot;Gaming&quot;, Icons.Default.SportsEsports),&#10;        IconOption(&quot;Fotografía&quot;, Icons.Default.PhotoCamera),&#10;        IconOption(&quot;Fitness&quot;, Icons.Default.FitnessCenter),&#10;        IconOption(&quot;Finanzas&quot;, Icons.Default.AccountBalance),&#10;        IconOption(&quot;Casa&quot;, Icons.Default.Home),&#10;        IconOption(&quot;Herramientas&quot;, Icons.Default.Build),&#10;        IconOption(&quot;Diseño&quot;, Icons.Default.Brush),&#10;        IconOption(&quot;Ciencia&quot;, Icons.Default.Science),&#10;        IconOption(&quot;Negocios&quot;, Icons.Default.Business),&#10;        IconOption(&quot;Comunicación&quot;, Icons.Default.Chat),&#10;        IconOption(&quot;Seguridad&quot;, Icons.Default.Security),&#10;        IconOption(&quot;Naturaleza&quot;, Icons.Default.Park),&#10;        IconOption(&quot;Automóvil&quot;, Icons.Default.DirectionsCar),&#10;        IconOption(&quot;Mascotas&quot;, Icons.Default.Pets),&#10;        IconOption(&quot;Juegos&quot;, Icons.Default.Casino),&#10;        IconOption(&quot;Redes&quot;, Icons.Default.Share),&#10;        IconOption(&quot;Favoritos&quot;, Icons.Default.Favorite),&#10;        IconOption(&quot;Estrella&quot;, Icons.Default.Star),&#10;        IconOption(&quot;Configuración&quot;, Icons.Default.Settings),&#10;        IconOption(&quot;Información&quot;, Icons.Default.SensorOccupied)&#10;    )&#10;&#10;    fun getIconByName(name: String): ImageVector? {&#10;        return availableIcons.find { it.name == name }?.icon&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package esan.mendoza.impulso.presentation.component&#10;&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.Chat&#10;import androidx.compose.material.icons.automirrored.filled.MenuBook&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;&#10;object IconPicker {&#10;    data class IconOption(&#10;        val name: String,&#10;        val icon: ImageVector&#10;    )&#10;&#10;    val availableIcons = listOf(&#10;        IconOption(&quot;Trabajo&quot;, Icons.Default.Work),&#10;        IconOption(&quot;Educación&quot;, Icons.Default.School),&#10;        IconOption(&quot;Entretenimiento&quot;, Icons.Default.Movie),&#10;        IconOption(&quot;Tecnología&quot;, Icons.Default.Computer),&#10;        IconOption(&quot;Deportes&quot;, Icons.Default.SportsBaseball),&#10;        IconOption(&quot;Música&quot;, Icons.Default.MusicNote),&#10;        IconOption(&quot;Cocina&quot;, Icons.Default.Restaurant),&#10;        IconOption(&quot;Viajes&quot;, Icons.Default.Flight),&#10;        IconOption(&quot;Salud&quot;, Icons.Default.LocalHospital),&#10;        IconOption(&quot;Compras&quot;, Icons.Default.ShoppingCart),&#10;        IconOption(&quot;Arte&quot;, Icons.Default.Palette),&#10;        IconOption(&quot;Libros&quot;, Icons.AutoMirrored.Default.MenuBook),&#10;        IconOption(&quot;Gaming&quot;, Icons.Default.SportsEsports),&#10;        IconOption(&quot;Fotografía&quot;, Icons.Default.PhotoCamera),&#10;        IconOption(&quot;Fitness&quot;, Icons.Default.FitnessCenter),&#10;        IconOption(&quot;Finanzas&quot;, Icons.Default.AccountBalance),&#10;        IconOption(&quot;Casa&quot;, Icons.Default.Home),&#10;        IconOption(&quot;Herramientas&quot;, Icons.Default.Build),&#10;        IconOption(&quot;Diseño&quot;, Icons.Default.Brush),&#10;        IconOption(&quot;Ciencia&quot;, Icons.Default.Science),&#10;        IconOption(&quot;Negocios&quot;, Icons.Default.Business),&#10;        IconOption(&quot;Comunicación&quot;, Icons.AutoMirrored.Default.Chat),&#10;        IconOption(&quot;Seguridad&quot;, Icons.Default.Security),&#10;        IconOption(&quot;Naturaleza&quot;, Icons.Default.Park),&#10;        IconOption(&quot;Automóvil&quot;, Icons.Default.DirectionsCar),&#10;        IconOption(&quot;Mascotas&quot;, Icons.Default.Pets),&#10;        IconOption(&quot;Juegos&quot;, Icons.Default.Casino),&#10;        IconOption(&quot;Redes&quot;, Icons.Default.Share),&#10;        IconOption(&quot;Favoritos&quot;, Icons.Default.Favorite),&#10;        IconOption(&quot;Estrella&quot;, Icons.Default.Star),&#10;        IconOption(&quot;Configuración&quot;, Icons.Default.Settings),&#10;        IconOption(&quot;Información&quot;, Icons.Default.Info)&#10;    )&#10;&#10;    fun getIconByName(name: String): ImageVector? {&#10;        return availableIcons.find { it.name == name }?.icon&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/favoritesScreen/FavoritesScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/favoritesScreen/FavoritesScreen.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package esan.mendoza.impulso.presentation.favoritesScreen&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.FavoriteBorder&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.data.local.entities.Category&#10;import esan.mendoza.impulso.presentation.principalScreen.RecursoCard&#10;import esan.mendoza.impulso.presentation.viewmodel.CategoryViewModel&#10;import esan.mendoza.impulso.presentation.viewmodel.RecursoViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun FavoritesScreen(&#10;    onBackClick: () -&gt; Unit,&#10;    onResourceClick: (Recurso, Category?) -&gt; Unit,&#10;    categoryViewModel: CategoryViewModel = hiltViewModel(),&#10;    recursoViewModel: RecursoViewModel = hiltViewModel()&#10;) {&#10;    val categories by categoryViewModel.categories.collectAsState()&#10;    val recursos by recursoViewModel.recursos.collectAsState()&#10;    val isLoading by recursoViewModel.isLoading.collectAsState()&#10;&#10;    // Cargar favoritos al entrar a la pantalla&#10;    LaunchedEffect(Unit) {&#10;        recursoViewModel.loadFavoriteRecursos()&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        // Top Bar&#10;        TopAppBar(&#10;            title = { &#10;                Text(&#10;                    &quot;Mis Favoritos&quot;,&#10;                    fontSize = 20.sp,&#10;                    fontWeight = FontWeight.Bold&#10;                ) &#10;            },&#10;            navigationIcon = {&#10;                IconButton(onClick = onBackClick) {&#10;                    Icon(&#10;                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                        contentDescription = &quot;Volver&quot;&#10;                    )&#10;                }&#10;            }&#10;        )&#10;&#10;        // Content&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp)&#10;        ) {&#10;            when {&#10;                isLoading -&gt; {&#10;                    CircularProgressIndicator(&#10;                        modifier = Modifier.align(Alignment.Center)&#10;                    )&#10;                }&#10;                recursos.isEmpty() -&gt; {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxSize()&#10;                            .padding(32.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.Center&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.FavoriteBorder,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(64.dp),&#10;                            tint = MaterialTheme.colorScheme.outline&#10;                        )&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(&#10;                            text = &quot;No tienes recursos favoritos&quot;,&#10;                            style = MaterialTheme.typography.headlineSmall,&#10;                            color = MaterialTheme.colorScheme.outline&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&#10;                            text = &quot;Agrega recursos a favoritos presionando el ícono del corazón&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.outline&#10;                        )&#10;                    }&#10;                }&#10;                else -&gt; {&#10;                    Column {&#10;                        Text(&#10;                            text = &quot;${recursos.size} recursos favoritos&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = MaterialTheme.colorScheme.primary,&#10;                            modifier = Modifier.padding(bottom = 16.dp)&#10;                        )&#10;                        &#10;                        LazyVerticalGrid(&#10;                            columns = GridCells.Fixed(2),&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalArrangement = Arrangement.spacedBy(8.dp),&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                        ) {&#10;                            items(recursos) { recurso -&gt;&#10;                                esan.mendoza.impulso.presentation.principalScreen.RecursoCard(&#10;                                    recurso = recurso,&#10;                                    categories = categories,&#10;                                    onResourceClick = onResourceClick,&#10;                                    onToggleFavorite = { recursoId -&gt;&#10;                                        recursoViewModel.toggleFavorite(recursoId)&#10;                                    }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/homeScreen/HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/homeScreen/HomeScreen.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.presentation.homeScreen&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.slideInVertically&#10;import androidx.compose.animation.slideOutVertically&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.AddRoad&#10;import androidx.compose.material.icons.filled.Category&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.data.local.entities.Category&#10;import esan.mendoza.impulso.presentation.principalScreen.PrincipalScreen&#10;import esan.mendoza.impulso.presentation.resourceDetailScreen.ResourceDetailScreen&#10;import esan.mendoza.impulso.presentation.navigation.Screen&#10;import esan.mendoza.impulso.presentation.navigation.NavigationState&#10;import esan.mendoza.impulso.presentation.viewmodel.CategoryViewModel&#10;import esan.mendoza.impulso.presentation.viewmodel.RecursoViewModel&#10;import esan.mendoza.impulso.presentation.favoritesScreen.FavoritesScreen&#10;import esan.mendoza.impulso.presentation.settingsScreen.SettingsScreen&#10;&#10;@Composable&#10;fun HomeScreen(&#10;    categoryViewModel: CategoryViewModel = hiltViewModel(),&#10;    recursoViewModel: RecursoViewModel = hiltViewModel()&#10;) {&#10;    var navigationState by remember { mutableStateOf(NavigationState()) }&#10;    var fabsVisible by remember { mutableStateOf(false) }&#10;    var showAddCategoryDialog by remember { mutableStateOf(false) }&#10;    var showAddRecursoDialog by remember { mutableStateOf(false) }&#10;&#10;    Scaffold(&#10;        floatingActionButton = {&#10;            // Solo mostrar FAB principal en la pantalla HOME&#10;            if (navigationState.currentScreen == Screen.HOME) {&#10;                FloatingActionButton(&#10;                    onClick = {&#10;                        fabsVisible = !fabsVisible&#10;                    },&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = if (fabsVisible) Icons.Default.Close else Icons.Default.Add,&#10;                        contentDescription = if (fabsVisible) &quot;Close&quot; else &quot;Open Menu&quot;,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    ) { innerPadding -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .padding(innerPadding)&#10;                .fillMaxSize()&#10;        ) {&#10;            // Contenido principal basado en la pantalla actual&#10;            when (navigationState.currentScreen) {&#10;                Screen.HOME -&gt; {&#10;                    Column(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        PrincipalScreen(&#10;                            categoryViewModel = categoryViewModel,&#10;                            recursoViewModel = recursoViewModel,&#10;                            onResourceClick = { recurso, category -&gt;&#10;                                navigationState = navigationState.copy(&#10;                                    currentScreen = Screen.RESOURCE_DETAIL,&#10;                                    selectedRecurso = recurso,&#10;                                    selectedCategory = category&#10;                                )&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Screen.RESOURCE_DETAIL -&gt; {&#10;                    navigationState.selectedRecurso?.let { recurso -&gt;&#10;                        ResourceDetailScreen(&#10;                            recurso = recurso,&#10;                            category = navigationState.selectedCategory,&#10;                            onBackClick = {&#10;                                navigationState = navigationState.copy(&#10;                                    currentScreen = Screen.HOME,&#10;                                    selectedRecurso = null,&#10;                                    selectedCategory = null&#10;                                )&#10;                            },&#10;                            onEditClick = {&#10;                                // TODO: Implementar edición de recurso&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Screen.FAVORITES -&gt; {&#10;                    FavoritesScreen(&#10;                        onBackClick = {&#10;                            navigationState = navigationState.copy(currentScreen = Screen.HOME)&#10;                        },&#10;                        onResourceClick = { recurso, category -&gt;&#10;                            navigationState = navigationState.copy(&#10;                                currentScreen = Screen.RESOURCE_DETAIL,&#10;                                selectedRecurso = recurso,&#10;                                selectedCategory = category&#10;                            )&#10;                        },&#10;                        categoryViewModel = categoryViewModel,&#10;                        recursoViewModel = recursoViewModel&#10;                    )&#10;                }&#10;&#10;                Screen.SETTINGS -&gt; {&#10;                    SettingsScreen(&#10;                        onBackClick = {&#10;                            navigationState = navigationState.copy(currentScreen = Screen.HOME)&#10;                        },&#10;                        categoryViewModel = categoryViewModel&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // FABs secundarios posicionados en la esquina inferior derecha (solo en HOME)&#10;        if (navigationState.currentScreen == Screen.HOME) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(bottom = 80.dp), // Espacio para el FAB principal&#10;                contentAlignment = Alignment.BottomEnd&#10;            ) {&#10;                FABColumn(&#10;                    isVisible = fabsVisible,&#10;                    fabsEnabled = true,&#10;                    onAddCategory = { showAddCategoryDialog = true },&#10;                    onAddRecurso = { showAddRecursoDialog = true },&#10;                    onFavorites = {&#10;                        navigationState = navigationState.copy(currentScreen = Screen.FAVORITES)&#10;                        fabsVisible = false&#10;                    },&#10;                    onSettings = {&#10;                        navigationState = navigationState.copy(currentScreen = Screen.SETTINGS)&#10;                        fabsVisible = false&#10;                    }&#10;                )&#10;            }&#10;        }&#10;&#10;        // Diálogos (disponibles en todas las pantallas)&#10;        esan.mendoza.impulso.presentation.component.DialogAddCategory(&#10;            show = showAddCategoryDialog,&#10;            onDismiss = { showAddCategoryDialog = false },&#10;            onAccept = { nombre, icono -&gt;&#10;                categoryViewModel.addCategory(nombre, icono)&#10;                showAddCategoryDialog = false&#10;            }&#10;        )&#10;&#10;        esan.mendoza.impulso.presentation.component.DialogAddRecurso(&#10;            show = showAddRecursoDialog,&#10;            onDismiss = { showAddRecursoDialog = false },&#10;            onAccept = { nombre, descripcion, categoriaId, link, createdAt -&gt;&#10;                recursoViewModel.addRecurso(nombre, descripcion, categoriaId.toIntOrNull() ?: 0, link, createdAt)&#10;                showAddRecursoDialog = false&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CustomFAB(&#10;    icon: ImageVector,&#10;    contentDescription: String,&#10;    onClick: () -&gt; Unit,&#10;    enabled: Boolean = true&#10;) {&#10;    FloatingActionButton(&#10;        onClick = onClick,&#10;        modifier = Modifier&#10;            .padding(vertical = 4.dp, horizontal = 16.dp)&#10;            .alpha(if (enabled) 1f else 0.9f),&#10;        containerColor = if (enabled) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.surfaceVariant&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = contentDescription,&#10;            modifier = Modifier.size(24.dp),&#10;            tint = if (enabled) MaterialTheme.colorScheme.onPrimary else MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FABColumn(&#10;    isVisible: Boolean,&#10;    fabsEnabled: Boolean,&#10;    onAddCategory: () -&gt; Unit,&#10;    onAddRecurso: () -&gt; Unit,&#10;    onFavorites: () -&gt; Unit,&#10;    onSettings: () -&gt; Unit&#10;) {&#10;    AnimatedVisibility(&#10;        visible = isVisible,&#10;        enter = slideInVertically(&#10;            initialOffsetY = { it },&#10;            animationSpec = tween(300)&#10;        ) + fadeIn(animationSpec = tween(300)),&#10;        exit = slideOutVertically(&#10;            targetOffsetY = { it },&#10;            animationSpec = tween(300)&#10;        ) + fadeOut(animationSpec = tween(300))&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .padding(end = 16.dp, bottom = 32.dp),&#10;            verticalArrangement = Arrangement.spacedBy(8.dp),&#10;            horizontalAlignment = Alignment.End&#10;        ) {&#10;            CustomFAB(&#10;                icon = Icons.Default.AddRoad,&#10;                contentDescription = &quot;Añadir Recurso&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onAddRecurso()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;&#10;            CustomFAB(&#10;                icon = Icons.Default.Category,&#10;                contentDescription = &quot;Añadir Categoria&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onAddCategory()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;&#10;            CustomFAB(&#10;                icon = Icons.Default.Favorite,&#10;                contentDescription = &quot;Mis Favoritos&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onFavorites()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;&#10;            CustomFAB(&#10;                icon = Icons.Default.Settings,&#10;                contentDescription = &quot;Configuración de categorias y recursos&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onSettings()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package esan.mendoza.impulso.presentation.homeScreen&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.slideInVertically&#10;import androidx.compose.animation.slideOutVertically&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.AddRoad&#10;import androidx.compose.material.icons.filled.Category&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.data.local.entities.Category&#10;import esan.mendoza.impulso.presentation.principalScreen.PrincipalScreen&#10;import esan.mendoza.impulso.presentation.resourceDetailScreen.ResourceDetailScreen&#10;import esan.mendoza.impulso.presentation.navigation.Screen&#10;import esan.mendoza.impulso.presentation.navigation.NavigationState&#10;import esan.mendoza.impulso.presentation.viewmodel.CategoryViewModel&#10;import esan.mendoza.impulso.presentation.viewmodel.RecursoViewModel&#10;import esan.mendoza.impulso.presentation.favoritesScreen.FavoritesScreen&#10;import esan.mendoza.impulso.presentation.settingsScreen.SettingsScreen&#10;&#10;@Composable&#10;fun HomeScreen(&#10;    categoryViewModel: CategoryViewModel = hiltViewModel(),&#10;    recursoViewModel: RecursoViewModel = hiltViewModel()&#10;) {&#10;    var navigationState by remember { mutableStateOf(NavigationState()) }&#10;    var fabsVisible by remember { mutableStateOf(false) }&#10;    var showAddCategoryDialog by remember { mutableStateOf(false) }&#10;    var showAddRecursoDialog by remember { mutableStateOf(false) }&#10;&#10;    Scaffold(&#10;        floatingActionButton = {&#10;            // Solo mostrar FAB principal en la pantalla HOME&#10;            if (navigationState.currentScreen == Screen.HOME) {&#10;                FloatingActionButton(&#10;                    onClick = {&#10;                        fabsVisible = !fabsVisible&#10;                    },&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = if (fabsVisible) Icons.Default.Close else Icons.Default.Add,&#10;                        contentDescription = if (fabsVisible) &quot;Close&quot; else &quot;Open Menu&quot;,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    ) { innerPadding -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .padding(innerPadding)&#10;                .fillMaxSize()&#10;        ) {&#10;            // Contenido principal basado en la pantalla actual&#10;            when (navigationState.currentScreen) {&#10;                Screen.HOME -&gt; {&#10;                    Column(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        PrincipalScreen(&#10;                            categoryViewModel = categoryViewModel,&#10;                            recursoViewModel = recursoViewModel,&#10;                            onResourceClick = { recurso, category -&gt;&#10;                                navigationState = navigationState.copy(&#10;                                    currentScreen = Screen.RESOURCE_DETAIL,&#10;                                    selectedRecurso = recurso,&#10;                                    selectedCategory = category&#10;                                )&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Screen.RESOURCE_DETAIL -&gt; {&#10;                    navigationState.selectedRecurso?.let { recurso -&gt;&#10;                        ResourceDetailScreen(&#10;                            recurso = recurso,&#10;                            category = navigationState.selectedCategory,&#10;                            onBackClick = {&#10;                                navigationState = navigationState.copy(&#10;                                    currentScreen = Screen.HOME,&#10;                                    selectedRecurso = null,&#10;                                    selectedCategory = null&#10;                                )&#10;                            },&#10;                            onEditClick = {&#10;                                // TODO: Implementar edición de recurso&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Screen.FAVORITES -&gt; {&#10;                    FavoritesScreen(&#10;                        onBackClick = {&#10;                            navigationState = navigationState.copy(currentScreen = Screen.HOME)&#10;                        },&#10;                        onResourceClick = { recurso, category -&gt;&#10;                            navigationState = navigationState.copy(&#10;                                currentScreen = Screen.RESOURCE_DETAIL,&#10;                                selectedRecurso = recurso,&#10;                                selectedCategory = category&#10;                            )&#10;                        },&#10;                        categoryViewModel = categoryViewModel,&#10;                        recursoViewModel = recursoViewModel&#10;                    )&#10;                }&#10;&#10;                Screen.SETTINGS -&gt; {&#10;                    SettingsScreen(&#10;                        onBackClick = {&#10;                            navigationState = navigationState.copy(currentScreen = Screen.HOME)&#10;                        },&#10;                        categoryViewModel = categoryViewModel&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // FABs secundarios posicionados en la esquina inferior derecha (solo en HOME)&#10;        if (navigationState.currentScreen == Screen.HOME) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(bottom = 80.dp), // Espacio para el FAB principal&#10;                contentAlignment = Alignment.BottomEnd&#10;            ) {&#10;                FABColumn(&#10;                    isVisible = fabsVisible,&#10;                    fabsEnabled = true,&#10;                    onAddCategory = { showAddCategoryDialog = true },&#10;                    onAddRecurso = { showAddRecursoDialog = true },&#10;                    onFavorites = {&#10;                        navigationState = navigationState.copy(currentScreen = Screen.FAVORITES)&#10;                        fabsVisible = false&#10;                    },&#10;                    onSettings = {&#10;                        navigationState = navigationState.copy(currentScreen = Screen.SETTINGS)&#10;                        fabsVisible = false&#10;                    }&#10;                )&#10;            }&#10;        }&#10;&#10;        // Diálogos (disponibles en todas las pantallas)&#10;        esan.mendoza.impulso.presentation.component.DialogAddCategory(&#10;            show = showAddCategoryDialog,&#10;            onDismiss = { showAddCategoryDialog = false },&#10;            onAccept = { nombre, icono -&gt;&#10;                categoryViewModel.addCategory(nombre, icono)&#10;                showAddCategoryDialog = false&#10;            }&#10;        )&#10;&#10;        esan.mendoza.impulso.presentation.component.DialogAddRecurso(&#10;            show = showAddRecursoDialog,&#10;            onDismiss = { showAddRecursoDialog = false },&#10;            onAccept = { nombre, descripcion, categoriaId, link, createdAt -&gt;&#10;                recursoViewModel.addRecurso(nombre, descripcion, categoriaId.toIntOrNull() ?: 0, link, createdAt)&#10;                showAddRecursoDialog = false&#10;            },&#10;            categoryViewModel = categoryViewModel&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CustomFAB(&#10;    icon: ImageVector,&#10;    contentDescription: String,&#10;    onClick: () -&gt; Unit,&#10;    enabled: Boolean = true&#10;) {&#10;    FloatingActionButton(&#10;        onClick = onClick,&#10;        modifier = Modifier&#10;            .padding(vertical = 4.dp, horizontal = 16.dp)&#10;            .alpha(if (enabled) 1f else 0.9f),&#10;        containerColor = if (enabled) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.surfaceVariant&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = contentDescription,&#10;            modifier = Modifier.size(24.dp),&#10;            tint = if (enabled) MaterialTheme.colorScheme.onPrimary else MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FABColumn(&#10;    isVisible: Boolean,&#10;    fabsEnabled: Boolean,&#10;    onAddCategory: () -&gt; Unit,&#10;    onAddRecurso: () -&gt; Unit,&#10;    onFavorites: () -&gt; Unit,&#10;    onSettings: () -&gt; Unit&#10;) {&#10;    AnimatedVisibility(&#10;        visible = isVisible,&#10;        enter = slideInVertically(&#10;            initialOffsetY = { it },&#10;            animationSpec = tween(300)&#10;        ) + fadeIn(animationSpec = tween(300)),&#10;        exit = slideOutVertically(&#10;            targetOffsetY = { it },&#10;            animationSpec = tween(300)&#10;        ) + fadeOut(animationSpec = tween(300))&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .padding(end = 16.dp, bottom = 32.dp),&#10;            verticalArrangement = Arrangement.spacedBy(8.dp),&#10;            horizontalAlignment = Alignment.End&#10;        ) {&#10;            CustomFAB(&#10;                icon = Icons.Default.AddRoad,&#10;                contentDescription = &quot;Añadir Recurso&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onAddRecurso()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;&#10;            CustomFAB(&#10;                icon = Icons.Default.Category,&#10;                contentDescription = &quot;Añadir Categoria&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onAddCategory()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;&#10;            CustomFAB(&#10;                icon = Icons.Default.Favorite,&#10;                contentDescription = &quot;Mis Favoritos&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onFavorites()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;&#10;            CustomFAB(&#10;                icon = Icons.Default.Settings,&#10;                contentDescription = &quot;Configuración de categorias y recursos&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onSettings()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/navigation/NavigationState.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/navigation/NavigationState.kt" />
              <option name="updatedContent" value="package esan.mendoza.impulso.presentation.navigation&#10;&#10;enum class Screen {&#10;    HOME,&#10;    RESOURCE_DETAIL,&#10;    FAVORITES,&#10;    SETTINGS&#10;}&#10;&#10;data class NavigationState(&#10;    val currentScreen: Screen = Screen.HOME,&#10;    val selectedRecurso: esan.mendoza.impulso.data.local.entities.Recurso? = null,&#10;    val selectedCategory: esan.mendoza.impulso.data.local.entities.Category? = null&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/principalScreen/PrincipalScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/principalScreen/PrincipalScreen.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.presentation.principalScreen&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.BorderAll&#10;import androidx.compose.material.icons.filled.Category&#10;import androidx.compose.material.icons.filled.DashboardCustomize&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.FavoriteBorder&#10;import androidx.compose.material.icons.filled.Link&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material.icons.filled.Share&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.OutlinedTextFieldDefaults&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.presentation.component.IconPicker&#10;import esan.mendoza.impulso.presentation.viewmodel.CategoryViewModel&#10;import esan.mendoza.impulso.presentation.viewmodel.RecursoViewModel&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;@Composable&#10;fun PrincipalScreen(&#10;    categoryViewModel: CategoryViewModel,&#10;    recursoViewModel: RecursoViewModel,&#10;    onResourceClick: (Recurso, esan.mendoza.impulso.data.local.entities.Category?) -&gt; Unit = { _, _ -&gt; }&#10;) {&#10;    val categories by categoryViewModel.categories.collectAsState()&#10;    val recursos by recursoViewModel.recursos.collectAsState()&#10;    val isLoading by categoryViewModel.isLoading.collectAsState()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;    ) {&#10;        Row {&#10;            Icon(&#10;                imageVector = Icons.Filled.DashboardCustomize,&#10;                contentDescription = &quot;Icono de flecha hacia abajo&quot;,&#10;                modifier = Modifier&#10;                    .padding(end = 8.dp)&#10;                    .align(Alignment.CenterVertically).size(55.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Column {&#10;                Text(&#10;                    &quot;IMPULSO&quot;,&#10;                    style = MaterialTheme.typography.headlineLarge,&#10;                )&#10;                Text(&#10;                    &quot;Organiza tu universo&quot;,&#10;                    style = MaterialTheme.typography.titleSmall,&#10;                    modifier = Modifier.padding(bottom = 5.dp)&#10;                )&#10;            }&#10;&#10;        }&#10;        Spacer(modifier = Modifier.height(10.dp))&#10;        Buscador(&#10;            categories = categories,&#10;            onSearch = { query -&gt; recursoViewModel.searchRecursosByName(query) },&#10;            onCategorySelected = { categoryId -&gt; &#10;                if (categoryId == -1) {&#10;                    recursoViewModel.loadRecursos()&#10;                } else {&#10;                    recursoViewModel.loadRecursosByCategory(categoryId)&#10;                }&#10;            }&#10;        )&#10;        Spacer(modifier = Modifier.height(10.dp))&#10;&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 8.dp),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;            text = &quot;Recursos&quot;,&#10;            style = MaterialTheme.typography.titleLarge,&#10;        )&#10;            Icon(&#10;                imageVector = Icons.Default.BorderAll,&#10;                contentDescription = &quot;Icono de filtro&quot;,&#10;                modifier = Modifier&#10;                    .padding(end = 8.dp)&#10;                    .size(30.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;        }&#10;        RecursoGrid(&#10;            recursos = recursos,&#10;            categories = categories,&#10;            onResourceClick = onResourceClick,&#10;            onToggleFavorite = { recursoId -&gt;&#10;                recursoViewModel.toggleFavorite(recursoId)&#10;            }&#10;        )&#10;&#10;    }&#10;}&#10;&#10;@Composable&#10;fun Buscador(&#10;    categories: List&lt;esan.mendoza.impulso.data.local.entities.Category&gt; = emptyList(),&#10;    onSearch: (String) -&gt; Unit = {},&#10;    onCategorySelected: (Int) -&gt; Unit = {}&#10;) {&#10;    var expanded by remember { mutableStateOf(false) }&#10;    var selectedOption by remember { mutableStateOf(&quot;Todas las categorias&quot;) }&#10;    var selectedCategoryId by remember { mutableStateOf(-1) }&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    val options = listOf(&quot;Todas las categorias&quot;) + categories.map { it.nombre }&#10;&#10;    // Campo de búsqueda con ícono integrado&#10;    OutlinedTextField(&#10;        value = searchQuery,&#10;        onValueChange = {&#10;            searchQuery = it&#10;            onSearch(it)&#10;        },&#10;        modifier = Modifier.fillMaxWidth(),&#10;        label = { Text(&quot;Buscar&quot;) },&#10;        leadingIcon = {&#10;            Icon(&#10;                imageVector = Icons.Default.Search,&#10;                contentDescription = &quot;Ícono de búsqueda&quot;,&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;        },&#10;        singleLine = true,&#10;        shape = RoundedCornerShape(25.dp),&#10;        colors = OutlinedTextFieldDefaults.colors(&#10;            focusedBorderColor = MaterialTheme.colorScheme.primary,&#10;            unfocusedBorderColor = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f),&#10;            cursorColor = MaterialTheme.colorScheme.primary&#10;        )&#10;    )&#10;    LazyRow(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(top = 8.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        items(options.size) { index -&gt;&#10;            val option = options[index]&#10;            val isSelected = selectedOption == option&#10;            Button(&#10;                onClick = {&#10;                    selectedOption = option&#10;                    if (index == 0) {&#10;                        selectedCategoryId = -1&#10;                        onCategorySelected(-1)&#10;                    } else {&#10;                        selectedCategoryId = categories[index - 1].id&#10;                        onCategorySelected(categories[index - 1].id)&#10;                    }&#10;                },&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = if (isSelected) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary,&#10;                    contentColor = MaterialTheme.colorScheme.onPrimary&#10;                ),&#10;                shape = RoundedCornerShape(20.dp)&#10;            ) {&#10;                Text(&#10;                    text = option,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RecursoGrid(&#10;    recursos: List&lt;Recurso&gt;,&#10;    categories: List&lt;esan.mendoza.impulso.data.local.entities.Category&gt;,&#10;    onResourceClick: (Recurso, esan.mendoza.impulso.data.local.entities.Category?) -&gt; Unit = { _, _ -&gt; },&#10;    onToggleFavorite: (Int) -&gt; Unit = {}&#10;) {&#10;    LazyVerticalGrid(&#10;        columns = GridCells.Fixed(2),&#10;        modifier = Modifier.fillMaxWidth(),&#10;        verticalArrangement = Arrangement.spacedBy(3.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(3.dp)&#10;    ) {&#10;        items(recursos) { recurso -&gt;&#10;            RecursoCard(&#10;                recurso = recurso,&#10;                categories = categories,&#10;                onResourceClick = onResourceClick,&#10;                onToggleFavorite = onToggleFavorite&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;fun formatFecha(fecha: String): String {&#10;    // Suponiendo que recurso.createdAt es tipo &quot;yyyy-MM-dd&quot; o similar&#10;    return try {&#10;        val parser = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;        val date = parser.parse(fecha)&#10;        val formatter = SimpleDateFormat(&quot;yyyy/MM/dd&quot;, Locale.getDefault())&#10;        formatter.format(date!!)&#10;    } catch (e: Exception) {&#10;        fecha // Si falla, muestra la fecha original&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RecursoCard(&#10;    recurso: Recurso,&#10;    categories: List&lt;esan.mendoza.impulso.data.local.entities.Category&gt;,&#10;    onResourceClick: (Recurso, esan.mendoza.impulso.data.local.entities.Category?) -&gt; Unit = { _, _ -&gt; },&#10;    onToggleFavorite: (Int) -&gt; Unit = {}&#10;) {&#10;    val categoriaNombre = categories.find { it.id == recurso.categoriaId }?.nombre ?: &quot;Sin categoría&quot;&#10;    val categoria = categories.find { it.id == recurso.categoriaId }&#10;    val categoryIcon = categoria?.let {&#10;        IconPicker.getIconByName(it.icono) ?: Icons.Default.Category&#10;    } ?: Icons.Default.Category&#10;&#10;    Column {&#10;        Card(&#10;            modifier = Modifier&#10;                .padding(4.dp)&#10;                .fillMaxWidth()&#10;                .height(120.dp),&#10;            shape = RoundedCornerShape(16.dp),&#10;            onClick = { onResourceClick(recurso, categoria) }&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(8.dp)&#10;            ) {&#10;&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth(),&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.SpaceBetween&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .background(&#10;                                color = MaterialTheme.colorScheme.primary.copy(alpha = 0.1f),&#10;                                shape = RoundedCornerShape(8.dp)&#10;                            )&#10;                            .border(&#10;                                width = 1.dp,&#10;                                color = MaterialTheme.colorScheme.primary,&#10;                                shape = RoundedCornerShape(8.dp)&#10;                            ),&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier.padding(horizontal = 6.dp, vertical = 2.dp),&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = categoryIcon,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(12.dp),&#10;                                tint = MaterialTheme.colorScheme.primary&#10;                            )&#10;                            Text(&#10;                                text = categoriaNombre,&#10;                                style = MaterialTheme.typography.labelSmall,&#10;                                color = MaterialTheme.colorScheme.primary,&#10;                                maxLines = 1,&#10;                                overflow = TextOverflow.Ellipsis&#10;                            )&#10;                        }&#10;                    }&#10;                    Row {&#10;                        IconButton(&#10;                            onClick = { onToggleFavorite(recurso.id) },&#10;                            modifier = Modifier.size(24.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = if (recurso.isFavorite) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                                contentDescription = &quot;Favorito&quot;,&#10;                                modifier = Modifier.size(16.dp),&#10;                                tint = if (recurso.isFavorite) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.primary&#10;                            )&#10;                        }&#10;                        IconButton(&#10;                            onClick = { /* TODO: Implementar compartir */ },&#10;                            modifier = Modifier.size(24.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Share,&#10;                                contentDescription = &quot;Compartir&quot;,&#10;                                modifier = Modifier.size(16.dp),&#10;                                tint = MaterialTheme.colorScheme.primary&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = recurso.nombre,&#10;                    style = MaterialTheme.typography.titleSmall,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                HorizontalDivider(&#10;                    modifier = Modifier.padding(vertical = 2.dp),&#10;                )&#10;                Text(&#10;                    text = recurso.descripcion,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    maxLines = 3,&#10;                    overflow = TextOverflow.Ellipsis,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;        }&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 8.dp, vertical = 2.dp),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.DateRange,&#10;                    contentDescription = &quot;Icono de recurso&quot;,&#10;                    modifier = Modifier.size(10.dp),&#10;                    tint = MaterialTheme.colorScheme.primary&#10;                )&#10;                Text(&#10;                    text = formatFecha(recurso.createdAt),&#10;                    style = MaterialTheme.typography.labelSmall,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;            }&#10;            Icon(&#10;                imageVector = Icons.Default.Link,&#10;                contentDescription = &quot;Icono de recurso&quot;,&#10;                modifier = Modifier.size(20.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package esan.mendoza.impulso.presentation.principalScreen&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.BorderAll&#10;import androidx.compose.material.icons.filled.Category&#10;import androidx.compose.material.icons.filled.DashboardCustomize&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.FavoriteBorder&#10;import androidx.compose.material.icons.filled.Link&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material.icons.filled.Share&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.OutlinedTextFieldDefaults&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.presentation.component.IconPicker&#10;import esan.mendoza.impulso.presentation.viewmodel.CategoryViewModel&#10;import esan.mendoza.impulso.presentation.viewmodel.RecursoViewModel&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;@Composable&#10;fun PrincipalScreen(&#10;    categoryViewModel: CategoryViewModel,&#10;    recursoViewModel: RecursoViewModel,&#10;    onResourceClick: (Recurso, esan.mendoza.impulso.data.local.entities.Category?) -&gt; Unit = { _, _ -&gt; }&#10;) {&#10;    val categories by categoryViewModel.categories.collectAsState()&#10;    val recursos by recursoViewModel.recursos.collectAsState()&#10;    val isLoading by categoryViewModel.isLoading.collectAsState()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;    ) {&#10;        Row {&#10;            Icon(&#10;                imageVector = Icons.Filled.DashboardCustomize,&#10;                contentDescription = &quot;Icono de flecha hacia abajo&quot;,&#10;                modifier = Modifier&#10;                    .padding(end = 8.dp)&#10;                    .align(Alignment.CenterVertically).size(55.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Column {&#10;                Text(&#10;                    &quot;IMPULSO&quot;,&#10;                    style = MaterialTheme.typography.headlineLarge,&#10;                )&#10;                Text(&#10;                    &quot;Organiza tu universo&quot;,&#10;                    style = MaterialTheme.typography.titleSmall,&#10;                    modifier = Modifier.padding(bottom = 5.dp)&#10;                )&#10;            }&#10;&#10;        }&#10;        Spacer(modifier = Modifier.height(10.dp))&#10;        Buscador(&#10;            categories = categories,&#10;            onSearch = { query -&gt; recursoViewModel.searchRecursosByName(query) },&#10;            onCategorySelected = { categoryId -&gt; &#10;                if (categoryId == -1) {&#10;                    recursoViewModel.loadRecursos()&#10;                } else {&#10;                    recursoViewModel.loadRecursosByCategory(categoryId)&#10;                }&#10;            }&#10;        )&#10;        Spacer(modifier = Modifier.height(10.dp))&#10;&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 8.dp),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;            text = &quot;Recursos&quot;,&#10;            style = MaterialTheme.typography.titleLarge,&#10;        )&#10;            Icon(&#10;                imageVector = Icons.Default.BorderAll,&#10;                contentDescription = &quot;Icono de filtro&quot;,&#10;                modifier = Modifier&#10;                    .padding(end = 8.dp)&#10;                    .size(30.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;        }&#10;        RecursoGrid(&#10;            recursos = recursos,&#10;            categories = categories,&#10;            onResourceClick = onResourceClick,&#10;            onToggleFavorite = { recursoId -&gt;&#10;                recursoViewModel.toggleFavorite(recursoId)&#10;            }&#10;        )&#10;&#10;    }&#10;}&#10;&#10;@Composable&#10;fun Buscador(&#10;    categories: List&lt;esan.mendoza.impulso.data.local.entities.Category&gt; = emptyList(),&#10;    onSearch: (String) -&gt; Unit = {},&#10;    onCategorySelected: (Int) -&gt; Unit = {}&#10;) {&#10;    var expanded by remember { mutableStateOf(false) }&#10;    var selectedOption by remember { mutableStateOf(&quot;Todas las categorias&quot;) }&#10;    var selectedCategoryId by remember { mutableStateOf(-1) }&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    val options = listOf(&quot;Todas las categorias&quot;) + categories.map { it.nombre }&#10;&#10;    // Campo de búsqueda con ícono integrado&#10;    OutlinedTextField(&#10;        value = searchQuery,&#10;        onValueChange = {&#10;            searchQuery = it&#10;            onSearch(it)&#10;        },&#10;        modifier = Modifier.fillMaxWidth(),&#10;        label = { Text(&quot;Buscar&quot;) },&#10;        leadingIcon = {&#10;            Icon(&#10;                imageVector = Icons.Default.Search,&#10;                contentDescription = &quot;Ícono de búsqueda&quot;,&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;        },&#10;        singleLine = true,&#10;        shape = RoundedCornerShape(25.dp),&#10;        colors = OutlinedTextFieldDefaults.colors(&#10;            focusedBorderColor = MaterialTheme.colorScheme.primary,&#10;            unfocusedBorderColor = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f),&#10;            cursorColor = MaterialTheme.colorScheme.primary&#10;        )&#10;    )&#10;    LazyRow(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(top = 8.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        items(options.size) { index -&gt;&#10;            val option = options[index]&#10;            val isSelected = selectedOption == option&#10;            Button(&#10;                onClick = {&#10;                    selectedOption = option&#10;                    if (index == 0) {&#10;                        selectedCategoryId = -1&#10;                        onCategorySelected(-1)&#10;                    } else {&#10;                        selectedCategoryId = categories[index - 1].id&#10;                        onCategorySelected(categories[index - 1].id)&#10;                    }&#10;                },&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = if (isSelected) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary,&#10;                    contentColor = MaterialTheme.colorScheme.onPrimary&#10;                ),&#10;                shape = RoundedCornerShape(20.dp)&#10;            ) {&#10;                Text(&#10;                    text = option,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RecursoGrid(&#10;    recursos: List&lt;Recurso&gt;,&#10;    categories: List&lt;esan.mendoza.impulso.data.local.entities.Category&gt;,&#10;    onResourceClick: (Recurso, esan.mendoza.impulso.data.local.entities.Category?) -&gt; Unit = { _, _ -&gt; },&#10;    onToggleFavorite: (Int) -&gt; Unit = {}&#10;) {&#10;    LazyVerticalGrid(&#10;        columns = GridCells.Fixed(2),&#10;        modifier = Modifier.fillMaxWidth(),&#10;        verticalArrangement = Arrangement.spacedBy(3.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(3.dp)&#10;    ) {&#10;        items(recursos) { recurso -&gt;&#10;            RecursoCard(&#10;                recurso = recurso,&#10;                categories = categories,&#10;                onResourceClick = onResourceClick,&#10;                onToggleFavorite = onToggleFavorite&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;fun formatFecha(fecha: String): String {&#10;    // Suponiendo que recurso.createdAt es tipo &quot;yyyy-MM-dd&quot; o similar&#10;    return try {&#10;        val parser = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;        val date = parser.parse(fecha)&#10;        val formatter = SimpleDateFormat(&quot;yyyy/MM/dd&quot;, Locale.getDefault())&#10;        formatter.format(date!!)&#10;    } catch (e: Exception) {&#10;        fecha // Si falla, muestra la fecha original&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RecursoCard(&#10;    recurso: Recurso,&#10;    categories: List&lt;esan.mendoza.impulso.data.local.entities.Category&gt;,&#10;    onResourceClick: (Recurso, esan.mendoza.impulso.data.local.entities.Category?) -&gt; Unit = { _, _ -&gt; },&#10;    onToggleFavorite: (Int) -&gt; Unit = {}&#10;) {&#10;    val categoriaNombre = categories.find { it.id == recurso.categoriaId }?.nombre ?: &quot;Sin categoría&quot;&#10;    val categoria = categories.find { it.id == recurso.categoriaId }&#10;    val categoryIcon = categoria?.let { &#10;        IconPicker.getIconByName(it.icono) ?: Icons.Default.Category&#10;    } ?: Icons.Default.Category&#10;    &#10;    // Verificar si es el recurso de ejemplo&#10;    val isExampleResource = recurso.id == -1&#10;    &#10;    Column {&#10;        Card(&#10;            modifier = Modifier&#10;                .padding(4.dp)&#10;                .fillMaxWidth()&#10;                .height(120.dp),&#10;            shape = RoundedCornerShape(16.dp),&#10;            onClick = { &#10;                // Solo permitir clic en recursos reales, no en el ejemplo&#10;                if (!isExampleResource) {&#10;                    onResourceClick(recurso, categoria)&#10;                }&#10;            }&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(8.dp)&#10;            ) {&#10;&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth(),&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.SpaceBetween&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .background(&#10;                                color = if (isExampleResource) &#10;                                    MaterialTheme.colorScheme.tertiary.copy(alpha = 0.1f)&#10;                                else &#10;                                    MaterialTheme.colorScheme.primary.copy(alpha = 0.1f),&#10;                                shape = RoundedCornerShape(8.dp)&#10;                            )&#10;                            .border(&#10;                                width = 1.dp,&#10;                                color = if (isExampleResource) &#10;                                    MaterialTheme.colorScheme.tertiary&#10;                                else &#10;                                    MaterialTheme.colorScheme.primary,&#10;                                shape = RoundedCornerShape(8.dp)&#10;                            ),&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier.padding(horizontal = 6.dp, vertical = 2.dp),&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = categoryIcon,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(12.dp),&#10;                                tint = if (isExampleResource) &#10;                                    MaterialTheme.colorScheme.tertiary&#10;                                else &#10;                                    MaterialTheme.colorScheme.primary&#10;                            )&#10;                            Text(&#10;                                text = categoriaNombre,&#10;                                style = MaterialTheme.typography.labelSmall,&#10;                                color = if (isExampleResource) &#10;                                    MaterialTheme.colorScheme.tertiary&#10;                                else &#10;                                    MaterialTheme.colorScheme.primary,&#10;                                maxLines = 1,&#10;                                overflow = TextOverflow.Ellipsis&#10;                            )&#10;                        }&#10;                    }&#10;                    Row {&#10;                        if (!isExampleResource) {&#10;                            IconButton(&#10;                                onClick = { onToggleFavorite(recurso.id) },&#10;                                modifier = Modifier.size(24.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = if (recurso.isFavorite) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                                    contentDescription = &quot;Favorito&quot;,&#10;                                    modifier = Modifier.size(16.dp),&#10;                                    tint = if (recurso.isFavorite) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.primary&#10;                                )&#10;                            }&#10;                            IconButton(&#10;                                onClick = { /* TODO: Implementar compartir */ },&#10;                                modifier = Modifier.size(24.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Share,&#10;                                    contentDescription = &quot;Compartir&quot;,&#10;                                    modifier = Modifier.size(16.dp),&#10;                                    tint = MaterialTheme.colorScheme.primary&#10;                                )&#10;                            }&#10;                        } else {&#10;                            // Para el ejemplo, mostrar iconos deshabilitados&#10;                            Icon(&#10;                                imageVector = Icons.Default.FavoriteBorder,&#10;                                contentDescription = &quot;Ejemplo&quot;,&#10;                                modifier = Modifier.size(16.dp),&#10;                                tint = MaterialTheme.colorScheme.outline&#10;                            )&#10;                            Spacer(modifier = Modifier.width(4.dp))&#10;                            Icon(&#10;                                imageVector = Icons.Default.Share,&#10;                                contentDescription = &quot;Ejemplo&quot;,&#10;                                modifier = Modifier.size(16.dp),&#10;                                tint = MaterialTheme.colorScheme.outline&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = recurso.nombre,&#10;                    style = MaterialTheme.typography.titleSmall,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    color = if (isExampleResource) &#10;                        MaterialTheme.colorScheme.tertiary&#10;                    else &#10;                        MaterialTheme.colorScheme.onSurface&#10;                )&#10;&#10;                HorizontalDivider(&#10;                    modifier = Modifier.padding(vertical = 2.dp),&#10;                    color = if (isExampleResource) &#10;                        MaterialTheme.colorScheme.tertiary.copy(alpha = 0.5f)&#10;                    else &#10;                        MaterialTheme.colorScheme.outline.copy(alpha = 0.5f)&#10;                )&#10;                Text(&#10;                    text = recurso.descripcion,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    maxLines = 3,&#10;                    overflow = TextOverflow.Ellipsis,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    color = if (isExampleResource) &#10;                        MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                    else &#10;                        MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;        }&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 8.dp, vertical = 2.dp),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.DateRange,&#10;                    contentDescription = &quot;Icono de recurso&quot;,&#10;                    modifier = Modifier.size(10.dp),&#10;                    tint = if (isExampleResource) &#10;                        MaterialTheme.colorScheme.tertiary&#10;                    else &#10;                        MaterialTheme.colorScheme.primary&#10;                )&#10;                Text(&#10;                    text = formatFecha(recurso.createdAt),&#10;                    style = MaterialTheme.typography.labelSmall,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis,&#10;                    color = if (isExampleResource) &#10;                        MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                    else &#10;                        MaterialTheme.colorScheme.onSurface&#10;                )&#10;            }&#10;            Icon(&#10;                imageVector = Icons.Default.Link,&#10;                contentDescription = &quot;Icono de recurso&quot;,&#10;                modifier = Modifier.size(20.dp),&#10;                tint = if (isExampleResource) &#10;                    MaterialTheme.colorScheme.tertiary&#10;                else &#10;                    MaterialTheme.colorScheme.primary&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/resourceDetailScreen/ResourceDetailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/resourceDetailScreen/ResourceDetailScreen.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package esan.mendoza.impulso.presentation.resourceDetailScreen&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Edit&#10;import androidx.compose.material.icons.filled.Link&#10;import androidx.compose.material.icons.filled.Share&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalClipboardManager&#10;import androidx.compose.ui.text.AnnotatedString&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.data.local.entities.Category&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ResourceDetailScreen(&#10;    recurso: Recurso,&#10;    category: Category?,&#10;    onBackClick: () -&gt; Unit,&#10;    onEditClick: () -&gt; Unit&#10;) {&#10;    val scrollState = rememberScrollState()&#10;    val clipboardManager = LocalClipboardManager.current&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .verticalScroll(scrollState)&#10;    ) {&#10;        // Top Bar&#10;        TopAppBar(&#10;            title = { Text(&quot;Detalles del Recurso&quot;) },&#10;            navigationIcon = {&#10;                IconButton(onClick = onBackClick) {&#10;                    Icon(&#10;                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                        contentDescription = &quot;Volver&quot;&#10;                    )&#10;                }&#10;            },&#10;            actions = {&#10;                IconButton(onClick = onEditClick) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Edit,&#10;                        contentDescription = &quot;Editar&quot;&#10;                    )&#10;                }&#10;            }&#10;        )&#10;&#10;        // Content&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            // Title Card&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = recurso.nombre,&#10;                        fontSize = 24.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                    &#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    &#10;                    category?.let {&#10;                        Text(&#10;                            text = &quot;Categoría: ${it.nombre}&quot;,&#10;                            fontSize = 14.sp,&#10;                            color = MaterialTheme.colorScheme.secondary&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Description Card&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Descripción&quot;,&#10;                        fontSize = 18.sp,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                    &#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    &#10;                    Text(&#10;                        text = recurso.descripcion,&#10;                        fontSize = 16.sp,&#10;                        lineHeight = 24.sp&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Link Card&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Enlace&quot;,&#10;                        fontSize = 18.sp,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                    &#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    &#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = recurso.link,&#10;                            fontSize = 16.sp,&#10;                            color = MaterialTheme.colorScheme.primary,&#10;                            modifier = Modifier.weight(1f)&#10;                        )&#10;                        &#10;                        IconButton(&#10;                            onClick = {&#10;                                clipboardManager.setText(AnnotatedString(recurso.link))&#10;                            }&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Link,&#10;                                contentDescription = &quot;Copiar enlace&quot;&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Date Card&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Fecha de creación&quot;,&#10;                        fontSize = 18.sp,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                    &#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    &#10;                    Text(&#10;                        text = recurso.createdAt,&#10;                        fontSize = 16.sp&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Action Buttons&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Button(&#10;                    onClick = {&#10;                        clipboardManager.setText(AnnotatedString(recurso.link))&#10;                    },&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Link,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(18.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;Copiar enlace&quot;)&#10;                }&#10;                &#10;                OutlinedButton(&#10;                    onClick = {&#10;                        val shareText = &quot;${recurso.nombre}\n${recurso.descripcion}\n${recurso.link}&quot;&#10;                        clipboardManager.setText(AnnotatedString(shareText))&#10;                    },&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Share,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(18.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;Compartir&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/settingsScreen/SettingsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/settingsScreen/SettingsScreen.kt" />
              <option name="updatedContent" value="package esan.mendoza.impulso.presentation.settingsScreen&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material.icons.filled.Edit&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import esan.mendoza.impulso.data.local.entities.Category&#10;import esan.mendoza.impulso.presentation.viewmodel.CategoryViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SettingsScreen(&#10;    onBackClick: () -&gt; Unit,&#10;    categoryViewModel: CategoryViewModel = hiltViewModel()&#10;) {&#10;    val categories by categoryViewModel.categories.collectAsState()&#10;    val isLoading by categoryViewModel.isLoading.collectAsState()&#10;    var showDeleteDialog by remember { mutableStateOf(false) }&#10;    var showEditDialog by remember { mutableStateOf(false) }&#10;    var selectedCategory by remember { mutableStateOf&lt;Category?&gt;(null) }&#10;&#10;    Column(&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        // Top Bar&#10;        TopAppBar(&#10;            title = { &#10;                Text(&#10;                    &quot;Configuración&quot;,&#10;                    fontSize = 20.sp,&#10;                    fontWeight = FontWeight.Bold&#10;                ) &#10;            },&#10;            navigationIcon = {&#10;                IconButton(onClick = onBackClick) {&#10;                    Icon(&#10;                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                        contentDescription = &quot;Volver&quot;&#10;                    )&#10;                }&#10;            }&#10;        )&#10;&#10;        // Content&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp)&#10;        ) {&#10;            when {&#10;                isLoading -&gt; {&#10;                    CircularProgressIndicator(&#10;                        modifier = Modifier.align(Alignment.Center)&#10;                    )&#10;                }&#10;                categories.isEmpty() -&gt; {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxSize()&#10;                            .padding(32.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.Center&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Settings,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(64.dp),&#10;                            tint = MaterialTheme.colorScheme.outline&#10;                        )&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(&#10;                            text = &quot;No hay categorías&quot;,&#10;                            style = MaterialTheme.typography.headlineSmall,&#10;                            color = MaterialTheme.colorScheme.outline&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&#10;                            text = &quot;Agrega categorías usando el botón flotante&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.outline&#10;                        )&#10;                    }&#10;                }&#10;                else -&gt; {&#10;                    Column {&#10;                        Text(&#10;                            text = &quot;Gestionar Categorías&quot;,&#10;                            style = MaterialTheme.typography.titleLarge,&#10;                            color = MaterialTheme.colorScheme.primary,&#10;                            modifier = Modifier.padding(bottom = 16.dp)&#10;                        )&#10;                        &#10;                        Text(&#10;                            text = &quot;${categories.size} categorías creadas&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = MaterialTheme.colorScheme.secondary,&#10;                            modifier = Modifier.padding(bottom = 16.dp)&#10;                        )&#10;                        &#10;                        LazyColumn(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                        ) {&#10;                            items(categories) { category -&gt;&#10;                                CategoryConfigCard(&#10;                                    category = category,&#10;                                    onEditClick = {&#10;                                        selectedCategory = category&#10;                                        showEditDialog = true&#10;                                    },&#10;                                    onDeleteClick = {&#10;                                        selectedCategory = category&#10;                                        showDeleteDialog = true&#10;                                    }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Diálogo de confirmación para eliminar&#10;    if (showDeleteDialog &amp;&amp; selectedCategory != null) {&#10;        AlertDialog(&#10;            onDismissRequest = { showDeleteDialog = false },&#10;            title = { Text(&quot;Eliminar Categoría&quot;) },&#10;            text = { &#10;                Text(&quot;¿Estás seguro de que quieres eliminar la categoría \&quot;${selectedCategory!!.nombre}\&quot;? Esta acción también eliminará todos los recursos asociados.&quot;) &#10;            },&#10;            confirmButton = {&#10;                Button(&#10;                    onClick = {&#10;                        selectedCategory?.let { categoryViewModel.deleteCategory(it) }&#10;                        showDeleteDialog = false&#10;                        selectedCategory = null&#10;                    },&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = MaterialTheme.colorScheme.error&#10;                    )&#10;                ) {&#10;                    Text(&quot;Eliminar&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { &#10;                    showDeleteDialog = false&#10;                    selectedCategory = null&#10;                }) {&#10;                    Text(&quot;Cancelar&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;&#10;    // Diálogo para editar categoría&#10;    if (showEditDialog &amp;&amp; selectedCategory != null) {&#10;        EditCategoryDialog(&#10;            category = selectedCategory!!,&#10;            onDismiss = { &#10;                showEditDialog = false&#10;                selectedCategory = null&#10;            },&#10;            onConfirm = { nombre, icono -&gt;&#10;                val updatedCategory = selectedCategory!!.copy(&#10;                    nombre = nombre,&#10;                    icono = icono&#10;                )&#10;                categoryViewModel.updateCategory(updatedCategory)&#10;                showEditDialog = false&#10;                selectedCategory = null&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CategoryConfigCard(&#10;    category: Category,&#10;    onEditClick: () -&gt; Unit,&#10;    onDeleteClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = category.nombre,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = &quot;Ícono: ${category.icono}&quot;,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.secondary&#10;                )&#10;            }&#10;            &#10;            Row(&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                IconButton(&#10;                    onClick = onEditClick,&#10;                    colors = IconButtonDefaults.iconButtonColors(&#10;                        containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Edit,&#10;                        contentDescription = &quot;Editar&quot;,&#10;                        tint = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;                &#10;                IconButton(&#10;                    onClick = onDeleteClick,&#10;                    colors = IconButtonDefaults.iconButtonColors(&#10;                        containerColor = MaterialTheme.colorScheme.errorContainer&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Delete,&#10;                        contentDescription = &quot;Eliminar&quot;,&#10;                        tint = MaterialTheme.colorScheme.error&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun EditCategoryDialog(&#10;    category: Category,&#10;    onDismiss: () -&gt; Unit,&#10;    onConfirm: (String, String) -&gt; Unit&#10;) {&#10;    var nombre by remember { mutableStateOf(category.nombre) }&#10;    var icono by remember { mutableStateOf(category.icono) }&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = { Text(&quot;Editar Categoría&quot;) },&#10;        text = {&#10;            Column {&#10;                OutlinedTextField(&#10;                    value = nombre,&#10;                    onValueChange = { nombre = it },&#10;                    label = { Text(&quot;Nombre&quot;) },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                OutlinedTextField(&#10;                    value = icono,&#10;                    onValueChange = { icono = it },&#10;                    label = { Text(&quot;Ícono&quot;) },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;        },&#10;        confirmButton = {&#10;            Button(&#10;                onClick = { onConfirm(nombre, icono) },&#10;                enabled = nombre.isNotBlank() &amp;&amp; icono.isNotBlank()&#10;            ) {&#10;                Text(&quot;Guardar&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancelar&quot;)&#10;            }&#10;        }&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/viewmodel/CategoryViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/viewmodel/CategoryViewModel.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.presentation.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import esan.mendoza.impulso.data.local.entities.Category&#10;import esan.mendoza.impulso.data.local.repositories.CategoryRepository&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class CategoryViewModel @Inject constructor(&#10;    private val categoryRepository: CategoryRepository&#10;) : ViewModel() {&#10;&#10;    private val _categories = MutableStateFlow&lt;List&lt;Category&gt;&gt;(emptyList())&#10;    val categories: StateFlow&lt;List&lt;Category&gt;&gt; = _categories.asStateFlow()&#10;&#10;    private val _isLoading = MutableStateFlow(false)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading.asStateFlow()&#10;&#10;    private val _error = MutableStateFlow&lt;String?&gt;(null)&#10;    val error: StateFlow&lt;String?&gt; = _error.asStateFlow()&#10;&#10;    init {&#10;        loadCategories()&#10;    }&#10;&#10;    fun loadCategories() {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val categoryList = categoryRepository.getAllCategories()&#10;                _categories.value = categoryList&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun insertCategory(category: Category) {&#10;        viewModelScope.launch {&#10;            try {&#10;                categoryRepository.insertCategory(category)&#10;                loadCategories() // Recargar la lista&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateCategory(category: Category) {&#10;        viewModelScope.launch {&#10;            try {&#10;                categoryRepository.updateCategory(category)&#10;                loadCategories() // Recargar la lista&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteCategory(category: Category) {&#10;        viewModelScope.launch {&#10;            try {&#10;                categoryRepository.deleteCategory(category)&#10;                loadCategories() // Recargar la lista&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun addCategory(nombre: String, icono: String) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val newCategory = Category(&#10;                    id = 0, // Room generará el ID automáticamente si es @PrimaryKey(autoGenerate = true)&#10;                    nombre = nombre,&#10;                    icono = icono&#10;                )&#10;                categoryRepository.insertCategory(newCategory)&#10;                loadCategories() // Recargar la lista&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearError() {&#10;        _error.value = null&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package esan.mendoza.impulso.presentation.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import esan.mendoza.impulso.data.local.entities.Category&#10;import esan.mendoza.impulso.data.local.repositories.CategoryRepository&#10;import esan.mendoza.impulso.data.sample.ExampleData&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class CategoryViewModel @Inject constructor(&#10;    private val categoryRepository: CategoryRepository&#10;) : ViewModel() {&#10;&#10;    private val _categories = MutableStateFlow&lt;List&lt;Category&gt;&gt;(emptyList())&#10;    val categories: StateFlow&lt;List&lt;Category&gt;&gt; = _categories.asStateFlow()&#10;&#10;    private val _isLoading = MutableStateFlow(false)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading.asStateFlow()&#10;&#10;    private val _error = MutableStateFlow&lt;String?&gt;(null)&#10;    val error: StateFlow&lt;String?&gt; = _error.asStateFlow()&#10;&#10;    init {&#10;        loadCategories()&#10;    }&#10;&#10;    fun loadCategories() {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val categoryList = categoryRepository.getAllCategories()&#10;&#10;                // Si no hay categorías reales, mostrar la categoría de ejemplo&#10;                if (categoryList.isEmpty()) {&#10;                    _categories.value = listOf(ExampleData.exampleCategory)&#10;                } else {&#10;                    _categories.value = categoryList&#10;                }&#10;&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun insertCategory(category: Category) {&#10;        viewModelScope.launch {&#10;            try {&#10;                categoryRepository.insertCategory(category)&#10;                loadCategories() // Recargar la lista&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateCategory(category: Category) {&#10;        viewModelScope.launch {&#10;            try {&#10;                categoryRepository.updateCategory(category)&#10;                loadCategories() // Recargar la lista&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteCategory(category: Category) {&#10;        viewModelScope.launch {&#10;            try {&#10;                categoryRepository.deleteCategory(category)&#10;                loadCategories() // Recargar la lista&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun addCategory(nombre: String, icono: String) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val newCategory = Category(&#10;                    id = 0, // Room generará el ID automáticamente si es @PrimaryKey(autoGenerate = true)&#10;                    nombre = nombre,&#10;                    icono = icono&#10;                )&#10;                categoryRepository.insertCategory(newCategory)&#10;                loadCategories() // Recargar la lista (esto eliminará automáticamente el ejemplo)&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearError() {&#10;        _error.value = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/viewmodel/RecursoViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/viewmodel/RecursoViewModel.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.presentation.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.data.local.entities.RecursoWithCategory&#10;import esan.mendoza.impulso.data.local.repositories.RecursoRepository&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class RecursoViewModel @Inject constructor(&#10;    private val recursoRepository: RecursoRepository&#10;) : ViewModel() {&#10;&#10;    private val _recursos = MutableStateFlow&lt;List&lt;Recurso&gt;&gt;(emptyList())&#10;    val recursos: StateFlow&lt;List&lt;Recurso&gt;&gt; = _recursos.asStateFlow()&#10;&#10;    private val _recursosWithCategory = MutableStateFlow&lt;List&lt;RecursoWithCategory&gt;&gt;(emptyList())&#10;    val recursosWithCategory: StateFlow&lt;List&lt;RecursoWithCategory&gt;&gt; = _recursosWithCategory.asStateFlow()&#10;&#10;    private val _isLoading = MutableStateFlow(false)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading.asStateFlow()&#10;&#10;    private val _error = MutableStateFlow&lt;String?&gt;(null)&#10;    val error: StateFlow&lt;String?&gt; = _error.asStateFlow()&#10;&#10;    init {&#10;        loadRecursos()&#10;        loadRecursosWithCategory()&#10;    }&#10;&#10;    fun loadRecursos() {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val recursoList = recursoRepository.getAllRecursos()&#10;                _recursos.value = recursoList&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun loadRecursosWithCategory() {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val recursoList = recursoRepository.getRecursosWithCategory()&#10;                _recursosWithCategory.value = recursoList&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun loadRecursosByCategory(categoryId: Int) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val recursoList = recursoRepository.getRecursosByCategory(categoryId)&#10;                _recursos.value = recursoList&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun insertRecurso(recurso: Recurso) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val result = recursoRepository.insertRecurso(recurso)&#10;                result.fold(&#10;                    onSuccess = {&#10;                        loadRecursos()&#10;                        loadRecursosWithCategory()&#10;                        _error.value = null&#10;                    },&#10;                    onFailure = { exception -&gt;&#10;                        _error.value = exception.message&#10;                    }&#10;                )&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateRecurso(recurso: Recurso) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val result = recursoRepository.updateRecurso(recurso)&#10;                result.fold(&#10;                    onSuccess = {&#10;                        loadRecursos()&#10;                        loadRecursosWithCategory()&#10;                        _error.value = null&#10;                    },&#10;                    onFailure = { exception -&gt;&#10;                        _error.value = exception.message&#10;                    }&#10;                )&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteRecurso(recurso: Recurso) {&#10;        viewModelScope.launch {&#10;            try {&#10;                recursoRepository.deleteRecurso(recurso)&#10;                loadRecursos()&#10;                loadRecursosWithCategory()&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun searchRecursosByName(query: String) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val recursoList = recursoRepository.searchRecursosByName(query)&#10;                _recursos.value = recursoList&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearError() {&#10;        _error.value = null&#10;    }&#10;&#10;    fun addRecurso(nombre: String, descripcion: String, categoriaId: Int, link: String, createdAt: String) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val newRecurso = Recurso(&#10;                    id = 0, // Room generará el ID automáticamente&#10;                    nombre = nombre,&#10;                    descripcion = descripcion,&#10;                    categoriaId = categoriaId,&#10;                    link = link,&#10;                    createdAt = createdAt&#10;                )&#10;                val result = recursoRepository.insertRecurso(newRecurso)&#10;                result.fold(&#10;                    onSuccess = {&#10;                        loadRecursos()&#10;                        loadRecursosWithCategory()&#10;                        _error.value = null&#10;                    },&#10;                    onFailure = { exception -&gt;&#10;                        _error.value = exception.message&#10;                    }&#10;                )&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    // Métodos para manejar favoritos&#10;    fun loadFavoriteRecursos() {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val favoriteRecursos = recursoRepository.getFavoriteRecursos()&#10;                _recursos.value = favoriteRecursos&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun toggleFavorite(recursoId: Int) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val result = recursoRepository.toggleFavorite(recursoId)&#10;                result.fold(&#10;                    onSuccess = {&#10;                        loadRecursos()&#10;                        loadRecursosWithCategory()&#10;                        _error.value = null&#10;                    },&#10;                    onFailure = { exception -&gt;&#10;                        _error.value = exception.message&#10;                    }&#10;                )&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package esan.mendoza.impulso.presentation.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.data.local.entities.RecursoWithCategory&#10;import esan.mendoza.impulso.data.local.repositories.RecursoRepository&#10;import esan.mendoza.impulso.data.sample.ExampleData&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class RecursoViewModel @Inject constructor(&#10;    private val recursoRepository: RecursoRepository&#10;) : ViewModel() {&#10;&#10;    private val _recursos = MutableStateFlow&lt;List&lt;Recurso&gt;&gt;(emptyList())&#10;    val recursos: StateFlow&lt;List&lt;Recurso&gt;&gt; = _recursos.asStateFlow()&#10;&#10;    private val _recursosWithCategory = MutableStateFlow&lt;List&lt;RecursoWithCategory&gt;&gt;(emptyList())&#10;    val recursosWithCategory: StateFlow&lt;List&lt;RecursoWithCategory&gt;&gt; = _recursosWithCategory.asStateFlow()&#10;&#10;    private val _isLoading = MutableStateFlow(false)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading.asStateFlow()&#10;&#10;    private val _error = MutableStateFlow&lt;String?&gt;(null)&#10;    val error: StateFlow&lt;String?&gt; = _error.asStateFlow()&#10;&#10;    init {&#10;        loadRecursos()&#10;        loadRecursosWithCategory()&#10;    }&#10;&#10;    fun loadRecursos() {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val recursoList = recursoRepository.getAllRecursos()&#10;&#10;                // Si no hay recursos reales, mostrar el recurso de ejemplo&#10;                if (recursoList.isEmpty()) {&#10;                    _recursos.value = listOf(ExampleData.exampleRecurso)&#10;                } else {&#10;                    _recursos.value = recursoList&#10;                }&#10;&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun loadRecursosWithCategory() {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val recursoList = recursoRepository.getRecursosWithCategory()&#10;                _recursosWithCategory.value = recursoList&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun loadRecursosByCategory(categoryId: Int) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val recursoList = recursoRepository.getRecursosByCategory(categoryId)&#10;                _recursos.value = recursoList&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun insertRecurso(recurso: Recurso) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val result = recursoRepository.insertRecurso(recurso)&#10;                result.fold(&#10;                    onSuccess = {&#10;                        loadRecursos()&#10;                        loadRecursosWithCategory()&#10;                        _error.value = null&#10;                    },&#10;                    onFailure = { exception -&gt;&#10;                        _error.value = exception.message&#10;                    }&#10;                )&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateRecurso(recurso: Recurso) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val result = recursoRepository.updateRecurso(recurso)&#10;                result.fold(&#10;                    onSuccess = {&#10;                        loadRecursos()&#10;                        loadRecursosWithCategory()&#10;                        _error.value = null&#10;                    },&#10;                    onFailure = { exception -&gt;&#10;                        _error.value = exception.message&#10;                    }&#10;                )&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteRecurso(recurso: Recurso) {&#10;        viewModelScope.launch {&#10;            try {&#10;                recursoRepository.deleteRecurso(recurso)&#10;                loadRecursos()&#10;                loadRecursosWithCategory()&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun searchRecursosByName(query: String) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val recursoList = recursoRepository.searchRecursosByName(query)&#10;                _recursos.value = recursoList&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearError() {&#10;        _error.value = null&#10;    }&#10;&#10;    fun addRecurso(nombre: String, descripcion: String, categoriaId: Int, link: String, createdAt: String) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val newRecurso = Recurso(&#10;                    id = 0, // Room generará el ID automáticamente&#10;                    nombre = nombre,&#10;                    descripcion = descripcion,&#10;                    categoriaId = categoriaId,&#10;                    link = link,&#10;                    createdAt = createdAt&#10;                )&#10;                val result = recursoRepository.insertRecurso(newRecurso)&#10;                result.fold(&#10;                    onSuccess = {&#10;                        loadRecursos() // Recargar la lista (esto eliminará automáticamente el ejemplo)&#10;                        loadRecursosWithCategory()&#10;                        _error.value = null&#10;                    },&#10;                    onFailure = { exception -&gt;&#10;                        _error.value = exception.message&#10;                    }&#10;                )&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    // Métodos para manejar favoritos&#10;    fun loadFavoriteRecursos() {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val favoriteRecursos = recursoRepository.getFavoriteRecursos()&#10;&#10;                // Para favoritos, no mostrar ejemplos - solo recursos reales marcados como favoritos&#10;                _recursos.value = favoriteRecursos&#10;                _error.value = null&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun toggleFavorite(recursoId: Int) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val result = recursoRepository.toggleFavorite(recursoId)&#10;                result.fold(&#10;                    onSuccess = {&#10;                        loadRecursos()&#10;                        loadRecursosWithCategory()&#10;                        _error.value = null&#10;                    },&#10;                    onFailure = { exception -&gt;&#10;                        _error.value = exception.message&#10;                    }&#10;                )&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>