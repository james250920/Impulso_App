<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/MainActivity.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import dagger.hilt.android.AndroidEntryPoint&#10;import esan.mendoza.impulso.presentation.homeScreen.HomeScreen&#10;import esan.mendoza.impulso.ui.theme.ImpulsoTheme&#10;&#10;@AndroidEntryPoint&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            ImpulsoTheme {&#10;                HomeScreen()&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package esan.mendoza.impulso&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.OnBackPressedCallback&#10;import androidx.activity.compose.LocalOnBackPressedDispatcherOwner&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.DisposableEffect&#10;import androidx.compose.runtime.remember&#10;import dagger.hilt.android.AndroidEntryPoint&#10;import esan.mendoza.impulso.presentation.homeScreen.HomeScreen&#10;import esan.mendoza.impulso.ui.theme.ImpulsoTheme&#10;&#10;@AndroidEntryPoint&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            ImpulsoTheme {&#10;                HomeScreen()&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/homeScreen/HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/presentation/homeScreen/HomeScreen.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.presentation.homeScreen&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.slideInVertically&#10;import androidx.compose.animation.slideOutVertically&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.AddRoad&#10;import androidx.compose.material.icons.filled.Category&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.data.local.entities.Category&#10;import esan.mendoza.impulso.presentation.principalScreen.PrincipalScreen&#10;import esan.mendoza.impulso.presentation.resourceDetailScreen.ResourceDetailScreen&#10;import esan.mendoza.impulso.presentation.navigation.Screen&#10;import esan.mendoza.impulso.presentation.navigation.NavigationState&#10;import esan.mendoza.impulso.presentation.viewmodel.CategoryViewModel&#10;import esan.mendoza.impulso.presentation.viewmodel.RecursoViewModel&#10;import esan.mendoza.impulso.presentation.favoritesScreen.FavoritesScreen&#10;import esan.mendoza.impulso.presentation.settingsScreen.SettingsScreen&#10;&#10;@Composable&#10;fun HomeScreen(&#10;    categoryViewModel: CategoryViewModel = hiltViewModel(),&#10;    recursoViewModel: RecursoViewModel = hiltViewModel()&#10;) {&#10;    var navigationState by remember { mutableStateOf(NavigationState()) }&#10;    var fabsVisible by remember { mutableStateOf(false) }&#10;    var showAddCategoryDialog by remember { mutableStateOf(false) }&#10;    var showAddRecursoDialog by remember { mutableStateOf(false) }&#10;&#10;    Scaffold(&#10;        floatingActionButton = {&#10;            // Solo mostrar FAB principal en la pantalla HOME&#10;            if (navigationState.currentScreen == Screen.HOME) {&#10;                FloatingActionButton(&#10;                    onClick = {&#10;                        fabsVisible = !fabsVisible&#10;                    },&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = if (fabsVisible) Icons.Default.Close else Icons.Default.Add,&#10;                        contentDescription = if (fabsVisible) &quot;Close&quot; else &quot;Open Menu&quot;,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    ) { innerPadding -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .padding(innerPadding)&#10;                .fillMaxSize()&#10;        ) {&#10;            // Contenido principal basado en la pantalla actual&#10;            when (navigationState.currentScreen) {&#10;                Screen.HOME -&gt; {&#10;                    Column(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        PrincipalScreen(&#10;                            categoryViewModel = categoryViewModel,&#10;                            recursoViewModel = recursoViewModel,&#10;                            onResourceClick = { recurso, category -&gt;&#10;                                navigationState = navigationState.copy(&#10;                                    currentScreen = Screen.RESOURCE_DETAIL,&#10;                                    selectedRecurso = recurso,&#10;                                    selectedCategory = category&#10;                                )&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Screen.RESOURCE_DETAIL -&gt; {&#10;                    navigationState.selectedRecurso?.let { recurso -&gt;&#10;                        ResourceDetailScreen(&#10;                            recurso = recurso,&#10;                            category = navigationState.selectedCategory,&#10;                            onBackClick = {&#10;                                navigationState = navigationState.copy(&#10;                                    currentScreen = Screen.HOME,&#10;                                    selectedRecurso = null,&#10;                                    selectedCategory = null&#10;                                )&#10;                            },&#10;                            onEditClick = {&#10;                                // TODO: Implementar ediciÃ³n de recurso&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Screen.FAVORITES -&gt; {&#10;                    FavoritesScreen(&#10;                        onBackClick = {&#10;                            navigationState = navigationState.copy(currentScreen = Screen.HOME)&#10;                        },&#10;                        onResourceClick = { recurso, category -&gt;&#10;                            navigationState = navigationState.copy(&#10;                                currentScreen = Screen.RESOURCE_DETAIL,&#10;                                selectedRecurso = recurso,&#10;                                selectedCategory = category&#10;                            )&#10;                        },&#10;                        categoryViewModel = categoryViewModel,&#10;                        recursoViewModel = recursoViewModel&#10;                    )&#10;                }&#10;&#10;                Screen.SETTINGS -&gt; {&#10;                    SettingsScreen(&#10;                        onBackClick = {&#10;                            navigationState = navigationState.copy(currentScreen = Screen.HOME)&#10;                        },&#10;                        categoryViewModel = categoryViewModel&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // FABs secundarios posicionados en la esquina inferior derecha (solo en HOME)&#10;        if (navigationState.currentScreen == Screen.HOME) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(bottom = 80.dp), // Espacio para el FAB principal&#10;                contentAlignment = Alignment.BottomEnd&#10;            ) {&#10;                FABColumn(&#10;                    isVisible = fabsVisible,&#10;                    fabsEnabled = true,&#10;                    onAddCategory = { showAddCategoryDialog = true },&#10;                    onAddRecurso = { showAddRecursoDialog = true },&#10;                    onFavorites = {&#10;                        navigationState = navigationState.copy(currentScreen = Screen.FAVORITES)&#10;                        fabsVisible = false&#10;                    },&#10;                    onSettings = {&#10;                        navigationState = navigationState.copy(currentScreen = Screen.SETTINGS)&#10;                        fabsVisible = false&#10;                    }&#10;                )&#10;            }&#10;        }&#10;&#10;        // DiÃ¡logos (disponibles en todas las pantallas)&#10;        esan.mendoza.impulso.presentation.component.DialogAddCategory(&#10;            show = showAddCategoryDialog,&#10;            onDismiss = { showAddCategoryDialog = false },&#10;            onAccept = { nombre, icono -&gt;&#10;                categoryViewModel.addCategory(nombre, icono)&#10;                showAddCategoryDialog = false&#10;            }&#10;        )&#10;&#10;        esan.mendoza.impulso.presentation.component.DialogAddRecurso(&#10;            show = showAddRecursoDialog,&#10;            onDismiss = { showAddRecursoDialog = false },&#10;            onAccept = { nombre, descripcion, categoriaId, link, createdAt -&gt;&#10;                recursoViewModel.addRecurso(nombre, descripcion, categoriaId.toIntOrNull() ?: 0, link, createdAt)&#10;                showAddRecursoDialog = false&#10;            },&#10;            categoryViewModel = categoryViewModel&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CustomFAB(&#10;    icon: ImageVector,&#10;    contentDescription: String,&#10;    onClick: () -&gt; Unit,&#10;    enabled: Boolean = true&#10;) {&#10;    FloatingActionButton(&#10;        onClick = onClick,&#10;        modifier = Modifier&#10;            .padding(vertical = 2.dp, horizontal = 16.dp)&#10;            .alpha(if (enabled) 1f else 0.9f),&#10;        containerColor = if (enabled) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.surfaceVariant&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = contentDescription,&#10;            modifier = Modifier.size(24.dp),&#10;            tint = if (enabled) MaterialTheme.colorScheme.onPrimary else MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FABColumn(&#10;    isVisible: Boolean,&#10;    fabsEnabled: Boolean,&#10;    onAddCategory: () -&gt; Unit,&#10;    onAddRecurso: () -&gt; Unit,&#10;    onFavorites: () -&gt; Unit,&#10;    onSettings: () -&gt; Unit&#10;) {&#10;    AnimatedVisibility(&#10;        visible = isVisible,&#10;        enter = slideInVertically(&#10;            initialOffsetY = { it },&#10;            animationSpec = tween(300)&#10;        ) + fadeIn(animationSpec = tween(300)),&#10;        exit = slideOutVertically(&#10;            targetOffsetY = { it },&#10;            animationSpec = tween(300)&#10;        ) + fadeOut(animationSpec = tween(300))&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .padding(end = 16.dp, bottom = 65.dp),&#10;            verticalArrangement = Arrangement.spacedBy(8.dp),&#10;            horizontalAlignment = Alignment.End&#10;        ) {&#10;            CustomFAB(&#10;                icon = Icons.Default.AddRoad,&#10;                contentDescription = &quot;AÃ±adir Recurso&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onAddRecurso()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;&#10;            CustomFAB(&#10;                icon = Icons.Default.Category,&#10;                contentDescription = &quot;AÃ±adir Categoria&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onAddCategory()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;&#10;            CustomFAB(&#10;                icon = Icons.Default.Favorite,&#10;                contentDescription = &quot;Mis Favoritos&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onFavorites()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;&#10;            CustomFAB(&#10;                icon = Icons.Default.Settings,&#10;                contentDescription = &quot;ConfiguraciÃ³n de categorias y recursos&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onSettings()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package esan.mendoza.impulso.presentation.homeScreen&#10;&#10;import androidx.activity.OnBackPressedCallback&#10;import androidx.activity.compose.LocalOnBackPressedDispatcherOwner&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.slideInVertically&#10;import androidx.compose.animation.slideOutVertically&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.AddRoad&#10;import androidx.compose.material.icons.filled.Category&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.DisposableEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import esan.mendoza.impulso.data.local.entities.Recurso&#10;import esan.mendoza.impulso.data.local.entities.Category&#10;import esan.mendoza.impulso.presentation.principalScreen.PrincipalScreen&#10;import esan.mendoza.impulso.presentation.resourceDetailScreen.ResourceDetailScreen&#10;import esan.mendoza.impulso.presentation.navigation.Screen&#10;import esan.mendoza.impulso.presentation.navigation.NavigationState&#10;import esan.mendoza.impulso.presentation.viewmodel.CategoryViewModel&#10;import esan.mendoza.impulso.presentation.viewmodel.RecursoViewModel&#10;import esan.mendoza.impulso.presentation.favoritesScreen.FavoritesScreen&#10;import esan.mendoza.impulso.presentation.settingsScreen.SettingsScreen&#10;&#10;@Composable&#10;fun HomeScreen(&#10;    categoryViewModel: CategoryViewModel = hiltViewModel(),&#10;    recursoViewModel: RecursoViewModel = hiltViewModel()&#10;) {&#10;    var navigationState by remember { mutableStateOf(NavigationState()) }&#10;    var fabsVisible by remember { mutableStateOf(false) }&#10;    var showAddCategoryDialog by remember { mutableStateOf(false) }&#10;    var showAddRecursoDialog by remember { mutableStateOf(false) }&#10;&#10;    // Configurar el manejo del botÃ³n de regreso del dispositivo&#10;    val backDispatcher = LocalOnBackPressedDispatcherOwner.current?.onBackPressedDispatcher&#10;    &#10;    DisposableEffect(navigationState.currentScreen, backDispatcher) {&#10;        val callback = object : OnBackPressedCallback(true) {&#10;            override fun handleOnBackPressed() {&#10;                when (navigationState.currentScreen) {&#10;                    Screen.HOME -&gt; {&#10;                        // Si estamos en HOME, salir de la app (comportamiento por defecto)&#10;                        isEnabled = false&#10;                        backDispatcher?.onBackPressed()&#10;                    }&#10;                    Screen.RESOURCE_DETAIL -&gt; {&#10;                        // Regresar a HOME desde detalle de recurso&#10;                        navigationState = navigationState.copy(&#10;                            currentScreen = Screen.HOME,&#10;                            selectedRecurso = null,&#10;                            selectedCategory = null&#10;                        )&#10;                    }&#10;                    Screen.FAVORITES -&gt; {&#10;                        // Regresar a HOME desde favoritos&#10;                        navigationState = navigationState.copy(currentScreen = Screen.HOME)&#10;                    }&#10;                    Screen.SETTINGS -&gt; {&#10;                        // Regresar a HOME desde configuraciÃ³n&#10;                        navigationState = navigationState.copy(currentScreen = Screen.HOME)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        &#10;        backDispatcher?.addCallback(callback)&#10;        &#10;        onDispose {&#10;            callback.remove()&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        floatingActionButton = {&#10;            // Solo mostrar FAB principal en la pantalla HOME&#10;            if (navigationState.currentScreen == Screen.HOME) {&#10;                FloatingActionButton(&#10;                    onClick = {&#10;                        fabsVisible = !fabsVisible&#10;                    },&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = if (fabsVisible) Icons.Default.Close else Icons.Default.Add,&#10;                        contentDescription = if (fabsVisible) &quot;Close&quot; else &quot;Open Menu&quot;,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    ) { innerPadding -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .padding(innerPadding)&#10;                .fillMaxSize()&#10;        ) {&#10;            // Contenido principal basado en la pantalla actual&#10;            when (navigationState.currentScreen) {&#10;                Screen.HOME -&gt; {&#10;                    Column(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        PrincipalScreen(&#10;                            categoryViewModel = categoryViewModel,&#10;                            recursoViewModel = recursoViewModel,&#10;                            onResourceClick = { recurso, category -&gt;&#10;                                navigationState = navigationState.copy(&#10;                                    currentScreen = Screen.RESOURCE_DETAIL,&#10;                                    selectedRecurso = recurso,&#10;                                    selectedCategory = category&#10;                                )&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Screen.RESOURCE_DETAIL -&gt; {&#10;                    navigationState.selectedRecurso?.let { recurso -&gt;&#10;                        ResourceDetailScreen(&#10;                            recurso = recurso,&#10;                            category = navigationState.selectedCategory,&#10;                            onBackClick = {&#10;                                navigationState = navigationState.copy(&#10;                                    currentScreen = Screen.HOME,&#10;                                    selectedRecurso = null,&#10;                                    selectedCategory = null&#10;                                )&#10;                            },&#10;                            onEditClick = {&#10;                                // TODO: Implementar ediciÃ³n de recurso&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Screen.FAVORITES -&gt; {&#10;                    FavoritesScreen(&#10;                        onBackClick = {&#10;                            navigationState = navigationState.copy(currentScreen = Screen.HOME)&#10;                        },&#10;                        onResourceClick = { recurso, category -&gt;&#10;                            navigationState = navigationState.copy(&#10;                                currentScreen = Screen.RESOURCE_DETAIL,&#10;                                selectedRecurso = recurso,&#10;                                selectedCategory = category&#10;                            )&#10;                        },&#10;                        categoryViewModel = categoryViewModel,&#10;                        recursoViewModel = recursoViewModel&#10;                    )&#10;                }&#10;&#10;                Screen.SETTINGS -&gt; {&#10;                    SettingsScreen(&#10;                        onBackClick = {&#10;                            navigationState = navigationState.copy(currentScreen = Screen.HOME)&#10;                        },&#10;                        categoryViewModel = categoryViewModel&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // FABs secundarios posicionados en la esquina inferior derecha (solo en HOME)&#10;        if (navigationState.currentScreen == Screen.HOME) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(bottom = 80.dp), // Espacio para el FAB principal&#10;                contentAlignment = Alignment.BottomEnd&#10;            ) {&#10;                FABColumn(&#10;                    isVisible = fabsVisible,&#10;                    fabsEnabled = true,&#10;                    onAddCategory = { showAddCategoryDialog = true },&#10;                    onAddRecurso = { showAddRecursoDialog = true },&#10;                    onFavorites = {&#10;                        navigationState = navigationState.copy(currentScreen = Screen.FAVORITES)&#10;                        fabsVisible = false&#10;                    },&#10;                    onSettings = {&#10;                        navigationState = navigationState.copy(currentScreen = Screen.SETTINGS)&#10;                        fabsVisible = false&#10;                    }&#10;                )&#10;            }&#10;        }&#10;&#10;        // DiÃ¡logos (disponibles en todas las pantallas)&#10;        esan.mendoza.impulso.presentation.component.DialogAddCategory(&#10;            show = showAddCategoryDialog,&#10;            onDismiss = { showAddCategoryDialog = false },&#10;            onAccept = { nombre, icono -&gt;&#10;                categoryViewModel.addCategory(nombre, icono)&#10;                showAddCategoryDialog = false&#10;            }&#10;        )&#10;&#10;        esan.mendoza.impulso.presentation.component.DialogAddRecurso(&#10;            show = showAddRecursoDialog,&#10;            onDismiss = { showAddRecursoDialog = false },&#10;            onAccept = { nombre, descripcion, categoriaId, link, createdAt -&gt;&#10;                recursoViewModel.addRecurso(nombre, descripcion, categoriaId.toIntOrNull() ?: 0, link, createdAt)&#10;                showAddRecursoDialog = false&#10;            },&#10;            categoryViewModel = categoryViewModel&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CustomFAB(&#10;    icon: ImageVector,&#10;    contentDescription: String,&#10;    onClick: () -&gt; Unit,&#10;    enabled: Boolean = true&#10;) {&#10;    FloatingActionButton(&#10;        onClick = onClick,&#10;        modifier = Modifier&#10;            .padding(vertical = 2.dp, horizontal = 16.dp)&#10;            .alpha(if (enabled) 1f else 0.9f),&#10;        containerColor = if (enabled) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.surfaceVariant&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = contentDescription,&#10;            modifier = Modifier.size(24.dp),&#10;            tint = if (enabled) MaterialTheme.colorScheme.onPrimary else MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FABColumn(&#10;    isVisible: Boolean,&#10;    fabsEnabled: Boolean,&#10;    onAddCategory: () -&gt; Unit,&#10;    onAddRecurso: () -&gt; Unit,&#10;    onFavorites: () -&gt; Unit,&#10;    onSettings: () -&gt; Unit&#10;) {&#10;    AnimatedVisibility(&#10;        visible = isVisible,&#10;        enter = slideInVertically(&#10;            initialOffsetY = { it },&#10;            animationSpec = tween(300)&#10;        ) + fadeIn(animationSpec = tween(300)),&#10;        exit = slideOutVertically(&#10;            targetOffsetY = { it },&#10;            animationSpec = tween(300)&#10;        ) + fadeOut(animationSpec = tween(300))&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .padding(end = 16.dp, bottom = 65.dp),&#10;            verticalArrangement = Arrangement.spacedBy(8.dp),&#10;            horizontalAlignment = Alignment.End&#10;        ) {&#10;            CustomFAB(&#10;                icon = Icons.Default.AddRoad,&#10;                contentDescription = &quot;AÃ±adir Recurso&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onAddRecurso()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;&#10;            CustomFAB(&#10;                icon = Icons.Default.Category,&#10;                contentDescription = &quot;AÃ±adir Categoria&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onAddCategory()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;&#10;            CustomFAB(&#10;                icon = Icons.Default.Favorite,&#10;                contentDescription = &quot;Mis Favoritos&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onFavorites()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;&#10;            CustomFAB(&#10;                icon = Icons.Default.Settings,&#10;                contentDescription = &quot;ConfiguraciÃ³n de categorias y recursos&quot;,&#10;                onClick = {&#10;                    if (fabsEnabled) {&#10;                        onSettings()&#10;                    }&#10;                },&#10;                enabled = fabsEnabled&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/ui/theme/Type.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/esan/mendoza/impulso/ui/theme/Type.kt" />
              <option name="originalContent" value="package esan.mendoza.impulso.ui.theme&#10;&#10;import androidx.compose.material3.Typography&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.Font&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.sp&#10;import esan.mendoza.impulso.R&#10;&#10;// Definir la familia de fuentes Urbanist&#10;val UrbanistFontFamily = FontFamily(&#10;    Font(R.font.urbanist_regular, FontWeight.Normal),&#10;    Font(R.font.urbanist_medium, FontWeight.Medium),&#10;    Font(R.font.urbanist_semibold, FontWeight.SemiBold),&#10;    Font(R.font.urbanist_bold, FontWeight.Bold)&#10;)&#10;&#10;// Set of Material typography styles with Urbanist font&#10;val Typography = Typography(&#10;    displayLarge = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 57.sp,&#10;        lineHeight = 64.sp,&#10;        letterSpacing = (-0.25).sp&#10;    ),&#10;    displayMedium = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 45.sp,&#10;        lineHeight = 52.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    displaySmall = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 36.sp,&#10;        lineHeight = 44.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    headlineLarge = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 32.sp,&#10;        lineHeight = 40.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    headlineMedium = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 28.sp,&#10;        lineHeight = 36.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    headlineSmall = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 24.sp,&#10;        lineHeight = 32.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    titleLarge = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 22.sp,&#10;        lineHeight = 28.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    titleMedium = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 16.sp,&#10;        lineHeight = 24.sp,&#10;        letterSpacing = 0.15.sp&#10;    ),&#10;    titleSmall = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 14.sp,&#10;        lineHeight = 20.sp,&#10;        letterSpacing = 0.1.sp&#10;    ),&#10;    bodyLarge = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 16.sp,&#10;        lineHeight = 24.sp,&#10;        letterSpacing = 0.5.sp&#10;    ),&#10;    bodyMedium = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 14.sp,&#10;        lineHeight = 20.sp,&#10;        letterSpacing = 0.25.sp&#10;    ),&#10;    bodySmall = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 12.sp,&#10;        lineHeight = 16.sp,&#10;        letterSpacing = 0.4.sp&#10;    ),&#10;    labelLarge = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 14.sp,&#10;        lineHeight = 20.sp,&#10;        letterSpacing = 0.1.sp&#10;    ),&#10;    labelMedium = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 12.sp,&#10;        lineHeight = 16.sp,&#10;        letterSpacing = 0.5.sp&#10;    ),&#10;    labelSmall = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 11.sp,&#10;        lineHeight = 16.sp,&#10;        letterSpacing = 0.5.sp&#10;    )&#10;)" />
              <option name="updatedContent" value="package esan.mendoza.impulso.ui.theme&#10;&#10;import androidx.compose.material3.Typography&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.sp&#10;&#10;// Usar fuentes del sistema por ahora (sin referencias a archivos de fuente faltantes)&#10;// Para usar Urbanist, descarga los archivos TTF de Google Fonts y reemplaza FontFamily.Default&#10;val UrbanistFontFamily = FontFamily.Default // Temporalmente usar fuente por defecto&#10;&#10;// Set of Material typography styles&#10;val Typography = Typography(&#10;    displayLarge = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 57.sp,&#10;        lineHeight = 64.sp,&#10;        letterSpacing = (-0.25).sp&#10;    ),&#10;    displayMedium = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 45.sp,&#10;        lineHeight = 52.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    displaySmall = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 36.sp,&#10;        lineHeight = 44.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    headlineLarge = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 32.sp,&#10;        lineHeight = 40.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    headlineMedium = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 28.sp,&#10;        lineHeight = 36.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    headlineSmall = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 24.sp,&#10;        lineHeight = 32.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    titleLarge = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 22.sp,&#10;        lineHeight = 28.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    titleMedium = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 16.sp,&#10;        lineHeight = 24.sp,&#10;        letterSpacing = 0.15.sp&#10;    ),&#10;    titleSmall = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 14.sp,&#10;        lineHeight = 20.sp,&#10;        letterSpacing = 0.1.sp&#10;    ),&#10;    bodyLarge = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 16.sp,&#10;        lineHeight = 24.sp,&#10;        letterSpacing = 0.5.sp&#10;    ),&#10;    bodyMedium = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 14.sp,&#10;        lineHeight = 20.sp,&#10;        letterSpacing = 0.25.sp&#10;    ),&#10;    bodySmall = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 12.sp,&#10;        lineHeight = 16.sp,&#10;        letterSpacing = 0.4.sp&#10;    ),&#10;    labelLarge = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 14.sp,&#10;        lineHeight = 20.sp,&#10;        letterSpacing = 0.1.sp&#10;    ),&#10;    labelMedium = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 12.sp,&#10;        lineHeight = 16.sp,&#10;        letterSpacing = 0.5.sp&#10;    ),&#10;    labelSmall = TextStyle(&#10;        fontFamily = UrbanistFontFamily,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 11.sp,&#10;        lineHeight = 16.sp,&#10;        letterSpacing = 0.5.sp&#10;    )&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/font/urbanist_regular.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/font/urbanist_regular.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;font-family xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;font&#10;        android:fontStyle=&quot;normal&quot;&#10;        android:fontWeight=&quot;400&quot;&#10;        android:font=&quot;@font/urbanist_regular&quot; /&gt;&#10;&lt;/font-family&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>